
BlinkLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08006b78  08006b78  00016b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c24  08006c24  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  08006c24  08006c24  00016c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c2c  08006c2c  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c2c  08006c2c  00016c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c30  08006c30  00016c30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08006c34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009a4  20000100  08006d34  00020100  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000aa4  08006d34  00020aa4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 13 .debug_info   000196f0  00000000  00000000  00020173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003414  00000000  00000000  00039863  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001708  00000000  00000000  0003cc78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011cc  00000000  00000000  0003e380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002898d  00000000  00000000  0003f54c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b1fa  00000000  00000000  00067ed9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f5245  00000000  00000000  000830d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000067f8  00000000  00000000  00178318  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000042  00000000  00000000  0017eb10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000100 	.word	0x20000100
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006b60 	.word	0x08006b60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000104 	.word	0x20000104
 80001cc:	08006b60 	.word	0x08006b60

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_d2iz>:
 80005e8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80005ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80005f0:	d215      	bcs.n	800061e <__aeabi_d2iz+0x36>
 80005f2:	d511      	bpl.n	8000618 <__aeabi_d2iz+0x30>
 80005f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80005f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80005fc:	d912      	bls.n	8000624 <__aeabi_d2iz+0x3c>
 80005fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000602:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000606:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800060a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800060e:	fa23 f002 	lsr.w	r0, r3, r2
 8000612:	bf18      	it	ne
 8000614:	4240      	negne	r0, r0
 8000616:	4770      	bx	lr
 8000618:	f04f 0000 	mov.w	r0, #0
 800061c:	4770      	bx	lr
 800061e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000622:	d105      	bne.n	8000630 <__aeabi_d2iz+0x48>
 8000624:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000628:	bf08      	it	eq
 800062a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800062e:	4770      	bx	lr
 8000630:	f04f 0000 	mov.w	r0, #0
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop

08000638 <__aeabi_uldivmod>:
 8000638:	b953      	cbnz	r3, 8000650 <__aeabi_uldivmod+0x18>
 800063a:	b94a      	cbnz	r2, 8000650 <__aeabi_uldivmod+0x18>
 800063c:	2900      	cmp	r1, #0
 800063e:	bf08      	it	eq
 8000640:	2800      	cmpeq	r0, #0
 8000642:	bf1c      	itt	ne
 8000644:	f04f 31ff 	movne.w	r1, #4294967295
 8000648:	f04f 30ff 	movne.w	r0, #4294967295
 800064c:	f000 b970 	b.w	8000930 <__aeabi_idiv0>
 8000650:	f1ad 0c08 	sub.w	ip, sp, #8
 8000654:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000658:	f000 f806 	bl	8000668 <__udivmoddi4>
 800065c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000660:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000664:	b004      	add	sp, #16
 8000666:	4770      	bx	lr

08000668 <__udivmoddi4>:
 8000668:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800066c:	9e08      	ldr	r6, [sp, #32]
 800066e:	460d      	mov	r5, r1
 8000670:	4604      	mov	r4, r0
 8000672:	460f      	mov	r7, r1
 8000674:	2b00      	cmp	r3, #0
 8000676:	d14a      	bne.n	800070e <__udivmoddi4+0xa6>
 8000678:	428a      	cmp	r2, r1
 800067a:	4694      	mov	ip, r2
 800067c:	d965      	bls.n	800074a <__udivmoddi4+0xe2>
 800067e:	fab2 f382 	clz	r3, r2
 8000682:	b143      	cbz	r3, 8000696 <__udivmoddi4+0x2e>
 8000684:	fa02 fc03 	lsl.w	ip, r2, r3
 8000688:	f1c3 0220 	rsb	r2, r3, #32
 800068c:	409f      	lsls	r7, r3
 800068e:	fa20 f202 	lsr.w	r2, r0, r2
 8000692:	4317      	orrs	r7, r2
 8000694:	409c      	lsls	r4, r3
 8000696:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800069a:	fa1f f58c 	uxth.w	r5, ip
 800069e:	fbb7 f1fe 	udiv	r1, r7, lr
 80006a2:	0c22      	lsrs	r2, r4, #16
 80006a4:	fb0e 7711 	mls	r7, lr, r1, r7
 80006a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80006ac:	fb01 f005 	mul.w	r0, r1, r5
 80006b0:	4290      	cmp	r0, r2
 80006b2:	d90a      	bls.n	80006ca <__udivmoddi4+0x62>
 80006b4:	eb1c 0202 	adds.w	r2, ip, r2
 80006b8:	f101 37ff 	add.w	r7, r1, #4294967295
 80006bc:	f080 811c 	bcs.w	80008f8 <__udivmoddi4+0x290>
 80006c0:	4290      	cmp	r0, r2
 80006c2:	f240 8119 	bls.w	80008f8 <__udivmoddi4+0x290>
 80006c6:	3902      	subs	r1, #2
 80006c8:	4462      	add	r2, ip
 80006ca:	1a12      	subs	r2, r2, r0
 80006cc:	b2a4      	uxth	r4, r4
 80006ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80006d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80006d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80006da:	fb00 f505 	mul.w	r5, r0, r5
 80006de:	42a5      	cmp	r5, r4
 80006e0:	d90a      	bls.n	80006f8 <__udivmoddi4+0x90>
 80006e2:	eb1c 0404 	adds.w	r4, ip, r4
 80006e6:	f100 32ff 	add.w	r2, r0, #4294967295
 80006ea:	f080 8107 	bcs.w	80008fc <__udivmoddi4+0x294>
 80006ee:	42a5      	cmp	r5, r4
 80006f0:	f240 8104 	bls.w	80008fc <__udivmoddi4+0x294>
 80006f4:	4464      	add	r4, ip
 80006f6:	3802      	subs	r0, #2
 80006f8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80006fc:	1b64      	subs	r4, r4, r5
 80006fe:	2100      	movs	r1, #0
 8000700:	b11e      	cbz	r6, 800070a <__udivmoddi4+0xa2>
 8000702:	40dc      	lsrs	r4, r3
 8000704:	2300      	movs	r3, #0
 8000706:	e9c6 4300 	strd	r4, r3, [r6]
 800070a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800070e:	428b      	cmp	r3, r1
 8000710:	d908      	bls.n	8000724 <__udivmoddi4+0xbc>
 8000712:	2e00      	cmp	r6, #0
 8000714:	f000 80ed 	beq.w	80008f2 <__udivmoddi4+0x28a>
 8000718:	2100      	movs	r1, #0
 800071a:	e9c6 0500 	strd	r0, r5, [r6]
 800071e:	4608      	mov	r0, r1
 8000720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000724:	fab3 f183 	clz	r1, r3
 8000728:	2900      	cmp	r1, #0
 800072a:	d149      	bne.n	80007c0 <__udivmoddi4+0x158>
 800072c:	42ab      	cmp	r3, r5
 800072e:	d302      	bcc.n	8000736 <__udivmoddi4+0xce>
 8000730:	4282      	cmp	r2, r0
 8000732:	f200 80f8 	bhi.w	8000926 <__udivmoddi4+0x2be>
 8000736:	1a84      	subs	r4, r0, r2
 8000738:	eb65 0203 	sbc.w	r2, r5, r3
 800073c:	2001      	movs	r0, #1
 800073e:	4617      	mov	r7, r2
 8000740:	2e00      	cmp	r6, #0
 8000742:	d0e2      	beq.n	800070a <__udivmoddi4+0xa2>
 8000744:	e9c6 4700 	strd	r4, r7, [r6]
 8000748:	e7df      	b.n	800070a <__udivmoddi4+0xa2>
 800074a:	b902      	cbnz	r2, 800074e <__udivmoddi4+0xe6>
 800074c:	deff      	udf	#255	; 0xff
 800074e:	fab2 f382 	clz	r3, r2
 8000752:	2b00      	cmp	r3, #0
 8000754:	f040 8090 	bne.w	8000878 <__udivmoddi4+0x210>
 8000758:	1a8a      	subs	r2, r1, r2
 800075a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800075e:	fa1f fe8c 	uxth.w	lr, ip
 8000762:	2101      	movs	r1, #1
 8000764:	fbb2 f5f7 	udiv	r5, r2, r7
 8000768:	fb07 2015 	mls	r0, r7, r5, r2
 800076c:	0c22      	lsrs	r2, r4, #16
 800076e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000772:	fb0e f005 	mul.w	r0, lr, r5
 8000776:	4290      	cmp	r0, r2
 8000778:	d908      	bls.n	800078c <__udivmoddi4+0x124>
 800077a:	eb1c 0202 	adds.w	r2, ip, r2
 800077e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000782:	d202      	bcs.n	800078a <__udivmoddi4+0x122>
 8000784:	4290      	cmp	r0, r2
 8000786:	f200 80cb 	bhi.w	8000920 <__udivmoddi4+0x2b8>
 800078a:	4645      	mov	r5, r8
 800078c:	1a12      	subs	r2, r2, r0
 800078e:	b2a4      	uxth	r4, r4
 8000790:	fbb2 f0f7 	udiv	r0, r2, r7
 8000794:	fb07 2210 	mls	r2, r7, r0, r2
 8000798:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800079c:	fb0e fe00 	mul.w	lr, lr, r0
 80007a0:	45a6      	cmp	lr, r4
 80007a2:	d908      	bls.n	80007b6 <__udivmoddi4+0x14e>
 80007a4:	eb1c 0404 	adds.w	r4, ip, r4
 80007a8:	f100 32ff 	add.w	r2, r0, #4294967295
 80007ac:	d202      	bcs.n	80007b4 <__udivmoddi4+0x14c>
 80007ae:	45a6      	cmp	lr, r4
 80007b0:	f200 80bb 	bhi.w	800092a <__udivmoddi4+0x2c2>
 80007b4:	4610      	mov	r0, r2
 80007b6:	eba4 040e 	sub.w	r4, r4, lr
 80007ba:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80007be:	e79f      	b.n	8000700 <__udivmoddi4+0x98>
 80007c0:	f1c1 0720 	rsb	r7, r1, #32
 80007c4:	408b      	lsls	r3, r1
 80007c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80007ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80007ce:	fa05 f401 	lsl.w	r4, r5, r1
 80007d2:	fa20 f307 	lsr.w	r3, r0, r7
 80007d6:	40fd      	lsrs	r5, r7
 80007d8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80007dc:	4323      	orrs	r3, r4
 80007de:	fbb5 f8f9 	udiv	r8, r5, r9
 80007e2:	fa1f fe8c 	uxth.w	lr, ip
 80007e6:	fb09 5518 	mls	r5, r9, r8, r5
 80007ea:	0c1c      	lsrs	r4, r3, #16
 80007ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80007f0:	fb08 f50e 	mul.w	r5, r8, lr
 80007f4:	42a5      	cmp	r5, r4
 80007f6:	fa02 f201 	lsl.w	r2, r2, r1
 80007fa:	fa00 f001 	lsl.w	r0, r0, r1
 80007fe:	d90b      	bls.n	8000818 <__udivmoddi4+0x1b0>
 8000800:	eb1c 0404 	adds.w	r4, ip, r4
 8000804:	f108 3aff 	add.w	sl, r8, #4294967295
 8000808:	f080 8088 	bcs.w	800091c <__udivmoddi4+0x2b4>
 800080c:	42a5      	cmp	r5, r4
 800080e:	f240 8085 	bls.w	800091c <__udivmoddi4+0x2b4>
 8000812:	f1a8 0802 	sub.w	r8, r8, #2
 8000816:	4464      	add	r4, ip
 8000818:	1b64      	subs	r4, r4, r5
 800081a:	b29d      	uxth	r5, r3
 800081c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000820:	fb09 4413 	mls	r4, r9, r3, r4
 8000824:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000828:	fb03 fe0e 	mul.w	lr, r3, lr
 800082c:	45a6      	cmp	lr, r4
 800082e:	d908      	bls.n	8000842 <__udivmoddi4+0x1da>
 8000830:	eb1c 0404 	adds.w	r4, ip, r4
 8000834:	f103 35ff 	add.w	r5, r3, #4294967295
 8000838:	d26c      	bcs.n	8000914 <__udivmoddi4+0x2ac>
 800083a:	45a6      	cmp	lr, r4
 800083c:	d96a      	bls.n	8000914 <__udivmoddi4+0x2ac>
 800083e:	3b02      	subs	r3, #2
 8000840:	4464      	add	r4, ip
 8000842:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000846:	fba3 9502 	umull	r9, r5, r3, r2
 800084a:	eba4 040e 	sub.w	r4, r4, lr
 800084e:	42ac      	cmp	r4, r5
 8000850:	46c8      	mov	r8, r9
 8000852:	46ae      	mov	lr, r5
 8000854:	d356      	bcc.n	8000904 <__udivmoddi4+0x29c>
 8000856:	d053      	beq.n	8000900 <__udivmoddi4+0x298>
 8000858:	b156      	cbz	r6, 8000870 <__udivmoddi4+0x208>
 800085a:	ebb0 0208 	subs.w	r2, r0, r8
 800085e:	eb64 040e 	sbc.w	r4, r4, lr
 8000862:	fa04 f707 	lsl.w	r7, r4, r7
 8000866:	40ca      	lsrs	r2, r1
 8000868:	40cc      	lsrs	r4, r1
 800086a:	4317      	orrs	r7, r2
 800086c:	e9c6 7400 	strd	r7, r4, [r6]
 8000870:	4618      	mov	r0, r3
 8000872:	2100      	movs	r1, #0
 8000874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000878:	f1c3 0120 	rsb	r1, r3, #32
 800087c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000880:	fa20 f201 	lsr.w	r2, r0, r1
 8000884:	fa25 f101 	lsr.w	r1, r5, r1
 8000888:	409d      	lsls	r5, r3
 800088a:	432a      	orrs	r2, r5
 800088c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000890:	fa1f fe8c 	uxth.w	lr, ip
 8000894:	fbb1 f0f7 	udiv	r0, r1, r7
 8000898:	fb07 1510 	mls	r5, r7, r0, r1
 800089c:	0c11      	lsrs	r1, r2, #16
 800089e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80008a2:	fb00 f50e 	mul.w	r5, r0, lr
 80008a6:	428d      	cmp	r5, r1
 80008a8:	fa04 f403 	lsl.w	r4, r4, r3
 80008ac:	d908      	bls.n	80008c0 <__udivmoddi4+0x258>
 80008ae:	eb1c 0101 	adds.w	r1, ip, r1
 80008b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80008b6:	d22f      	bcs.n	8000918 <__udivmoddi4+0x2b0>
 80008b8:	428d      	cmp	r5, r1
 80008ba:	d92d      	bls.n	8000918 <__udivmoddi4+0x2b0>
 80008bc:	3802      	subs	r0, #2
 80008be:	4461      	add	r1, ip
 80008c0:	1b49      	subs	r1, r1, r5
 80008c2:	b292      	uxth	r2, r2
 80008c4:	fbb1 f5f7 	udiv	r5, r1, r7
 80008c8:	fb07 1115 	mls	r1, r7, r5, r1
 80008cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80008d0:	fb05 f10e 	mul.w	r1, r5, lr
 80008d4:	4291      	cmp	r1, r2
 80008d6:	d908      	bls.n	80008ea <__udivmoddi4+0x282>
 80008d8:	eb1c 0202 	adds.w	r2, ip, r2
 80008dc:	f105 38ff 	add.w	r8, r5, #4294967295
 80008e0:	d216      	bcs.n	8000910 <__udivmoddi4+0x2a8>
 80008e2:	4291      	cmp	r1, r2
 80008e4:	d914      	bls.n	8000910 <__udivmoddi4+0x2a8>
 80008e6:	3d02      	subs	r5, #2
 80008e8:	4462      	add	r2, ip
 80008ea:	1a52      	subs	r2, r2, r1
 80008ec:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80008f0:	e738      	b.n	8000764 <__udivmoddi4+0xfc>
 80008f2:	4631      	mov	r1, r6
 80008f4:	4630      	mov	r0, r6
 80008f6:	e708      	b.n	800070a <__udivmoddi4+0xa2>
 80008f8:	4639      	mov	r1, r7
 80008fa:	e6e6      	b.n	80006ca <__udivmoddi4+0x62>
 80008fc:	4610      	mov	r0, r2
 80008fe:	e6fb      	b.n	80006f8 <__udivmoddi4+0x90>
 8000900:	4548      	cmp	r0, r9
 8000902:	d2a9      	bcs.n	8000858 <__udivmoddi4+0x1f0>
 8000904:	ebb9 0802 	subs.w	r8, r9, r2
 8000908:	eb65 0e0c 	sbc.w	lr, r5, ip
 800090c:	3b01      	subs	r3, #1
 800090e:	e7a3      	b.n	8000858 <__udivmoddi4+0x1f0>
 8000910:	4645      	mov	r5, r8
 8000912:	e7ea      	b.n	80008ea <__udivmoddi4+0x282>
 8000914:	462b      	mov	r3, r5
 8000916:	e794      	b.n	8000842 <__udivmoddi4+0x1da>
 8000918:	4640      	mov	r0, r8
 800091a:	e7d1      	b.n	80008c0 <__udivmoddi4+0x258>
 800091c:	46d0      	mov	r8, sl
 800091e:	e77b      	b.n	8000818 <__udivmoddi4+0x1b0>
 8000920:	3d02      	subs	r5, #2
 8000922:	4462      	add	r2, ip
 8000924:	e732      	b.n	800078c <__udivmoddi4+0x124>
 8000926:	4608      	mov	r0, r1
 8000928:	e70a      	b.n	8000740 <__udivmoddi4+0xd8>
 800092a:	4464      	add	r4, ip
 800092c:	3802      	subs	r0, #2
 800092e:	e742      	b.n	80007b6 <__udivmoddi4+0x14e>

08000930 <__aeabi_idiv0>:
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop

08000934 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000934:	b5b0      	push	{r4, r5, r7, lr}
 8000936:	b08a      	sub	sp, #40	; 0x28
 8000938:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800093a:	f001 f9e5 	bl	8001d08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800093e:	f000 f89b 	bl	8000a78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000942:	f000 fa63 	bl	8000e0c <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000946:	f000 f8f9 	bl	8000b3c <MX_DFSDM1_Init>
  MX_I2C2_Init();
 800094a:	f000 f92f 	bl	8000bac <MX_I2C2_Init>
  MX_QUADSPI_Init();
 800094e:	f000 f96b 	bl	8000c28 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8000952:	f000 f98f 	bl	8000c74 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000956:	f000 f9cb 	bl	8000cf0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800095a:	f000 f9f9 	bl	8000d50 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800095e:	f000 fa27 	bl	8000db0 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Transmit(&huart1,msg1,sizeof(msg1),1000);
 8000962:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000966:	2230      	movs	r2, #48	; 0x30
 8000968:	4939      	ldr	r1, [pc, #228]	; (8000a50 <main+0x11c>)
 800096a:	483a      	ldr	r0, [pc, #232]	; (8000a54 <main+0x120>)
 800096c:	f004 fc03 	bl	8005176 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,msg2,sizeof(msg2),1000);
 8000970:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000974:	222f      	movs	r2, #47	; 0x2f
 8000976:	4938      	ldr	r1, [pc, #224]	; (8000a58 <main+0x124>)
 8000978:	4836      	ldr	r0, [pc, #216]	; (8000a54 <main+0x120>)
 800097a:	f004 fbfc 	bl	8005176 <HAL_UART_Transmit>
  BSP_TSENSOR_Init();
 800097e:	f001 f8e5 	bl	8001b4c <BSP_TSENSOR_Init>
  HAL_UART_Transmit(&huart1,msg3,sizeof(msg3),1000);
 8000982:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000986:	2231      	movs	r2, #49	; 0x31
 8000988:	4934      	ldr	r1, [pc, #208]	; (8000a5c <main+0x128>)
 800098a:	4832      	ldr	r0, [pc, #200]	; (8000a54 <main+0x120>)
 800098c:	f004 fbf3 	bl	8005176 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  uint8_t Test[] = "Hello World !!!\r\n"; //Data to send
 8000990:	4b33      	ldr	r3, [pc, #204]	; (8000a60 <main+0x12c>)
 8000992:	463c      	mov	r4, r7
 8000994:	461d      	mov	r5, r3
 8000996:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000998:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800099a:	682b      	ldr	r3, [r5, #0]
 800099c:	8023      	strh	r3, [r4, #0]
  HAL_UART_Transmit(&huart1,Test,sizeof(Test),10);// Sending in normal mode
 800099e:	4639      	mov	r1, r7
 80009a0:	230a      	movs	r3, #10
 80009a2:	2212      	movs	r2, #18
 80009a4:	482b      	ldr	r0, [pc, #172]	; (8000a54 <main+0x120>)
 80009a6:	f004 fbe6 	bl	8005176 <HAL_UART_Transmit>
  HAL_Delay(1000);
 80009aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80009ae:	f001 fa1f 	bl	8001df0 <HAL_Delay>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_14);
 80009b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009b6:	482b      	ldr	r0, [pc, #172]	; (8000a64 <main+0x130>)
 80009b8:	f001 ff12 	bl	80027e0 <HAL_GPIO_TogglePin>
	  HAL_Delay (100);
 80009bc:	2064      	movs	r0, #100	; 0x64
 80009be:	f001 fa17 	bl	8001df0 <HAL_Delay>

	  temp_value = BSP_TSENSOR_ReadTemp();
 80009c2:	f001 f8df 	bl	8001b84 <BSP_TSENSOR_ReadTemp>
 80009c6:	eef0 7a40 	vmov.f32	s15, s0
 80009ca:	4b27      	ldr	r3, [pc, #156]	; (8000a68 <main+0x134>)
 80009cc:	edc3 7a00 	vstr	s15, [r3]
	  int tmpInt1 = temp_value;
 80009d0:	4b25      	ldr	r3, [pc, #148]	; (8000a68 <main+0x134>)
 80009d2:	edd3 7a00 	vldr	s15, [r3]
 80009d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009da:	ee17 3a90 	vmov	r3, s15
 80009de:	61fb      	str	r3, [r7, #28]
	  float tmpFrac = temp_value - tmpInt1;
 80009e0:	4b21      	ldr	r3, [pc, #132]	; (8000a68 <main+0x134>)
 80009e2:	ed93 7a00 	vldr	s14, [r3]
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	ee07 3a90 	vmov	s15, r3
 80009ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80009f4:	edc7 7a06 	vstr	s15, [r7, #24]
	  int tmpInt2 = trunc(tmpFrac * 100);
 80009f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80009fc:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000a6c <main+0x138>
 8000a00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a04:	ee17 0a90 	vmov	r0, s15
 8000a08:	f7ff fd96 	bl	8000538 <__aeabi_f2d>
 8000a0c:	4602      	mov	r2, r0
 8000a0e:	460b      	mov	r3, r1
 8000a10:	ec43 2b10 	vmov	d0, r2, r3
 8000a14:	f006 f86a 	bl	8006aec <trunc>
 8000a18:	ec53 2b10 	vmov	r2, r3, d0
 8000a1c:	4610      	mov	r0, r2
 8000a1e:	4619      	mov	r1, r3
 8000a20:	f7ff fde2 	bl	80005e8 <__aeabi_d2iz>
 8000a24:	4603      	mov	r3, r0
 8000a26:	617b      	str	r3, [r7, #20]
	  snprintf(str_tmp,100," TEMPERATURE = %d.%02d\n\r", tmpInt1, tmpInt2);
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	9300      	str	r3, [sp, #0]
 8000a2c:	69fb      	ldr	r3, [r7, #28]
 8000a2e:	4a10      	ldr	r2, [pc, #64]	; (8000a70 <main+0x13c>)
 8000a30:	2164      	movs	r1, #100	; 0x64
 8000a32:	4810      	ldr	r0, [pc, #64]	; (8000a74 <main+0x140>)
 8000a34:	f005 fba2 	bl	800617c <sniprintf>
	  HAL_UART_Transmit(&huart1,( uint8_t *)str_tmp,sizeof(str_tmp),1000);
 8000a38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a3c:	2264      	movs	r2, #100	; 0x64
 8000a3e:	490d      	ldr	r1, [pc, #52]	; (8000a74 <main+0x140>)
 8000a40:	4804      	ldr	r0, [pc, #16]	; (8000a54 <main+0x120>)
 8000a42:	f004 fb98 	bl	8005176 <HAL_UART_Transmit>
	  HAL_Delay(400);
 8000a46:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000a4a:	f001 f9d1 	bl	8001df0 <HAL_Delay>
  {
 8000a4e:	e7b0      	b.n	80009b2 <main+0x7e>
 8000a50:	20000000 	.word	0x20000000
 8000a54:	20000250 	.word	0x20000250
 8000a58:	20000030 	.word	0x20000030
 8000a5c:	20000060 	.word	0x20000060
 8000a60:	08006b94 	.word	0x08006b94
 8000a64:	48000400 	.word	0x48000400
 8000a68:	2000086c 	.word	0x2000086c
 8000a6c:	42c80000 	.word	0x42c80000
 8000a70:	08006b78 	.word	0x08006b78
 8000a74:	20000870 	.word	0x20000870

08000a78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	b096      	sub	sp, #88	; 0x58
 8000a7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	2244      	movs	r2, #68	; 0x44
 8000a84:	2100      	movs	r1, #0
 8000a86:	4618      	mov	r0, r3
 8000a88:	f005 fbac 	bl	80061e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a8c:	463b      	mov	r3, r7
 8000a8e:	2200      	movs	r2, #0
 8000a90:	601a      	str	r2, [r3, #0]
 8000a92:	605a      	str	r2, [r3, #4]
 8000a94:	609a      	str	r2, [r3, #8]
 8000a96:	60da      	str	r2, [r3, #12]
 8000a98:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a9a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a9e:	f002 fe8b 	bl	80037b8 <HAL_PWREx_ControlVoltageScaling>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000aa8:	f000 fb62 	bl	8001170 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000aac:	f002 fe66 	bl	800377c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000ab0:	4b21      	ldr	r3, [pc, #132]	; (8000b38 <SystemClock_Config+0xc0>)
 8000ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ab6:	4a20      	ldr	r2, [pc, #128]	; (8000b38 <SystemClock_Config+0xc0>)
 8000ab8:	f023 0318 	bic.w	r3, r3, #24
 8000abc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000ac0:	2314      	movs	r3, #20
 8000ac2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000ad0:	2360      	movs	r3, #96	; 0x60
 8000ad2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000adc:	2301      	movs	r3, #1
 8000ade:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000ae0:	2328      	movs	r3, #40	; 0x28
 8000ae2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ae4:	2307      	movs	r3, #7
 8000ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000aec:	2302      	movs	r3, #2
 8000aee:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	4618      	mov	r0, r3
 8000af6:	f002 ff81 	bl	80039fc <HAL_RCC_OscConfig>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000b00:	f000 fb36 	bl	8001170 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b04:	230f      	movs	r3, #15
 8000b06:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b08:	2303      	movs	r3, #3
 8000b0a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b10:	2300      	movs	r3, #0
 8000b12:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b14:	2300      	movs	r3, #0
 8000b16:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b18:	463b      	mov	r3, r7
 8000b1a:	2104      	movs	r1, #4
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f003 fb49 	bl	80041b4 <HAL_RCC_ClockConfig>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000b28:	f000 fb22 	bl	8001170 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000b2c:	f004 f850 	bl	8004bd0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000b30:	bf00      	nop
 8000b32:	3758      	adds	r7, #88	; 0x58
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40021000 	.word	0x40021000

08000b3c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000b40:	4b18      	ldr	r3, [pc, #96]	; (8000ba4 <MX_DFSDM1_Init+0x68>)
 8000b42:	4a19      	ldr	r2, [pc, #100]	; (8000ba8 <MX_DFSDM1_Init+0x6c>)
 8000b44:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8000b46:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <MX_DFSDM1_Init+0x68>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000b4c:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <MX_DFSDM1_Init+0x68>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8000b52:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <MX_DFSDM1_Init+0x68>)
 8000b54:	2202      	movs	r2, #2
 8000b56:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000b58:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <MX_DFSDM1_Init+0x68>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000b5e:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <MX_DFSDM1_Init+0x68>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000b64:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <MX_DFSDM1_Init+0x68>)
 8000b66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b6a:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000b6c:	4b0d      	ldr	r3, [pc, #52]	; (8000ba4 <MX_DFSDM1_Init+0x68>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000b72:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <MX_DFSDM1_Init+0x68>)
 8000b74:	2204      	movs	r2, #4
 8000b76:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000b78:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <MX_DFSDM1_Init+0x68>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000b7e:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <MX_DFSDM1_Init+0x68>)
 8000b80:	2201      	movs	r2, #1
 8000b82:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000b84:	4b07      	ldr	r3, [pc, #28]	; (8000ba4 <MX_DFSDM1_Init+0x68>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <MX_DFSDM1_Init+0x68>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000b90:	4804      	ldr	r0, [pc, #16]	; (8000ba4 <MX_DFSDM1_Init+0x68>)
 8000b92:	f001 fa63 	bl	800205c <HAL_DFSDM_ChannelInit>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000b9c:	f000 fae8 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	2000011c 	.word	0x2000011c
 8000ba8:	40016020 	.word	0x40016020

08000bac <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000bb0:	4b1b      	ldr	r3, [pc, #108]	; (8000c20 <MX_I2C2_Init+0x74>)
 8000bb2:	4a1c      	ldr	r2, [pc, #112]	; (8000c24 <MX_I2C2_Init+0x78>)
 8000bb4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000E14;
 8000bb6:	4b1a      	ldr	r3, [pc, #104]	; (8000c20 <MX_I2C2_Init+0x74>)
 8000bb8:	f640 6214 	movw	r2, #3604	; 0xe14
 8000bbc:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000bbe:	4b18      	ldr	r3, [pc, #96]	; (8000c20 <MX_I2C2_Init+0x74>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bc4:	4b16      	ldr	r3, [pc, #88]	; (8000c20 <MX_I2C2_Init+0x74>)
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000bca:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <MX_I2C2_Init+0x74>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000bd0:	4b13      	ldr	r3, [pc, #76]	; (8000c20 <MX_I2C2_Init+0x74>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bd6:	4b12      	ldr	r3, [pc, #72]	; (8000c20 <MX_I2C2_Init+0x74>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bdc:	4b10      	ldr	r3, [pc, #64]	; (8000c20 <MX_I2C2_Init+0x74>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000be2:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <MX_I2C2_Init+0x74>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000be8:	480d      	ldr	r0, [pc, #52]	; (8000c20 <MX_I2C2_Init+0x74>)
 8000bea:	f001 fe36 	bl	800285a <HAL_I2C_Init>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000bf4:	f000 fabc 	bl	8001170 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000bf8:	2100      	movs	r1, #0
 8000bfa:	4809      	ldr	r0, [pc, #36]	; (8000c20 <MX_I2C2_Init+0x74>)
 8000bfc:	f002 fbde 	bl	80033bc <HAL_I2CEx_ConfigAnalogFilter>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000c06:	f000 fab3 	bl	8001170 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4804      	ldr	r0, [pc, #16]	; (8000c20 <MX_I2C2_Init+0x74>)
 8000c0e:	f002 fc20 	bl	8003452 <HAL_I2CEx_ConfigDigitalFilter>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000c18:	f000 faaa 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20000154 	.word	0x20000154
 8000c24:	40005800 	.word	0x40005800

08000c28 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000c2c:	4b0f      	ldr	r3, [pc, #60]	; (8000c6c <MX_QUADSPI_Init+0x44>)
 8000c2e:	4a10      	ldr	r2, [pc, #64]	; (8000c70 <MX_QUADSPI_Init+0x48>)
 8000c30:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8000c32:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <MX_QUADSPI_Init+0x44>)
 8000c34:	2202      	movs	r2, #2
 8000c36:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <MX_QUADSPI_Init+0x44>)
 8000c3a:	2204      	movs	r2, #4
 8000c3c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <MX_QUADSPI_Init+0x44>)
 8000c40:	2210      	movs	r2, #16
 8000c42:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000c44:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <MX_QUADSPI_Init+0x44>)
 8000c46:	2217      	movs	r2, #23
 8000c48:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000c4a:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <MX_QUADSPI_Init+0x44>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <MX_QUADSPI_Init+0x44>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000c56:	4805      	ldr	r0, [pc, #20]	; (8000c6c <MX_QUADSPI_Init+0x44>)
 8000c58:	f002 fe14 	bl	8003884 <HAL_QSPI_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000c62:	f000 fa85 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	200001a8 	.word	0x200001a8
 8000c70:	a0001000 	.word	0xa0001000

08000c74 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000c78:	4b1b      	ldr	r3, [pc, #108]	; (8000ce8 <MX_SPI3_Init+0x74>)
 8000c7a:	4a1c      	ldr	r2, [pc, #112]	; (8000cec <MX_SPI3_Init+0x78>)
 8000c7c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000c7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ce8 <MX_SPI3_Init+0x74>)
 8000c80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c84:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000c86:	4b18      	ldr	r3, [pc, #96]	; (8000ce8 <MX_SPI3_Init+0x74>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000c8c:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <MX_SPI3_Init+0x74>)
 8000c8e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000c92:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c94:	4b14      	ldr	r3, [pc, #80]	; (8000ce8 <MX_SPI3_Init+0x74>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c9a:	4b13      	ldr	r3, [pc, #76]	; (8000ce8 <MX_SPI3_Init+0x74>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000ca0:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <MX_SPI3_Init+0x74>)
 8000ca2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ca6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ca8:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <MX_SPI3_Init+0x74>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cae:	4b0e      	ldr	r3, [pc, #56]	; (8000ce8 <MX_SPI3_Init+0x74>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	; (8000ce8 <MX_SPI3_Init+0x74>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cba:	4b0b      	ldr	r3, [pc, #44]	; (8000ce8 <MX_SPI3_Init+0x74>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000cc0:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <MX_SPI3_Init+0x74>)
 8000cc2:	2207      	movs	r2, #7
 8000cc4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cc6:	4b08      	ldr	r3, [pc, #32]	; (8000ce8 <MX_SPI3_Init+0x74>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ccc:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <MX_SPI3_Init+0x74>)
 8000cce:	2208      	movs	r2, #8
 8000cd0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000cd2:	4805      	ldr	r0, [pc, #20]	; (8000ce8 <MX_SPI3_Init+0x74>)
 8000cd4:	f004 f95e 	bl	8004f94 <HAL_SPI_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000cde:	f000 fa47 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	200001ec 	.word	0x200001ec
 8000cec:	40003c00 	.word	0x40003c00

08000cf0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cf4:	4b14      	ldr	r3, [pc, #80]	; (8000d48 <MX_USART1_UART_Init+0x58>)
 8000cf6:	4a15      	ldr	r2, [pc, #84]	; (8000d4c <MX_USART1_UART_Init+0x5c>)
 8000cf8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cfa:	4b13      	ldr	r3, [pc, #76]	; (8000d48 <MX_USART1_UART_Init+0x58>)
 8000cfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d02:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <MX_USART1_UART_Init+0x58>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d08:	4b0f      	ldr	r3, [pc, #60]	; (8000d48 <MX_USART1_UART_Init+0x58>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <MX_USART1_UART_Init+0x58>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d14:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <MX_USART1_UART_Init+0x58>)
 8000d16:	220c      	movs	r2, #12
 8000d18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <MX_USART1_UART_Init+0x58>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d20:	4b09      	ldr	r3, [pc, #36]	; (8000d48 <MX_USART1_UART_Init+0x58>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d26:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <MX_USART1_UART_Init+0x58>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d2c:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <MX_USART1_UART_Init+0x58>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d32:	4805      	ldr	r0, [pc, #20]	; (8000d48 <MX_USART1_UART_Init+0x58>)
 8000d34:	f004 f9d1 	bl	80050da <HAL_UART_Init>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000d3e:	f000 fa17 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20000250 	.word	0x20000250
 8000d4c:	40013800 	.word	0x40013800

08000d50 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d54:	4b14      	ldr	r3, [pc, #80]	; (8000da8 <MX_USART3_UART_Init+0x58>)
 8000d56:	4a15      	ldr	r2, [pc, #84]	; (8000dac <MX_USART3_UART_Init+0x5c>)
 8000d58:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d5a:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <MX_USART3_UART_Init+0x58>)
 8000d5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d60:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d62:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <MX_USART3_UART_Init+0x58>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d68:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <MX_USART3_UART_Init+0x58>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	; (8000da8 <MX_USART3_UART_Init+0x58>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d74:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <MX_USART3_UART_Init+0x58>)
 8000d76:	220c      	movs	r2, #12
 8000d78:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d7a:	4b0b      	ldr	r3, [pc, #44]	; (8000da8 <MX_USART3_UART_Init+0x58>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d80:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <MX_USART3_UART_Init+0x58>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d86:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <MX_USART3_UART_Init+0x58>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <MX_USART3_UART_Init+0x58>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d92:	4805      	ldr	r0, [pc, #20]	; (8000da8 <MX_USART3_UART_Init+0x58>)
 8000d94:	f004 f9a1 	bl	80050da <HAL_UART_Init>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d001      	beq.n	8000da2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000d9e:	f000 f9e7 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	200002d8 	.word	0x200002d8
 8000dac:	40004800 	.word	0x40004800

08000db0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000db4:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000db6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000dba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000dbc:	4b12      	ldr	r3, [pc, #72]	; (8000e08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dbe:	2206      	movs	r2, #6
 8000dc0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000dc2:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dc4:	2202      	movs	r2, #2
 8000dc6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000dc8:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dca:	2202      	movs	r2, #2
 8000dcc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000dce:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000dd4:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000dda:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000de0:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000de6:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000dec:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000df2:	4805      	ldr	r0, [pc, #20]	; (8000e08 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000df4:	f002 fb79 	bl	80034ea <HAL_PCD_Init>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000dfe:	f000 f9b7 	bl	8001170 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000e02:	bf00      	nop
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000360 	.word	0x20000360

08000e0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b08a      	sub	sp, #40	; 0x28
 8000e10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]
 8000e1c:	609a      	str	r2, [r3, #8]
 8000e1e:	60da      	str	r2, [r3, #12]
 8000e20:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e22:	4bbd      	ldr	r3, [pc, #756]	; (8001118 <MX_GPIO_Init+0x30c>)
 8000e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e26:	4abc      	ldr	r2, [pc, #752]	; (8001118 <MX_GPIO_Init+0x30c>)
 8000e28:	f043 0310 	orr.w	r3, r3, #16
 8000e2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e2e:	4bba      	ldr	r3, [pc, #744]	; (8001118 <MX_GPIO_Init+0x30c>)
 8000e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e32:	f003 0310 	and.w	r3, r3, #16
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e3a:	4bb7      	ldr	r3, [pc, #732]	; (8001118 <MX_GPIO_Init+0x30c>)
 8000e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3e:	4ab6      	ldr	r2, [pc, #728]	; (8001118 <MX_GPIO_Init+0x30c>)
 8000e40:	f043 0304 	orr.w	r3, r3, #4
 8000e44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e46:	4bb4      	ldr	r3, [pc, #720]	; (8001118 <MX_GPIO_Init+0x30c>)
 8000e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4a:	f003 0304 	and.w	r3, r3, #4
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e52:	4bb1      	ldr	r3, [pc, #708]	; (8001118 <MX_GPIO_Init+0x30c>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e56:	4ab0      	ldr	r2, [pc, #704]	; (8001118 <MX_GPIO_Init+0x30c>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e5e:	4bae      	ldr	r3, [pc, #696]	; (8001118 <MX_GPIO_Init+0x30c>)
 8000e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6a:	4bab      	ldr	r3, [pc, #684]	; (8001118 <MX_GPIO_Init+0x30c>)
 8000e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6e:	4aaa      	ldr	r2, [pc, #680]	; (8001118 <MX_GPIO_Init+0x30c>)
 8000e70:	f043 0302 	orr.w	r3, r3, #2
 8000e74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e76:	4ba8      	ldr	r3, [pc, #672]	; (8001118 <MX_GPIO_Init+0x30c>)
 8000e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7a:	f003 0302 	and.w	r3, r3, #2
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e82:	4ba5      	ldr	r3, [pc, #660]	; (8001118 <MX_GPIO_Init+0x30c>)
 8000e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e86:	4aa4      	ldr	r2, [pc, #656]	; (8001118 <MX_GPIO_Init+0x30c>)
 8000e88:	f043 0308 	orr.w	r3, r3, #8
 8000e8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e8e:	4ba2      	ldr	r3, [pc, #648]	; (8001118 <MX_GPIO_Init+0x30c>)
 8000e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e92:	f003 0308 	and.w	r3, r3, #8
 8000e96:	603b      	str	r3, [r7, #0]
 8000e98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000ea0:	489e      	ldr	r0, [pc, #632]	; (800111c <MX_GPIO_Init+0x310>)
 8000ea2:	f001 fc85 	bl	80027b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	f248 1104 	movw	r1, #33028	; 0x8104
 8000eac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb0:	f001 fc7e 	bl	80027b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000eba:	4899      	ldr	r0, [pc, #612]	; (8001120 <MX_GPIO_Init+0x314>)
 8000ebc:	f001 fc78 	bl	80027b0 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	f241 0181 	movw	r1, #4225	; 0x1081
 8000ec6:	4897      	ldr	r0, [pc, #604]	; (8001124 <MX_GPIO_Init+0x318>)
 8000ec8:	f001 fc72 	bl	80027b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000ecc:	2201      	movs	r2, #1
 8000ece:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ed2:	4894      	ldr	r0, [pc, #592]	; (8001124 <MX_GPIO_Init+0x318>)
 8000ed4:	f001 fc6c 	bl	80027b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000ede:	4892      	ldr	r0, [pc, #584]	; (8001128 <MX_GPIO_Init+0x31c>)
 8000ee0:	f001 fc66 	bl	80027b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	2120      	movs	r1, #32
 8000ee8:	488d      	ldr	r0, [pc, #564]	; (8001120 <MX_GPIO_Init+0x314>)
 8000eea:	f001 fc61 	bl	80027b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000eee:	2201      	movs	r2, #1
 8000ef0:	2101      	movs	r1, #1
 8000ef2:	488a      	ldr	r0, [pc, #552]	; (800111c <MX_GPIO_Init+0x310>)
 8000ef4:	f001 fc5c 	bl	80027b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000ef8:	f240 1315 	movw	r3, #277	; 0x115
 8000efc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000efe:	2301      	movs	r3, #1
 8000f00:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f06:	2300      	movs	r3, #0
 8000f08:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f0a:	f107 0314 	add.w	r3, r7, #20
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4882      	ldr	r0, [pc, #520]	; (800111c <MX_GPIO_Init+0x310>)
 8000f12:	f001 f9af 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000f16:	236a      	movs	r3, #106	; 0x6a
 8000f18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f1a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	4619      	mov	r1, r3
 8000f2a:	487c      	ldr	r0, [pc, #496]	; (800111c <MX_GPIO_Init+0x310>)
 8000f2c:	f001 f9a2 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000f30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f36:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	4619      	mov	r1, r3
 8000f46:	4878      	ldr	r0, [pc, #480]	; (8001128 <MX_GPIO_Init+0x31c>)
 8000f48:	f001 f994 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000f4c:	233f      	movs	r3, #63	; 0x3f
 8000f4e:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000f50:	230b      	movs	r3, #11
 8000f52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4872      	ldr	r0, [pc, #456]	; (8001128 <MX_GPIO_Init+0x31c>)
 8000f60:	f001 f988 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000f64:	2303      	movs	r3, #3
 8000f66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f68:	2302      	movs	r3, #2
 8000f6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f70:	2303      	movs	r3, #3
 8000f72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000f74:	2308      	movs	r3, #8
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f82:	f001 f977 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000f86:	f248 1304 	movw	r3, #33028	; 0x8104
 8000f8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f94:	2300      	movs	r3, #0
 8000f96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa2:	f001 f967 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000fa6:	2308      	movs	r3, #8
 8000fa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000faa:	2302      	movs	r3, #2
 8000fac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000fba:	f107 0314 	add.w	r3, r7, #20
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc4:	f001 f956 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000fc8:	2310      	movs	r3, #16
 8000fca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000fcc:	230b      	movs	r3, #11
 8000fce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	4619      	mov	r1, r3
 8000fda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fde:	f001 f949 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000fe2:	23e0      	movs	r3, #224	; 0xe0
 8000fe4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe6:	2302      	movs	r3, #2
 8000fe8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fea:	2300      	movs	r3, #0
 8000fec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ff2:	2305      	movs	r3, #5
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff6:	f107 0314 	add.w	r3, r7, #20
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001000:	f001 f938 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8001004:	2301      	movs	r3, #1
 8001006:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001008:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800100c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100e:	2300      	movs	r3, #0
 8001010:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	4619      	mov	r1, r3
 8001018:	4841      	ldr	r0, [pc, #260]	; (8001120 <MX_GPIO_Init+0x314>)
 800101a:	f001 f92b 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800101e:	2302      	movs	r3, #2
 8001020:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001022:	230b      	movs	r3, #11
 8001024:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 800102a:	f107 0314 	add.w	r3, r7, #20
 800102e:	4619      	mov	r1, r3
 8001030:	483b      	ldr	r0, [pc, #236]	; (8001120 <MX_GPIO_Init+0x314>)
 8001032:	f001 f91f 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8001036:	f24f 0334 	movw	r3, #61492	; 0xf034
 800103a:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103c:	2301      	movs	r3, #1
 800103e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001044:	2300      	movs	r3, #0
 8001046:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	4619      	mov	r1, r3
 800104e:	4834      	ldr	r0, [pc, #208]	; (8001120 <MX_GPIO_Init+0x314>)
 8001050:	f001 f910 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8001054:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8001058:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800105a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800105e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	4619      	mov	r1, r3
 800106a:	482e      	ldr	r0, [pc, #184]	; (8001124 <MX_GPIO_Init+0x318>)
 800106c:	f001 f902 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8001070:	f243 0381 	movw	r3, #12417	; 0x3081
 8001074:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001076:	2301      	movs	r3, #1
 8001078:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107e:	2300      	movs	r3, #0
 8001080:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001082:	f107 0314 	add.w	r3, r7, #20
 8001086:	4619      	mov	r1, r3
 8001088:	4826      	ldr	r0, [pc, #152]	; (8001124 <MX_GPIO_Init+0x318>)
 800108a:	f001 f8f3 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 800108e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001092:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001094:	2301      	movs	r3, #1
 8001096:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109c:	2300      	movs	r3, #0
 800109e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	4619      	mov	r1, r3
 80010a6:	4820      	ldr	r0, [pc, #128]	; (8001128 <MX_GPIO_Init+0x31c>)
 80010a8:	f001 f8e4 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 80010ac:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80010b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	4619      	mov	r1, r3
 80010c2:	4819      	ldr	r0, [pc, #100]	; (8001128 <MX_GPIO_Init+0x31c>)
 80010c4:	f001 f8d6 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 80010c8:	2302      	movs	r3, #2
 80010ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010cc:	2302      	movs	r3, #2
 80010ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d4:	2303      	movs	r3, #3
 80010d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010d8:	2305      	movs	r3, #5
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	4619      	mov	r1, r3
 80010e2:	4810      	ldr	r0, [pc, #64]	; (8001124 <MX_GPIO_Init+0x318>)
 80010e4:	f001 f8c6 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 80010e8:	2378      	movs	r3, #120	; 0x78
 80010ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	2302      	movs	r3, #2
 80010ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f4:	2303      	movs	r3, #3
 80010f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010f8:	2307      	movs	r3, #7
 80010fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	4619      	mov	r1, r3
 8001102:	4808      	ldr	r0, [pc, #32]	; (8001124 <MX_GPIO_Init+0x318>)
 8001104:	f001 f8b6 	bl	8002274 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8001108:	f44f 7340 	mov.w	r3, #768	; 0x300
 800110c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800110e:	2312      	movs	r3, #18
 8001110:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	e00a      	b.n	800112c <MX_GPIO_Init+0x320>
 8001116:	bf00      	nop
 8001118:	40021000 	.word	0x40021000
 800111c:	48001000 	.word	0x48001000
 8001120:	48000400 	.word	0x48000400
 8001124:	48000c00 	.word	0x48000c00
 8001128:	48000800 	.word	0x48000800
 800112c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112e:	2303      	movs	r3, #3
 8001130:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001132:	2304      	movs	r3, #4
 8001134:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001136:	f107 0314 	add.w	r3, r7, #20
 800113a:	4619      	mov	r1, r3
 800113c:	480b      	ldr	r0, [pc, #44]	; (800116c <MX_GPIO_Init+0x360>)
 800113e:	f001 f899 	bl	8002274 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001142:	2200      	movs	r2, #0
 8001144:	2100      	movs	r1, #0
 8001146:	2017      	movs	r0, #23
 8001148:	f000 ff51 	bl	8001fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800114c:	2017      	movs	r0, #23
 800114e:	f000 ff6a 	bl	8002026 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001152:	2200      	movs	r2, #0
 8001154:	2100      	movs	r1, #0
 8001156:	2028      	movs	r0, #40	; 0x28
 8001158:	f000 ff49 	bl	8001fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800115c:	2028      	movs	r0, #40	; 0x28
 800115e:	f000 ff62 	bl	8002026 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001162:	bf00      	nop
 8001164:	3728      	adds	r7, #40	; 0x28
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	48000400 	.word	0x48000400

08001170 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001174:	b672      	cpsid	i
}
 8001176:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001178:	e7fe      	b.n	8001178 <Error_Handler+0x8>
	...

0800117c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001182:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <HAL_MspInit+0x44>)
 8001184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001186:	4a0e      	ldr	r2, [pc, #56]	; (80011c0 <HAL_MspInit+0x44>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	6613      	str	r3, [r2, #96]	; 0x60
 800118e:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <HAL_MspInit+0x44>)
 8001190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800119a:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <HAL_MspInit+0x44>)
 800119c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119e:	4a08      	ldr	r2, [pc, #32]	; (80011c0 <HAL_MspInit+0x44>)
 80011a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a4:	6593      	str	r3, [r2, #88]	; 0x58
 80011a6:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <HAL_MspInit+0x44>)
 80011a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ae:	603b      	str	r3, [r7, #0]
 80011b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	40021000 	.word	0x40021000

080011c4 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b0ac      	sub	sp, #176	; 0xb0
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	2288      	movs	r2, #136	; 0x88
 80011e2:	2100      	movs	r1, #0
 80011e4:	4618      	mov	r0, r3
 80011e6:	f004 fffd 	bl	80061e4 <memset>
  if(DFSDM1_Init == 0)
 80011ea:	4b25      	ldr	r3, [pc, #148]	; (8001280 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d142      	bne.n	8001278 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80011f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011f6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80011f8:	2300      	movs	r3, #0
 80011fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011fe:	f107 0314 	add.w	r3, r7, #20
 8001202:	4618      	mov	r0, r3
 8001204:	f003 f9fa 	bl	80045fc <HAL_RCCEx_PeriphCLKConfig>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800120e:	f7ff ffaf 	bl	8001170 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8001212:	4b1c      	ldr	r3, [pc, #112]	; (8001284 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001214:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001216:	4a1b      	ldr	r2, [pc, #108]	; (8001284 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001218:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800121c:	6613      	str	r3, [r2, #96]	; 0x60
 800121e:	4b19      	ldr	r3, [pc, #100]	; (8001284 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001222:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001226:	613b      	str	r3, [r7, #16]
 8001228:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800122a:	4b16      	ldr	r3, [pc, #88]	; (8001284 <HAL_DFSDM_ChannelMspInit+0xc0>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122e:	4a15      	ldr	r2, [pc, #84]	; (8001284 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001230:	f043 0310 	orr.w	r3, r3, #16
 8001234:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001236:	4b13      	ldr	r3, [pc, #76]	; (8001284 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123a:	f003 0310 	and.w	r3, r3, #16
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8001242:	f44f 7320 	mov.w	r3, #640	; 0x280
 8001246:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124a:	2302      	movs	r3, #2
 800124c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001256:	2300      	movs	r3, #0
 8001258:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800125c:	2306      	movs	r3, #6
 800125e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001262:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001266:	4619      	mov	r1, r3
 8001268:	4807      	ldr	r0, [pc, #28]	; (8001288 <HAL_DFSDM_ChannelMspInit+0xc4>)
 800126a:	f001 f803 	bl	8002274 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800126e:	4b04      	ldr	r3, [pc, #16]	; (8001280 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	3301      	adds	r3, #1
 8001274:	4a02      	ldr	r2, [pc, #8]	; (8001280 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8001276:	6013      	str	r3, [r2, #0]
  }

}
 8001278:	bf00      	nop
 800127a:	37b0      	adds	r7, #176	; 0xb0
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	200008d4 	.word	0x200008d4
 8001284:	40021000 	.word	0x40021000
 8001288:	48001000 	.word	0x48001000

0800128c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b0ac      	sub	sp, #176	; 0xb0
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	2288      	movs	r2, #136	; 0x88
 80012aa:	2100      	movs	r1, #0
 80012ac:	4618      	mov	r0, r3
 80012ae:	f004 ff99 	bl	80061e4 <memset>
  if(hi2c->Instance==I2C2)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a21      	ldr	r2, [pc, #132]	; (800133c <HAL_I2C_MspInit+0xb0>)
 80012b8:	4293      	cmp	r3, r2
 80012ba:	d13b      	bne.n	8001334 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80012bc:	2380      	movs	r3, #128	; 0x80
 80012be:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80012c0:	2300      	movs	r3, #0
 80012c2:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	4618      	mov	r0, r3
 80012ca:	f003 f997 	bl	80045fc <HAL_RCCEx_PeriphCLKConfig>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80012d4:	f7ff ff4c 	bl	8001170 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d8:	4b19      	ldr	r3, [pc, #100]	; (8001340 <HAL_I2C_MspInit+0xb4>)
 80012da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012dc:	4a18      	ldr	r2, [pc, #96]	; (8001340 <HAL_I2C_MspInit+0xb4>)
 80012de:	f043 0302 	orr.w	r3, r3, #2
 80012e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012e4:	4b16      	ldr	r3, [pc, #88]	; (8001340 <HAL_I2C_MspInit+0xb4>)
 80012e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e8:	f003 0302 	and.w	r3, r3, #2
 80012ec:	613b      	str	r3, [r7, #16]
 80012ee:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80012f0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80012f4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012f8:	2312      	movs	r3, #18
 80012fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012fe:	2301      	movs	r3, #1
 8001300:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001304:	2303      	movs	r3, #3
 8001306:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800130a:	2304      	movs	r3, #4
 800130c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001310:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001314:	4619      	mov	r1, r3
 8001316:	480b      	ldr	r0, [pc, #44]	; (8001344 <HAL_I2C_MspInit+0xb8>)
 8001318:	f000 ffac 	bl	8002274 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800131c:	4b08      	ldr	r3, [pc, #32]	; (8001340 <HAL_I2C_MspInit+0xb4>)
 800131e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001320:	4a07      	ldr	r2, [pc, #28]	; (8001340 <HAL_I2C_MspInit+0xb4>)
 8001322:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001326:	6593      	str	r3, [r2, #88]	; 0x58
 8001328:	4b05      	ldr	r3, [pc, #20]	; (8001340 <HAL_I2C_MspInit+0xb4>)
 800132a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800132c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001334:	bf00      	nop
 8001336:	37b0      	adds	r7, #176	; 0xb0
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40005800 	.word	0x40005800
 8001340:	40021000 	.word	0x40021000
 8001344:	48000400 	.word	0x48000400

08001348 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a0b      	ldr	r2, [pc, #44]	; (8001384 <HAL_I2C_MspDeInit+0x3c>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d10f      	bne.n	800137a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 800135a:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <HAL_I2C_MspDeInit+0x40>)
 800135c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800135e:	4a0a      	ldr	r2, [pc, #40]	; (8001388 <HAL_I2C_MspDeInit+0x40>)
 8001360:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001364:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(INTERNAL_I2C2_SCL_GPIO_Port, INTERNAL_I2C2_SCL_Pin);
 8001366:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800136a:	4808      	ldr	r0, [pc, #32]	; (800138c <HAL_I2C_MspDeInit+0x44>)
 800136c:	f001 f92c 	bl	80025c8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(INTERNAL_I2C2_SDA_GPIO_Port, INTERNAL_I2C2_SDA_Pin);
 8001370:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001374:	4805      	ldr	r0, [pc, #20]	; (800138c <HAL_I2C_MspDeInit+0x44>)
 8001376:	f001 f927 	bl	80025c8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40005800 	.word	0x40005800
 8001388:	40021000 	.word	0x40021000
 800138c:	48000400 	.word	0x48000400

08001390 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b08a      	sub	sp, #40	; 0x28
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001398:	f107 0314 	add.w	r3, r7, #20
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	605a      	str	r2, [r3, #4]
 80013a2:	609a      	str	r2, [r3, #8]
 80013a4:	60da      	str	r2, [r3, #12]
 80013a6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a17      	ldr	r2, [pc, #92]	; (800140c <HAL_QSPI_MspInit+0x7c>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d128      	bne.n	8001404 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80013b2:	4b17      	ldr	r3, [pc, #92]	; (8001410 <HAL_QSPI_MspInit+0x80>)
 80013b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013b6:	4a16      	ldr	r2, [pc, #88]	; (8001410 <HAL_QSPI_MspInit+0x80>)
 80013b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013bc:	6513      	str	r3, [r2, #80]	; 0x50
 80013be:	4b14      	ldr	r3, [pc, #80]	; (8001410 <HAL_QSPI_MspInit+0x80>)
 80013c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80013ca:	4b11      	ldr	r3, [pc, #68]	; (8001410 <HAL_QSPI_MspInit+0x80>)
 80013cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ce:	4a10      	ldr	r2, [pc, #64]	; (8001410 <HAL_QSPI_MspInit+0x80>)
 80013d0:	f043 0310 	orr.w	r3, r3, #16
 80013d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013d6:	4b0e      	ldr	r3, [pc, #56]	; (8001410 <HAL_QSPI_MspInit+0x80>)
 80013d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013da:	f003 0310 	and.w	r3, r3, #16
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 80013e2:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80013e6:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e8:	2302      	movs	r3, #2
 80013ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f0:	2303      	movs	r3, #3
 80013f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80013f4:	230a      	movs	r3, #10
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013f8:	f107 0314 	add.w	r3, r7, #20
 80013fc:	4619      	mov	r1, r3
 80013fe:	4805      	ldr	r0, [pc, #20]	; (8001414 <HAL_QSPI_MspInit+0x84>)
 8001400:	f000 ff38 	bl	8002274 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001404:	bf00      	nop
 8001406:	3728      	adds	r7, #40	; 0x28
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	a0001000 	.word	0xa0001000
 8001410:	40021000 	.word	0x40021000
 8001414:	48001000 	.word	0x48001000

08001418 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08a      	sub	sp, #40	; 0x28
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001420:	f107 0314 	add.w	r3, r7, #20
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
 8001428:	605a      	str	r2, [r3, #4]
 800142a:	609a      	str	r2, [r3, #8]
 800142c:	60da      	str	r2, [r3, #12]
 800142e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a17      	ldr	r2, [pc, #92]	; (8001494 <HAL_SPI_MspInit+0x7c>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d128      	bne.n	800148c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800143a:	4b17      	ldr	r3, [pc, #92]	; (8001498 <HAL_SPI_MspInit+0x80>)
 800143c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800143e:	4a16      	ldr	r2, [pc, #88]	; (8001498 <HAL_SPI_MspInit+0x80>)
 8001440:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001444:	6593      	str	r3, [r2, #88]	; 0x58
 8001446:	4b14      	ldr	r3, [pc, #80]	; (8001498 <HAL_SPI_MspInit+0x80>)
 8001448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800144a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800144e:	613b      	str	r3, [r7, #16]
 8001450:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001452:	4b11      	ldr	r3, [pc, #68]	; (8001498 <HAL_SPI_MspInit+0x80>)
 8001454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001456:	4a10      	ldr	r2, [pc, #64]	; (8001498 <HAL_SPI_MspInit+0x80>)
 8001458:	f043 0304 	orr.w	r3, r3, #4
 800145c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <HAL_SPI_MspInit+0x80>)
 8001460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001462:	f003 0304 	and.w	r3, r3, #4
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 800146a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800146e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001470:	2302      	movs	r3, #2
 8001472:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001478:	2303      	movs	r3, #3
 800147a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800147c:	2306      	movs	r3, #6
 800147e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	4619      	mov	r1, r3
 8001486:	4805      	ldr	r0, [pc, #20]	; (800149c <HAL_SPI_MspInit+0x84>)
 8001488:	f000 fef4 	bl	8002274 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800148c:	bf00      	nop
 800148e:	3728      	adds	r7, #40	; 0x28
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40003c00 	.word	0x40003c00
 8001498:	40021000 	.word	0x40021000
 800149c:	48000800 	.word	0x48000800

080014a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b0ae      	sub	sp, #184	; 0xb8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014b8:	f107 031c 	add.w	r3, r7, #28
 80014bc:	2288      	movs	r2, #136	; 0x88
 80014be:	2100      	movs	r1, #0
 80014c0:	4618      	mov	r0, r3
 80014c2:	f004 fe8f 	bl	80061e4 <memset>
  if(huart->Instance==USART1)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a42      	ldr	r2, [pc, #264]	; (80015d4 <HAL_UART_MspInit+0x134>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d13b      	bne.n	8001548 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80014d0:	2301      	movs	r3, #1
 80014d2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80014d4:	2300      	movs	r3, #0
 80014d6:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014d8:	f107 031c 	add.w	r3, r7, #28
 80014dc:	4618      	mov	r0, r3
 80014de:	f003 f88d 	bl	80045fc <HAL_RCCEx_PeriphCLKConfig>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014e8:	f7ff fe42 	bl	8001170 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014ec:	4b3a      	ldr	r3, [pc, #232]	; (80015d8 <HAL_UART_MspInit+0x138>)
 80014ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014f0:	4a39      	ldr	r2, [pc, #228]	; (80015d8 <HAL_UART_MspInit+0x138>)
 80014f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f6:	6613      	str	r3, [r2, #96]	; 0x60
 80014f8:	4b37      	ldr	r3, [pc, #220]	; (80015d8 <HAL_UART_MspInit+0x138>)
 80014fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001500:	61bb      	str	r3, [r7, #24]
 8001502:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001504:	4b34      	ldr	r3, [pc, #208]	; (80015d8 <HAL_UART_MspInit+0x138>)
 8001506:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001508:	4a33      	ldr	r2, [pc, #204]	; (80015d8 <HAL_UART_MspInit+0x138>)
 800150a:	f043 0302 	orr.w	r3, r3, #2
 800150e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001510:	4b31      	ldr	r3, [pc, #196]	; (80015d8 <HAL_UART_MspInit+0x138>)
 8001512:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	617b      	str	r3, [r7, #20]
 800151a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 800151c:	23c0      	movs	r3, #192	; 0xc0
 800151e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001522:	2302      	movs	r3, #2
 8001524:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152e:	2303      	movs	r3, #3
 8001530:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001534:	2307      	movs	r3, #7
 8001536:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800153e:	4619      	mov	r1, r3
 8001540:	4826      	ldr	r0, [pc, #152]	; (80015dc <HAL_UART_MspInit+0x13c>)
 8001542:	f000 fe97 	bl	8002274 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001546:	e040      	b.n	80015ca <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a24      	ldr	r2, [pc, #144]	; (80015e0 <HAL_UART_MspInit+0x140>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d13b      	bne.n	80015ca <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001552:	2304      	movs	r3, #4
 8001554:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001556:	2300      	movs	r3, #0
 8001558:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800155a:	f107 031c 	add.w	r3, r7, #28
 800155e:	4618      	mov	r0, r3
 8001560:	f003 f84c 	bl	80045fc <HAL_RCCEx_PeriphCLKConfig>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <HAL_UART_MspInit+0xce>
      Error_Handler();
 800156a:	f7ff fe01 	bl	8001170 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800156e:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <HAL_UART_MspInit+0x138>)
 8001570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001572:	4a19      	ldr	r2, [pc, #100]	; (80015d8 <HAL_UART_MspInit+0x138>)
 8001574:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001578:	6593      	str	r3, [r2, #88]	; 0x58
 800157a:	4b17      	ldr	r3, [pc, #92]	; (80015d8 <HAL_UART_MspInit+0x138>)
 800157c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800157e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001582:	613b      	str	r3, [r7, #16]
 8001584:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001586:	4b14      	ldr	r3, [pc, #80]	; (80015d8 <HAL_UART_MspInit+0x138>)
 8001588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800158a:	4a13      	ldr	r2, [pc, #76]	; (80015d8 <HAL_UART_MspInit+0x138>)
 800158c:	f043 0308 	orr.w	r3, r3, #8
 8001590:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001592:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <HAL_UART_MspInit+0x138>)
 8001594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001596:	f003 0308 	and.w	r3, r3, #8
 800159a:	60fb      	str	r3, [r7, #12]
 800159c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800159e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a6:	2302      	movs	r3, #2
 80015a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b2:	2303      	movs	r3, #3
 80015b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015b8:	2307      	movs	r3, #7
 80015ba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015be:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80015c2:	4619      	mov	r1, r3
 80015c4:	4807      	ldr	r0, [pc, #28]	; (80015e4 <HAL_UART_MspInit+0x144>)
 80015c6:	f000 fe55 	bl	8002274 <HAL_GPIO_Init>
}
 80015ca:	bf00      	nop
 80015cc:	37b8      	adds	r7, #184	; 0xb8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40013800 	.word	0x40013800
 80015d8:	40021000 	.word	0x40021000
 80015dc:	48000400 	.word	0x48000400
 80015e0:	40004800 	.word	0x40004800
 80015e4:	48000c00 	.word	0x48000c00

080015e8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b0ac      	sub	sp, #176	; 0xb0
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
 80015fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001600:	f107 0314 	add.w	r3, r7, #20
 8001604:	2288      	movs	r2, #136	; 0x88
 8001606:	2100      	movs	r1, #0
 8001608:	4618      	mov	r0, r3
 800160a:	f004 fdeb 	bl	80061e4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001616:	d17c      	bne.n	8001712 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001618:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800161c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800161e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001622:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001626:	2301      	movs	r3, #1
 8001628:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800162a:	2301      	movs	r3, #1
 800162c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800162e:	2318      	movs	r3, #24
 8001630:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001632:	2307      	movs	r3, #7
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001636:	2302      	movs	r3, #2
 8001638:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800163a:	2302      	movs	r3, #2
 800163c:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800163e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001642:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001644:	f107 0314 	add.w	r3, r7, #20
 8001648:	4618      	mov	r0, r3
 800164a:	f002 ffd7 	bl	80045fc <HAL_RCCEx_PeriphCLKConfig>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8001654:	f7ff fd8c 	bl	8001170 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001658:	4b30      	ldr	r3, [pc, #192]	; (800171c <HAL_PCD_MspInit+0x134>)
 800165a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165c:	4a2f      	ldr	r2, [pc, #188]	; (800171c <HAL_PCD_MspInit+0x134>)
 800165e:	f043 0301 	orr.w	r3, r3, #1
 8001662:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001664:	4b2d      	ldr	r3, [pc, #180]	; (800171c <HAL_PCD_MspInit+0x134>)
 8001666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	613b      	str	r3, [r7, #16]
 800166e:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8001670:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001674:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001678:	2300      	movs	r3, #0
 800167a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001684:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001688:	4619      	mov	r1, r3
 800168a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800168e:	f000 fdf1 	bl	8002274 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001692:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001696:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169a:	2302      	movs	r3, #2
 800169c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a0:	2300      	movs	r3, #0
 80016a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a6:	2303      	movs	r3, #3
 80016a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80016ac:	230a      	movs	r3, #10
 80016ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80016b6:	4619      	mov	r1, r3
 80016b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016bc:	f000 fdda 	bl	8002274 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80016c0:	4b16      	ldr	r3, [pc, #88]	; (800171c <HAL_PCD_MspInit+0x134>)
 80016c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c4:	4a15      	ldr	r2, [pc, #84]	; (800171c <HAL_PCD_MspInit+0x134>)
 80016c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016cc:	4b13      	ldr	r3, [pc, #76]	; (800171c <HAL_PCD_MspInit+0x134>)
 80016ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016d8:	4b10      	ldr	r3, [pc, #64]	; (800171c <HAL_PCD_MspInit+0x134>)
 80016da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d114      	bne.n	800170e <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016e4:	4b0d      	ldr	r3, [pc, #52]	; (800171c <HAL_PCD_MspInit+0x134>)
 80016e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e8:	4a0c      	ldr	r2, [pc, #48]	; (800171c <HAL_PCD_MspInit+0x134>)
 80016ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ee:	6593      	str	r3, [r2, #88]	; 0x58
 80016f0:	4b0a      	ldr	r3, [pc, #40]	; (800171c <HAL_PCD_MspInit+0x134>)
 80016f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f8:	60bb      	str	r3, [r7, #8]
 80016fa:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80016fc:	f002 f8b2 	bl	8003864 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001700:	4b06      	ldr	r3, [pc, #24]	; (800171c <HAL_PCD_MspInit+0x134>)
 8001702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001704:	4a05      	ldr	r2, [pc, #20]	; (800171c <HAL_PCD_MspInit+0x134>)
 8001706:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800170a:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800170c:	e001      	b.n	8001712 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 800170e:	f002 f8a9 	bl	8003864 <HAL_PWREx_EnableVddUSB>
}
 8001712:	bf00      	nop
 8001714:	37b0      	adds	r7, #176	; 0xb0
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40021000 	.word	0x40021000

08001720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001724:	e7fe      	b.n	8001724 <NMI_Handler+0x4>

08001726 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001726:	b480      	push	{r7}
 8001728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800172a:	e7fe      	b.n	800172a <HardFault_Handler+0x4>

0800172c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001730:	e7fe      	b.n	8001730 <MemManage_Handler+0x4>

08001732 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001732:	b480      	push	{r7}
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001736:	e7fe      	b.n	8001736 <BusFault_Handler+0x4>

08001738 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800173c:	e7fe      	b.n	800173c <UsageFault_Handler+0x4>

0800173e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	46bd      	mov	sp, r7
 8001746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174a:	4770      	bx	lr

0800174c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800175a:	b480      	push	{r7}
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800175e:	bf00      	nop
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800176c:	f000 fb20 	bl	8001db0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001770:	bf00      	nop
 8001772:	bd80      	pop	{r7, pc}

08001774 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8001778:	2020      	movs	r0, #32
 800177a:	f001 f84b 	bl	8002814 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 800177e:	2040      	movs	r0, #64	; 0x40
 8001780:	f001 f848 	bl	8002814 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8001784:	2080      	movs	r0, #128	; 0x80
 8001786:	f001 f845 	bl	8002814 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 800178a:	f44f 7080 	mov.w	r0, #256	; 0x100
 800178e:	f001 f841 	bl	8002814 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}

08001796 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001796:	b580      	push	{r7, lr}
 8001798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 800179a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800179e:	f001 f839 	bl	8002814 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80017a2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80017a6:	f001 f835 	bl	8002814 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 80017aa:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80017ae:	f001 f831 	bl	8002814 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 80017b2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80017b6:	f001 f82d 	bl	8002814 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 80017ba:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80017be:	f001 f829 	bl	8002814 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
	...

080017c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017d0:	4a14      	ldr	r2, [pc, #80]	; (8001824 <_sbrk+0x5c>)
 80017d2:	4b15      	ldr	r3, [pc, #84]	; (8001828 <_sbrk+0x60>)
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017dc:	4b13      	ldr	r3, [pc, #76]	; (800182c <_sbrk+0x64>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d102      	bne.n	80017ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017e4:	4b11      	ldr	r3, [pc, #68]	; (800182c <_sbrk+0x64>)
 80017e6:	4a12      	ldr	r2, [pc, #72]	; (8001830 <_sbrk+0x68>)
 80017e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ea:	4b10      	ldr	r3, [pc, #64]	; (800182c <_sbrk+0x64>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4413      	add	r3, r2
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d207      	bcs.n	8001808 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017f8:	f004 fcfc 	bl	80061f4 <__errno>
 80017fc:	4603      	mov	r3, r0
 80017fe:	220c      	movs	r2, #12
 8001800:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001802:	f04f 33ff 	mov.w	r3, #4294967295
 8001806:	e009      	b.n	800181c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001808:	4b08      	ldr	r3, [pc, #32]	; (800182c <_sbrk+0x64>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800180e:	4b07      	ldr	r3, [pc, #28]	; (800182c <_sbrk+0x64>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4413      	add	r3, r2
 8001816:	4a05      	ldr	r2, [pc, #20]	; (800182c <_sbrk+0x64>)
 8001818:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800181a:	68fb      	ldr	r3, [r7, #12]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20018000 	.word	0x20018000
 8001828:	00000400 	.word	0x00000400
 800182c:	200008d8 	.word	0x200008d8
 8001830:	20000aa8 	.word	0x20000aa8

08001834 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001838:	4b06      	ldr	r3, [pc, #24]	; (8001854 <SystemInit+0x20>)
 800183a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800183e:	4a05      	ldr	r2, [pc, #20]	; (8001854 <SystemInit+0x20>)
 8001840:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001844:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001858:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001890 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800185c:	f7ff ffea 	bl	8001834 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001860:	480c      	ldr	r0, [pc, #48]	; (8001894 <LoopForever+0x6>)
  ldr r1, =_edata
 8001862:	490d      	ldr	r1, [pc, #52]	; (8001898 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001864:	4a0d      	ldr	r2, [pc, #52]	; (800189c <LoopForever+0xe>)
  movs r3, #0
 8001866:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001868:	e002      	b.n	8001870 <LoopCopyDataInit>

0800186a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800186a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800186c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800186e:	3304      	adds	r3, #4

08001870 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001870:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001872:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001874:	d3f9      	bcc.n	800186a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001876:	4a0a      	ldr	r2, [pc, #40]	; (80018a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001878:	4c0a      	ldr	r4, [pc, #40]	; (80018a4 <LoopForever+0x16>)
  movs r3, #0
 800187a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800187c:	e001      	b.n	8001882 <LoopFillZerobss>

0800187e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800187e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001880:	3204      	adds	r2, #4

08001882 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001882:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001884:	d3fb      	bcc.n	800187e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001886:	f004 fcbb 	bl	8006200 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800188a:	f7ff f853 	bl	8000934 <main>

0800188e <LoopForever>:

LoopForever:
    b LoopForever
 800188e:	e7fe      	b.n	800188e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001890:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001894:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001898:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 800189c:	08006c34 	.word	0x08006c34
  ldr r2, =_sbss
 80018a0:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 80018a4:	20000aa4 	.word	0x20000aa4

080018a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018a8:	e7fe      	b.n	80018a8 <ADC1_2_IRQHandler>
	...

080018ac <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08a      	sub	sp, #40	; 0x28
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80018b4:	4b27      	ldr	r3, [pc, #156]	; (8001954 <I2Cx_MspInit+0xa8>)
 80018b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b8:	4a26      	ldr	r2, [pc, #152]	; (8001954 <I2Cx_MspInit+0xa8>)
 80018ba:	f043 0302 	orr.w	r3, r3, #2
 80018be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018c0:	4b24      	ldr	r3, [pc, #144]	; (8001954 <I2Cx_MspInit+0xa8>)
 80018c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c4:	f003 0302 	and.w	r3, r3, #2
 80018c8:	613b      	str	r3, [r7, #16]
 80018ca:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80018cc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80018d0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80018d2:	2312      	movs	r3, #18
 80018d4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80018d6:	2301      	movs	r3, #1
 80018d8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018da:	2303      	movs	r3, #3
 80018dc:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80018de:	2304      	movs	r3, #4
 80018e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80018e2:	f107 0314 	add.w	r3, r7, #20
 80018e6:	4619      	mov	r1, r3
 80018e8:	481b      	ldr	r0, [pc, #108]	; (8001958 <I2Cx_MspInit+0xac>)
 80018ea:	f000 fcc3 	bl	8002274 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80018ee:	f107 0314 	add.w	r3, r7, #20
 80018f2:	4619      	mov	r1, r3
 80018f4:	4818      	ldr	r0, [pc, #96]	; (8001958 <I2Cx_MspInit+0xac>)
 80018f6:	f000 fcbd 	bl	8002274 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80018fa:	4b16      	ldr	r3, [pc, #88]	; (8001954 <I2Cx_MspInit+0xa8>)
 80018fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018fe:	4a15      	ldr	r2, [pc, #84]	; (8001954 <I2Cx_MspInit+0xa8>)
 8001900:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001904:	6593      	str	r3, [r2, #88]	; 0x58
 8001906:	4b13      	ldr	r3, [pc, #76]	; (8001954 <I2Cx_MspInit+0xa8>)
 8001908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 8001912:	4b10      	ldr	r3, [pc, #64]	; (8001954 <I2Cx_MspInit+0xa8>)
 8001914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001916:	4a0f      	ldr	r2, [pc, #60]	; (8001954 <I2Cx_MspInit+0xa8>)
 8001918:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800191c:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800191e:	4b0d      	ldr	r3, [pc, #52]	; (8001954 <I2Cx_MspInit+0xa8>)
 8001920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001922:	4a0c      	ldr	r2, [pc, #48]	; (8001954 <I2Cx_MspInit+0xa8>)
 8001924:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001928:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800192a:	2200      	movs	r2, #0
 800192c:	210f      	movs	r1, #15
 800192e:	2021      	movs	r0, #33	; 0x21
 8001930:	f000 fb5d 	bl	8001fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8001934:	2021      	movs	r0, #33	; 0x21
 8001936:	f000 fb76 	bl	8002026 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800193a:	2200      	movs	r2, #0
 800193c:	210f      	movs	r1, #15
 800193e:	2022      	movs	r0, #34	; 0x22
 8001940:	f000 fb55 	bl	8001fee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8001944:	2022      	movs	r0, #34	; 0x22
 8001946:	f000 fb6e 	bl	8002026 <HAL_NVIC_EnableIRQ>
}
 800194a:	bf00      	nop
 800194c:	3728      	adds	r7, #40	; 0x28
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40021000 	.word	0x40021000
 8001958:	48000400 	.word	0x48000400

0800195c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a12      	ldr	r2, [pc, #72]	; (80019b0 <I2Cx_Init+0x54>)
 8001968:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a11      	ldr	r2, [pc, #68]	; (80019b4 <I2Cx_Init+0x58>)
 800196e:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2201      	movs	r2, #1
 800197a:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2200      	movs	r2, #0
 800198c:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8001994:	6878      	ldr	r0, [r7, #4]
 8001996:	f7ff ff89 	bl	80018ac <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	f000 ff5d 	bl	800285a <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80019a0:	2100      	movs	r1, #0
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f001 fd0a 	bl	80033bc <HAL_I2CEx_ConfigAnalogFilter>
}
 80019a8:	bf00      	nop
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40005800 	.word	0x40005800
 80019b4:	00702681 	.word	0x00702681

080019b8 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b08a      	sub	sp, #40	; 0x28
 80019bc:	af04      	add	r7, sp, #16
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	4608      	mov	r0, r1
 80019c2:	4611      	mov	r1, r2
 80019c4:	461a      	mov	r2, r3
 80019c6:	4603      	mov	r3, r0
 80019c8:	72fb      	strb	r3, [r7, #11]
 80019ca:	460b      	mov	r3, r1
 80019cc:	813b      	strh	r3, [r7, #8]
 80019ce:	4613      	mov	r3, r2
 80019d0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80019d2:	2300      	movs	r3, #0
 80019d4:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80019d6:	7afb      	ldrb	r3, [r7, #11]
 80019d8:	b299      	uxth	r1, r3
 80019da:	88f8      	ldrh	r0, [r7, #6]
 80019dc:	893a      	ldrh	r2, [r7, #8]
 80019de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019e2:	9302      	str	r3, [sp, #8]
 80019e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80019e6:	9301      	str	r3, [sp, #4]
 80019e8:	6a3b      	ldr	r3, [r7, #32]
 80019ea:	9300      	str	r3, [sp, #0]
 80019ec:	4603      	mov	r3, r0
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	f001 f912 	bl	8002c18 <HAL_I2C_Mem_Read>
 80019f4:	4603      	mov	r3, r0
 80019f6:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80019f8:	7dfb      	ldrb	r3, [r7, #23]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d004      	beq.n	8001a08 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80019fe:	7afb      	ldrb	r3, [r7, #11]
 8001a00:	4619      	mov	r1, r3
 8001a02:	68f8      	ldr	r0, [r7, #12]
 8001a04:	f000 f832 	bl	8001a6c <I2Cx_Error>
  }
  return status;
 8001a08:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3718      	adds	r7, #24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b08a      	sub	sp, #40	; 0x28
 8001a16:	af04      	add	r7, sp, #16
 8001a18:	60f8      	str	r0, [r7, #12]
 8001a1a:	4608      	mov	r0, r1
 8001a1c:	4611      	mov	r1, r2
 8001a1e:	461a      	mov	r2, r3
 8001a20:	4603      	mov	r3, r0
 8001a22:	72fb      	strb	r3, [r7, #11]
 8001a24:	460b      	mov	r3, r1
 8001a26:	813b      	strh	r3, [r7, #8]
 8001a28:	4613      	mov	r3, r2
 8001a2a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8001a30:	7afb      	ldrb	r3, [r7, #11]
 8001a32:	b299      	uxth	r1, r3
 8001a34:	88f8      	ldrh	r0, [r7, #6]
 8001a36:	893a      	ldrh	r2, [r7, #8]
 8001a38:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a3c:	9302      	str	r3, [sp, #8]
 8001a3e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a40:	9301      	str	r3, [sp, #4]
 8001a42:	6a3b      	ldr	r3, [r7, #32]
 8001a44:	9300      	str	r3, [sp, #0]
 8001a46:	4603      	mov	r3, r0
 8001a48:	68f8      	ldr	r0, [r7, #12]
 8001a4a:	f000 ffd1 	bl	80029f0 <HAL_I2C_Mem_Write>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8001a52:	7dfb      	ldrb	r3, [r7, #23]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d004      	beq.n	8001a62 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8001a58:	7afb      	ldrb	r3, [r7, #11]
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	68f8      	ldr	r0, [r7, #12]
 8001a5e:	f000 f805 	bl	8001a6c <I2Cx_Error>
  }
  return status;
 8001a62:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3718      	adds	r7, #24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}

08001a6c <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	460b      	mov	r3, r1
 8001a76:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 ff89 	bl	8002990 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f7ff ff6c 	bl	800195c <I2Cx_Init>
}
 8001a84:	bf00      	nop
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8001a90:	4802      	ldr	r0, [pc, #8]	; (8001a9c <SENSOR_IO_Init+0x10>)
 8001a92:	f7ff ff63 	bl	800195c <I2Cx_Init>
}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	200008dc 	.word	0x200008dc

08001aa0 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b084      	sub	sp, #16
 8001aa4:	af02      	add	r7, sp, #8
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	71fb      	strb	r3, [r7, #7]
 8001aaa:	460b      	mov	r3, r1
 8001aac:	71bb      	strb	r3, [r7, #6]
 8001aae:	4613      	mov	r3, r2
 8001ab0:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8001ab2:	79bb      	ldrb	r3, [r7, #6]
 8001ab4:	b29a      	uxth	r2, r3
 8001ab6:	79f9      	ldrb	r1, [r7, #7]
 8001ab8:	2301      	movs	r3, #1
 8001aba:	9301      	str	r3, [sp, #4]
 8001abc:	1d7b      	adds	r3, r7, #5
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	4803      	ldr	r0, [pc, #12]	; (8001ad0 <SENSOR_IO_Write+0x30>)
 8001ac4:	f7ff ffa5 	bl	8001a12 <I2Cx_WriteMultiple>
}
 8001ac8:	bf00      	nop
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	200008dc 	.word	0x200008dc

08001ad4 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b086      	sub	sp, #24
 8001ad8:	af02      	add	r7, sp, #8
 8001ada:	4603      	mov	r3, r0
 8001adc:	460a      	mov	r2, r1
 8001ade:	71fb      	strb	r3, [r7, #7]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8001ae8:	79bb      	ldrb	r3, [r7, #6]
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	79f9      	ldrb	r1, [r7, #7]
 8001aee:	2301      	movs	r3, #1
 8001af0:	9301      	str	r3, [sp, #4]
 8001af2:	f107 030f 	add.w	r3, r7, #15
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	2301      	movs	r3, #1
 8001afa:	4804      	ldr	r0, [pc, #16]	; (8001b0c <SENSOR_IO_Read+0x38>)
 8001afc:	f7ff ff5c 	bl	80019b8 <I2Cx_ReadMultiple>

  return read_value;
 8001b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	200008dc 	.word	0x200008dc

08001b10 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af02      	add	r7, sp, #8
 8001b16:	603a      	str	r2, [r7, #0]
 8001b18:	461a      	mov	r2, r3
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	71fb      	strb	r3, [r7, #7]
 8001b1e:	460b      	mov	r3, r1
 8001b20:	71bb      	strb	r3, [r7, #6]
 8001b22:	4613      	mov	r3, r2
 8001b24:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8001b26:	79bb      	ldrb	r3, [r7, #6]
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	79f9      	ldrb	r1, [r7, #7]
 8001b2c:	88bb      	ldrh	r3, [r7, #4]
 8001b2e:	9301      	str	r3, [sp, #4]
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	2301      	movs	r3, #1
 8001b36:	4804      	ldr	r0, [pc, #16]	; (8001b48 <SENSOR_IO_ReadMultiple+0x38>)
 8001b38:	f7ff ff3e 	bl	80019b8 <I2Cx_ReadMultiple>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	b29b      	uxth	r3, r3
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	200008dc 	.word	0x200008dc

08001b4c <BSP_TSENSOR_Init>:
/**
  * @brief  Initializes peripherals used by the I2C Temperature Sensor driver.
  * @retval TSENSOR status
  */
uint32_t BSP_TSENSOR_Init(void)
{  
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
  uint8_t ret = TSENSOR_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	71fb      	strb	r3, [r7, #7]

#ifdef USE_LPS22HB_TEMP
  tsensor_drv = &LPS22HB_T_Drv;
#else /* USE_HTS221_TEMP */
  tsensor_drv = &HTS221_T_Drv; 
 8001b56:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <BSP_TSENSOR_Init+0x30>)
 8001b58:	4a09      	ldr	r2, [pc, #36]	; (8001b80 <BSP_TSENSOR_Init+0x34>)
 8001b5a:	601a      	str	r2, [r3, #0]
#endif

  /* Low level init */
  SENSOR_IO_Init();
 8001b5c:	f7ff ff96 	bl	8001a8c <SENSOR_IO_Init>

  /* TSENSOR Init */   
  tsensor_drv->Init(TSENSOR_I2C_ADDRESS, NULL);
 8001b60:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <BSP_TSENSOR_Init+0x30>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2100      	movs	r1, #0
 8001b68:	20be      	movs	r0, #190	; 0xbe
 8001b6a:	4798      	blx	r3

  ret = TSENSOR_OK;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 8001b70:	79fb      	ldrb	r3, [r7, #7]
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20000930 	.word	0x20000930
 8001b80:	20000098 	.word	0x20000098

08001b84 <BSP_TSENSOR_ReadTemp>:
/**
  * @brief  Read Temperature register of TS751.
  * @retval STTS751 measured temperature value.
  */
float BSP_TSENSOR_ReadTemp(void)
{ 
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  return tsensor_drv->ReadTemp(TSENSOR_I2C_ADDRESS);
 8001b88:	4b04      	ldr	r3, [pc, #16]	; (8001b9c <BSP_TSENSOR_ReadTemp+0x18>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	20be      	movs	r0, #190	; 0xbe
 8001b90:	4798      	blx	r3
 8001b92:	eef0 7a40 	vmov.f32	s15, s0
}
 8001b96:	eeb0 0a67 	vmov.f32	s0, s15
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	20000930 	.word	0x20000930

08001ba0 <HTS221_T_Init>:
  * @param  DeviceAddr: I2C device address
  * @param  InitStruct: pointer to a TSENSOR_InitTypeDef structure 
  *         that contains the configuration setting for the HTS221.
  */
void HTS221_T_Init(uint16_t DeviceAddr, TSENSOR_InitTypeDef *pInitStruct)
{  
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	6039      	str	r1, [r7, #0]
 8001baa:	80fb      	strh	r3, [r7, #6]
  uint8_t tmp;
  
  /* Read CTRL_REG1 */
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_CTRL_REG1);
 8001bac:	88fb      	ldrh	r3, [r7, #6]
 8001bae:	b2db      	uxtb	r3, r3
 8001bb0:	2120      	movs	r1, #32
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff ff8e 	bl	8001ad4 <SENSOR_IO_Read>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	73fb      	strb	r3, [r7, #15]
  
  /* Enable BDU */
  tmp &= ~HTS221_BDU_MASK;
 8001bbc:	7bfb      	ldrb	r3, [r7, #15]
 8001bbe:	f023 0304 	bic.w	r3, r3, #4
 8001bc2:	73fb      	strb	r3, [r7, #15]
  tmp |= (1 << HTS221_BDU_BIT);
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
 8001bc6:	f043 0304 	orr.w	r3, r3, #4
 8001bca:	73fb      	strb	r3, [r7, #15]
  
  /* Set default ODR */
  tmp &= ~HTS221_ODR_MASK;
 8001bcc:	7bfb      	ldrb	r3, [r7, #15]
 8001bce:	f023 0303 	bic.w	r3, r3, #3
 8001bd2:	73fb      	strb	r3, [r7, #15]
  tmp |= (uint8_t)0x01; /* Set ODR to 1Hz */
 8001bd4:	7bfb      	ldrb	r3, [r7, #15]
 8001bd6:	f043 0301 	orr.w	r3, r3, #1
 8001bda:	73fb      	strb	r3, [r7, #15]
  
  /* Activate the device */
  tmp |= HTS221_PD_MASK;
 8001bdc:	7bfb      	ldrb	r3, [r7, #15]
 8001bde:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001be2:	73fb      	strb	r3, [r7, #15]
  
  /* Apply settings to CTRL_REG1 */
  SENSOR_IO_Write(DeviceAddr, HTS221_CTRL_REG1, tmp);
 8001be4:	88fb      	ldrh	r3, [r7, #6]
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	7bfa      	ldrb	r2, [r7, #15]
 8001bea:	2120      	movs	r1, #32
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff ff57 	bl	8001aa0 <SENSOR_IO_Write>
}
 8001bf2:	bf00      	nop
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HTS221_T_ReadTemp>:
  * @brief  Read temperature value of HTS221
  * @param  DeviceAddr: I2C device address
  * @retval temperature value
  */
float HTS221_T_ReadTemp(uint16_t DeviceAddr)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b088      	sub	sp, #32
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	4603      	mov	r3, r0
 8001c02:	80fb      	strh	r3, [r7, #6]
  int16_t T0_out, T1_out, T_out, T0_degC_x8_u16, T1_degC_x8_u16;
  int16_t T0_degC, T1_degC;
  uint8_t buffer[4], tmp;
  float tmp_f;

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_DEGC_X8 | 0x80), buffer, 2);
 8001c04:	88fb      	ldrh	r3, [r7, #6]
 8001c06:	b2d8      	uxtb	r0, r3
 8001c08:	f107 0208 	add.w	r2, r7, #8
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	21b2      	movs	r1, #178	; 0xb2
 8001c10:	f7ff ff7e 	bl	8001b10 <SENSOR_IO_ReadMultiple>
  tmp = SENSOR_IO_Read(DeviceAddr, HTS221_T0_T1_DEGC_H2);
 8001c14:	88fb      	ldrh	r3, [r7, #6]
 8001c16:	b2db      	uxtb	r3, r3
 8001c18:	2135      	movs	r1, #53	; 0x35
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff ff5a 	bl	8001ad4 <SENSOR_IO_Read>
 8001c20:	4603      	mov	r3, r0
 8001c22:	77fb      	strb	r3, [r7, #31]

  T0_degC_x8_u16 = (((uint16_t)(tmp & 0x03)) << 8) | ((uint16_t)buffer[0]);
 8001c24:	7ffb      	ldrb	r3, [r7, #31]
 8001c26:	021b      	lsls	r3, r3, #8
 8001c28:	b21b      	sxth	r3, r3
 8001c2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c2e:	b21a      	sxth	r2, r3
 8001c30:	7a3b      	ldrb	r3, [r7, #8]
 8001c32:	b21b      	sxth	r3, r3
 8001c34:	4313      	orrs	r3, r2
 8001c36:	83bb      	strh	r3, [r7, #28]
  T1_degC_x8_u16 = (((uint16_t)(tmp & 0x0C)) << 6) | ((uint16_t)buffer[1]);
 8001c38:	7ffb      	ldrb	r3, [r7, #31]
 8001c3a:	019b      	lsls	r3, r3, #6
 8001c3c:	b21b      	sxth	r3, r3
 8001c3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c42:	b21a      	sxth	r2, r3
 8001c44:	7a7b      	ldrb	r3, [r7, #9]
 8001c46:	b21b      	sxth	r3, r3
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	837b      	strh	r3, [r7, #26]
  T0_degC = T0_degC_x8_u16 >> 3;
 8001c4c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c50:	10db      	asrs	r3, r3, #3
 8001c52:	833b      	strh	r3, [r7, #24]
  T1_degC = T1_degC_x8_u16 >> 3;
 8001c54:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001c58:	10db      	asrs	r3, r3, #3
 8001c5a:	82fb      	strh	r3, [r7, #22]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_T0_OUT_L | 0x80), buffer, 4);
 8001c5c:	88fb      	ldrh	r3, [r7, #6]
 8001c5e:	b2d8      	uxtb	r0, r3
 8001c60:	f107 0208 	add.w	r2, r7, #8
 8001c64:	2304      	movs	r3, #4
 8001c66:	21bc      	movs	r1, #188	; 0xbc
 8001c68:	f7ff ff52 	bl	8001b10 <SENSOR_IO_ReadMultiple>

  T0_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001c6c:	7a7b      	ldrb	r3, [r7, #9]
 8001c6e:	021b      	lsls	r3, r3, #8
 8001c70:	b21a      	sxth	r2, r3
 8001c72:	7a3b      	ldrb	r3, [r7, #8]
 8001c74:	b21b      	sxth	r3, r3
 8001c76:	4313      	orrs	r3, r2
 8001c78:	82bb      	strh	r3, [r7, #20]
  T1_out = (((uint16_t)buffer[3]) << 8) | (uint16_t)buffer[2];
 8001c7a:	7afb      	ldrb	r3, [r7, #11]
 8001c7c:	021b      	lsls	r3, r3, #8
 8001c7e:	b21a      	sxth	r2, r3
 8001c80:	7abb      	ldrb	r3, [r7, #10]
 8001c82:	b21b      	sxth	r3, r3
 8001c84:	4313      	orrs	r3, r2
 8001c86:	827b      	strh	r3, [r7, #18]

  SENSOR_IO_ReadMultiple(DeviceAddr, (HTS221_TEMP_OUT_L_REG | 0x80), buffer, 2);
 8001c88:	88fb      	ldrh	r3, [r7, #6]
 8001c8a:	b2d8      	uxtb	r0, r3
 8001c8c:	f107 0208 	add.w	r2, r7, #8
 8001c90:	2302      	movs	r3, #2
 8001c92:	21aa      	movs	r1, #170	; 0xaa
 8001c94:	f7ff ff3c 	bl	8001b10 <SENSOR_IO_ReadMultiple>

  T_out = (((uint16_t)buffer[1]) << 8) | (uint16_t)buffer[0];
 8001c98:	7a7b      	ldrb	r3, [r7, #9]
 8001c9a:	021b      	lsls	r3, r3, #8
 8001c9c:	b21a      	sxth	r2, r3
 8001c9e:	7a3b      	ldrb	r3, [r7, #8]
 8001ca0:	b21b      	sxth	r3, r3
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	823b      	strh	r3, [r7, #16]

  tmp_f = (float)(T_out - T0_out) * (float)(T1_degC - T0_degC) / (float)(T1_out - T0_out)  +  T0_degC;
 8001ca6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001caa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	ee07 3a90 	vmov	s15, r3
 8001cb4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cb8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001cbc:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	ee07 3a90 	vmov	s15, r3
 8001cc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cca:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001cce:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001cd2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	ee07 3a90 	vmov	s15, r3
 8001cdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ce0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001ce4:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001ce8:	ee07 3a90 	vmov	s15, r3
 8001cec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cf0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cf4:	edc7 7a03 	vstr	s15, [r7, #12]

  return tmp_f;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	ee07 3a90 	vmov	s15, r3
}
 8001cfe:	eeb0 0a67 	vmov.f32	s0, s15
 8001d02:	3720      	adds	r7, #32
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d12:	2003      	movs	r0, #3
 8001d14:	f000 f960 	bl	8001fd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d18:	2000      	movs	r0, #0
 8001d1a:	f000 f80d 	bl	8001d38 <HAL_InitTick>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d002      	beq.n	8001d2a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	71fb      	strb	r3, [r7, #7]
 8001d28:	e001      	b.n	8001d2e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d2a:	f7ff fa27 	bl	800117c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d2e:	79fb      	ldrb	r3, [r7, #7]
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d40:	2300      	movs	r3, #0
 8001d42:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d44:	4b17      	ldr	r3, [pc, #92]	; (8001da4 <HAL_InitTick+0x6c>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d023      	beq.n	8001d94 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d4c:	4b16      	ldr	r3, [pc, #88]	; (8001da8 <HAL_InitTick+0x70>)
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	4b14      	ldr	r3, [pc, #80]	; (8001da4 <HAL_InitTick+0x6c>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	4619      	mov	r1, r3
 8001d56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d62:	4618      	mov	r0, r3
 8001d64:	f000 f96d 	bl	8002042 <HAL_SYSTICK_Config>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d10f      	bne.n	8001d8e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2b0f      	cmp	r3, #15
 8001d72:	d809      	bhi.n	8001d88 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d74:	2200      	movs	r2, #0
 8001d76:	6879      	ldr	r1, [r7, #4]
 8001d78:	f04f 30ff 	mov.w	r0, #4294967295
 8001d7c:	f000 f937 	bl	8001fee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d80:	4a0a      	ldr	r2, [pc, #40]	; (8001dac <HAL_InitTick+0x74>)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6013      	str	r3, [r2, #0]
 8001d86:	e007      	b.n	8001d98 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	73fb      	strb	r3, [r7, #15]
 8001d8c:	e004      	b.n	8001d98 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	73fb      	strb	r3, [r7, #15]
 8001d92:	e001      	b.n	8001d98 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	200000ac 	.word	0x200000ac
 8001da8:	20000094 	.word	0x20000094
 8001dac:	200000a8 	.word	0x200000a8

08001db0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001db4:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <HAL_IncTick+0x20>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	461a      	mov	r2, r3
 8001dba:	4b06      	ldr	r3, [pc, #24]	; (8001dd4 <HAL_IncTick+0x24>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	4a04      	ldr	r2, [pc, #16]	; (8001dd4 <HAL_IncTick+0x24>)
 8001dc2:	6013      	str	r3, [r2, #0]
}
 8001dc4:	bf00      	nop
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	200000ac 	.word	0x200000ac
 8001dd4:	20000934 	.word	0x20000934

08001dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  return uwTick;
 8001ddc:	4b03      	ldr	r3, [pc, #12]	; (8001dec <HAL_GetTick+0x14>)
 8001dde:	681b      	ldr	r3, [r3, #0]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	20000934 	.word	0x20000934

08001df0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001df8:	f7ff ffee 	bl	8001dd8 <HAL_GetTick>
 8001dfc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e08:	d005      	beq.n	8001e16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001e0a:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <HAL_Delay+0x44>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	4413      	add	r3, r2
 8001e14:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e16:	bf00      	nop
 8001e18:	f7ff ffde 	bl	8001dd8 <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	68bb      	ldr	r3, [r7, #8]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	68fa      	ldr	r2, [r7, #12]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d8f7      	bhi.n	8001e18 <HAL_Delay+0x28>
  {
  }
}
 8001e28:	bf00      	nop
 8001e2a:	bf00      	nop
 8001e2c:	3710      	adds	r7, #16
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	200000ac 	.word	0x200000ac

08001e38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	f003 0307 	and.w	r3, r3, #7
 8001e46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e48:	4b0c      	ldr	r3, [pc, #48]	; (8001e7c <__NVIC_SetPriorityGrouping+0x44>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e4e:	68ba      	ldr	r2, [r7, #8]
 8001e50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e54:	4013      	ands	r3, r2
 8001e56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e6a:	4a04      	ldr	r2, [pc, #16]	; (8001e7c <__NVIC_SetPriorityGrouping+0x44>)
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	60d3      	str	r3, [r2, #12]
}
 8001e70:	bf00      	nop
 8001e72:	3714      	adds	r7, #20
 8001e74:	46bd      	mov	sp, r7
 8001e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7a:	4770      	bx	lr
 8001e7c:	e000ed00 	.word	0xe000ed00

08001e80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e84:	4b04      	ldr	r3, [pc, #16]	; (8001e98 <__NVIC_GetPriorityGrouping+0x18>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	0a1b      	lsrs	r3, r3, #8
 8001e8a:	f003 0307 	and.w	r3, r3, #7
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr
 8001e98:	e000ed00 	.word	0xe000ed00

08001e9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	db0b      	blt.n	8001ec6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eae:	79fb      	ldrb	r3, [r7, #7]
 8001eb0:	f003 021f 	and.w	r2, r3, #31
 8001eb4:	4907      	ldr	r1, [pc, #28]	; (8001ed4 <__NVIC_EnableIRQ+0x38>)
 8001eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eba:	095b      	lsrs	r3, r3, #5
 8001ebc:	2001      	movs	r0, #1
 8001ebe:	fa00 f202 	lsl.w	r2, r0, r2
 8001ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ec6:	bf00      	nop
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	e000e100 	.word	0xe000e100

08001ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	6039      	str	r1, [r7, #0]
 8001ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	db0a      	blt.n	8001f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	490c      	ldr	r1, [pc, #48]	; (8001f24 <__NVIC_SetPriority+0x4c>)
 8001ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef6:	0112      	lsls	r2, r2, #4
 8001ef8:	b2d2      	uxtb	r2, r2
 8001efa:	440b      	add	r3, r1
 8001efc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f00:	e00a      	b.n	8001f18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	b2da      	uxtb	r2, r3
 8001f06:	4908      	ldr	r1, [pc, #32]	; (8001f28 <__NVIC_SetPriority+0x50>)
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	f003 030f 	and.w	r3, r3, #15
 8001f0e:	3b04      	subs	r3, #4
 8001f10:	0112      	lsls	r2, r2, #4
 8001f12:	b2d2      	uxtb	r2, r2
 8001f14:	440b      	add	r3, r1
 8001f16:	761a      	strb	r2, [r3, #24]
}
 8001f18:	bf00      	nop
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr
 8001f24:	e000e100 	.word	0xe000e100
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b089      	sub	sp, #36	; 0x24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	60f8      	str	r0, [r7, #12]
 8001f34:	60b9      	str	r1, [r7, #8]
 8001f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	f003 0307 	and.w	r3, r3, #7
 8001f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	f1c3 0307 	rsb	r3, r3, #7
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	bf28      	it	cs
 8001f4a:	2304      	movcs	r3, #4
 8001f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	3304      	adds	r3, #4
 8001f52:	2b06      	cmp	r3, #6
 8001f54:	d902      	bls.n	8001f5c <NVIC_EncodePriority+0x30>
 8001f56:	69fb      	ldr	r3, [r7, #28]
 8001f58:	3b03      	subs	r3, #3
 8001f5a:	e000      	b.n	8001f5e <NVIC_EncodePriority+0x32>
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f60:	f04f 32ff 	mov.w	r2, #4294967295
 8001f64:	69bb      	ldr	r3, [r7, #24]
 8001f66:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6a:	43da      	mvns	r2, r3
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	401a      	ands	r2, r3
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f74:	f04f 31ff 	mov.w	r1, #4294967295
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7e:	43d9      	mvns	r1, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f84:	4313      	orrs	r3, r2
         );
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3724      	adds	r7, #36	; 0x24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
	...

08001f94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fa4:	d301      	bcc.n	8001faa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e00f      	b.n	8001fca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001faa:	4a0a      	ldr	r2, [pc, #40]	; (8001fd4 <SysTick_Config+0x40>)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fb2:	210f      	movs	r1, #15
 8001fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb8:	f7ff ff8e 	bl	8001ed8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fbc:	4b05      	ldr	r3, [pc, #20]	; (8001fd4 <SysTick_Config+0x40>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fc2:	4b04      	ldr	r3, [pc, #16]	; (8001fd4 <SysTick_Config+0x40>)
 8001fc4:	2207      	movs	r2, #7
 8001fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fc8:	2300      	movs	r3, #0
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	e000e010 	.word	0xe000e010

08001fd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f7ff ff29 	bl	8001e38 <__NVIC_SetPriorityGrouping>
}
 8001fe6:	bf00      	nop
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b086      	sub	sp, #24
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	60b9      	str	r1, [r7, #8]
 8001ff8:	607a      	str	r2, [r7, #4]
 8001ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002000:	f7ff ff3e 	bl	8001e80 <__NVIC_GetPriorityGrouping>
 8002004:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	68b9      	ldr	r1, [r7, #8]
 800200a:	6978      	ldr	r0, [r7, #20]
 800200c:	f7ff ff8e 	bl	8001f2c <NVIC_EncodePriority>
 8002010:	4602      	mov	r2, r0
 8002012:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002016:	4611      	mov	r1, r2
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff ff5d 	bl	8001ed8 <__NVIC_SetPriority>
}
 800201e:	bf00      	nop
 8002020:	3718      	adds	r7, #24
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002026:	b580      	push	{r7, lr}
 8002028:	b082      	sub	sp, #8
 800202a:	af00      	add	r7, sp, #0
 800202c:	4603      	mov	r3, r0
 800202e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff ff31 	bl	8001e9c <__NVIC_EnableIRQ>
}
 800203a:	bf00      	nop
 800203c:	3708      	adds	r7, #8
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b082      	sub	sp, #8
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f7ff ffa2 	bl	8001f94 <SysTick_Config>
 8002050:	4603      	mov	r3, r0
}
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
	...

0800205c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e0ac      	b.n	80021c8 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f000 f8b2 	bl	80021dc <DFSDM_GetChannelFromInstance>
 8002078:	4603      	mov	r3, r0
 800207a:	4a55      	ldr	r2, [pc, #340]	; (80021d0 <HAL_DFSDM_ChannelInit+0x174>)
 800207c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e09f      	b.n	80021c8 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f7ff f89b 	bl	80011c4 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800208e:	4b51      	ldr	r3, [pc, #324]	; (80021d4 <HAL_DFSDM_ChannelInit+0x178>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	3301      	adds	r3, #1
 8002094:	4a4f      	ldr	r2, [pc, #316]	; (80021d4 <HAL_DFSDM_ChannelInit+0x178>)
 8002096:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8002098:	4b4e      	ldr	r3, [pc, #312]	; (80021d4 <HAL_DFSDM_ChannelInit+0x178>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d125      	bne.n	80020ec <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80020a0:	4b4d      	ldr	r3, [pc, #308]	; (80021d8 <HAL_DFSDM_ChannelInit+0x17c>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a4c      	ldr	r2, [pc, #304]	; (80021d8 <HAL_DFSDM_ChannelInit+0x17c>)
 80020a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80020aa:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80020ac:	4b4a      	ldr	r3, [pc, #296]	; (80021d8 <HAL_DFSDM_ChannelInit+0x17c>)
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	4948      	ldr	r1, [pc, #288]	; (80021d8 <HAL_DFSDM_ChannelInit+0x17c>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80020ba:	4b47      	ldr	r3, [pc, #284]	; (80021d8 <HAL_DFSDM_ChannelInit+0x17c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a46      	ldr	r2, [pc, #280]	; (80021d8 <HAL_DFSDM_ChannelInit+0x17c>)
 80020c0:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80020c4:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	791b      	ldrb	r3, [r3, #4]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d108      	bne.n	80020e0 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 80020ce:	4b42      	ldr	r3, [pc, #264]	; (80021d8 <HAL_DFSDM_ChannelInit+0x17c>)
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	3b01      	subs	r3, #1
 80020d8:	041b      	lsls	r3, r3, #16
 80020da:	493f      	ldr	r1, [pc, #252]	; (80021d8 <HAL_DFSDM_ChannelInit+0x17c>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80020e0:	4b3d      	ldr	r3, [pc, #244]	; (80021d8 <HAL_DFSDM_ChannelInit+0x17c>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a3c      	ldr	r2, [pc, #240]	; (80021d8 <HAL_DFSDM_ChannelInit+0x17c>)
 80020e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80020ea:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80020fa:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	6819      	ldr	r1, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800210a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002110:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	430a      	orrs	r2, r1
 8002118:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f022 020f 	bic.w	r2, r2, #15
 8002128:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6819      	ldr	r1, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002138:	431a      	orrs	r2, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	430a      	orrs	r2, r1
 8002140:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002150:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	6899      	ldr	r1, [r3, #8]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002160:	3b01      	subs	r3, #1
 8002162:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002164:	431a      	orrs	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	430a      	orrs	r2, r1
 800216c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	685a      	ldr	r2, [r3, #4]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f002 0207 	and.w	r2, r2, #7
 800217c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	6859      	ldr	r1, [r3, #4]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002188:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002190:	431a      	orrs	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	430a      	orrs	r2, r1
 8002198:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681a      	ldr	r2, [r3, #0]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021a8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2201      	movs	r2, #1
 80021ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 f810 	bl	80021dc <DFSDM_GetChannelFromInstance>
 80021bc:	4602      	mov	r2, r0
 80021be:	4904      	ldr	r1, [pc, #16]	; (80021d0 <HAL_DFSDM_ChannelInit+0x174>)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	2000093c 	.word	0x2000093c
 80021d4:	20000938 	.word	0x20000938
 80021d8:	40016000 	.word	0x40016000

080021dc <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a1c      	ldr	r2, [pc, #112]	; (8002258 <DFSDM_GetChannelFromInstance+0x7c>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d102      	bne.n	80021f2 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80021ec:	2300      	movs	r3, #0
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	e02b      	b.n	800224a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a19      	ldr	r2, [pc, #100]	; (800225c <DFSDM_GetChannelFromInstance+0x80>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d102      	bne.n	8002200 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80021fa:	2301      	movs	r3, #1
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	e024      	b.n	800224a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a17      	ldr	r2, [pc, #92]	; (8002260 <DFSDM_GetChannelFromInstance+0x84>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d102      	bne.n	800220e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002208:	2302      	movs	r3, #2
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	e01d      	b.n	800224a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a14      	ldr	r2, [pc, #80]	; (8002264 <DFSDM_GetChannelFromInstance+0x88>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d102      	bne.n	800221c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002216:	2304      	movs	r3, #4
 8002218:	60fb      	str	r3, [r7, #12]
 800221a:	e016      	b.n	800224a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a12      	ldr	r2, [pc, #72]	; (8002268 <DFSDM_GetChannelFromInstance+0x8c>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d102      	bne.n	800222a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002224:	2305      	movs	r3, #5
 8002226:	60fb      	str	r3, [r7, #12]
 8002228:	e00f      	b.n	800224a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a0f      	ldr	r2, [pc, #60]	; (800226c <DFSDM_GetChannelFromInstance+0x90>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d102      	bne.n	8002238 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002232:	2306      	movs	r3, #6
 8002234:	60fb      	str	r3, [r7, #12]
 8002236:	e008      	b.n	800224a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a0d      	ldr	r2, [pc, #52]	; (8002270 <DFSDM_GetChannelFromInstance+0x94>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d102      	bne.n	8002246 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002240:	2307      	movs	r3, #7
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	e001      	b.n	800224a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002246:	2303      	movs	r3, #3
 8002248:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800224a:	68fb      	ldr	r3, [r7, #12]
}
 800224c:	4618      	mov	r0, r3
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	40016000 	.word	0x40016000
 800225c:	40016020 	.word	0x40016020
 8002260:	40016040 	.word	0x40016040
 8002264:	40016080 	.word	0x40016080
 8002268:	400160a0 	.word	0x400160a0
 800226c:	400160c0 	.word	0x400160c0
 8002270:	400160e0 	.word	0x400160e0

08002274 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002274:	b480      	push	{r7}
 8002276:	b087      	sub	sp, #28
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800227e:	2300      	movs	r3, #0
 8002280:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002282:	e17f      	b.n	8002584 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	2101      	movs	r1, #1
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	fa01 f303 	lsl.w	r3, r1, r3
 8002290:	4013      	ands	r3, r2
 8002292:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2b00      	cmp	r3, #0
 8002298:	f000 8171 	beq.w	800257e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f003 0303 	and.w	r3, r3, #3
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d005      	beq.n	80022b4 <HAL_GPIO_Init+0x40>
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f003 0303 	and.w	r3, r3, #3
 80022b0:	2b02      	cmp	r3, #2
 80022b2:	d130      	bne.n	8002316 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	2203      	movs	r2, #3
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	43db      	mvns	r3, r3
 80022c6:	693a      	ldr	r2, [r7, #16]
 80022c8:	4013      	ands	r3, r2
 80022ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	68da      	ldr	r2, [r3, #12]
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	693a      	ldr	r2, [r7, #16]
 80022da:	4313      	orrs	r3, r2
 80022dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022ea:	2201      	movs	r2, #1
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43db      	mvns	r3, r3
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	4013      	ands	r3, r2
 80022f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	091b      	lsrs	r3, r3, #4
 8002300:	f003 0201 	and.w	r2, r3, #1
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	fa02 f303 	lsl.w	r3, r2, r3
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	4313      	orrs	r3, r2
 800230e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f003 0303 	and.w	r3, r3, #3
 800231e:	2b03      	cmp	r3, #3
 8002320:	d118      	bne.n	8002354 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002326:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002328:	2201      	movs	r2, #1
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	4013      	ands	r3, r2
 8002336:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	08db      	lsrs	r3, r3, #3
 800233e:	f003 0201 	and.w	r2, r3, #1
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	4313      	orrs	r3, r2
 800234c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f003 0303 	and.w	r3, r3, #3
 800235c:	2b03      	cmp	r3, #3
 800235e:	d017      	beq.n	8002390 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	005b      	lsls	r3, r3, #1
 800236a:	2203      	movs	r2, #3
 800236c:	fa02 f303 	lsl.w	r3, r2, r3
 8002370:	43db      	mvns	r3, r3
 8002372:	693a      	ldr	r2, [r7, #16]
 8002374:	4013      	ands	r3, r2
 8002376:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	005b      	lsls	r3, r3, #1
 8002380:	fa02 f303 	lsl.w	r3, r2, r3
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	4313      	orrs	r3, r2
 8002388:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f003 0303 	and.w	r3, r3, #3
 8002398:	2b02      	cmp	r3, #2
 800239a:	d123      	bne.n	80023e4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	08da      	lsrs	r2, r3, #3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	3208      	adds	r2, #8
 80023a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	009b      	lsls	r3, r3, #2
 80023b2:	220f      	movs	r2, #15
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	43db      	mvns	r3, r3
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	4013      	ands	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	691a      	ldr	r2, [r3, #16]
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	08da      	lsrs	r2, r3, #3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	3208      	adds	r2, #8
 80023de:	6939      	ldr	r1, [r7, #16]
 80023e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023ea:	697b      	ldr	r3, [r7, #20]
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	2203      	movs	r2, #3
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	43db      	mvns	r3, r3
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	4013      	ands	r3, r2
 80023fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f003 0203 	and.w	r2, r3, #3
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	fa02 f303 	lsl.w	r3, r2, r3
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	4313      	orrs	r3, r2
 8002410:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	693a      	ldr	r2, [r7, #16]
 8002416:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002420:	2b00      	cmp	r3, #0
 8002422:	f000 80ac 	beq.w	800257e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002426:	4b5f      	ldr	r3, [pc, #380]	; (80025a4 <HAL_GPIO_Init+0x330>)
 8002428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800242a:	4a5e      	ldr	r2, [pc, #376]	; (80025a4 <HAL_GPIO_Init+0x330>)
 800242c:	f043 0301 	orr.w	r3, r3, #1
 8002430:	6613      	str	r3, [r2, #96]	; 0x60
 8002432:	4b5c      	ldr	r3, [pc, #368]	; (80025a4 <HAL_GPIO_Init+0x330>)
 8002434:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	60bb      	str	r3, [r7, #8]
 800243c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800243e:	4a5a      	ldr	r2, [pc, #360]	; (80025a8 <HAL_GPIO_Init+0x334>)
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	089b      	lsrs	r3, r3, #2
 8002444:	3302      	adds	r3, #2
 8002446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800244a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	f003 0303 	and.w	r3, r3, #3
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	220f      	movs	r2, #15
 8002456:	fa02 f303 	lsl.w	r3, r2, r3
 800245a:	43db      	mvns	r3, r3
 800245c:	693a      	ldr	r2, [r7, #16]
 800245e:	4013      	ands	r3, r2
 8002460:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002468:	d025      	beq.n	80024b6 <HAL_GPIO_Init+0x242>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4a4f      	ldr	r2, [pc, #316]	; (80025ac <HAL_GPIO_Init+0x338>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d01f      	beq.n	80024b2 <HAL_GPIO_Init+0x23e>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a4e      	ldr	r2, [pc, #312]	; (80025b0 <HAL_GPIO_Init+0x33c>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d019      	beq.n	80024ae <HAL_GPIO_Init+0x23a>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a4d      	ldr	r2, [pc, #308]	; (80025b4 <HAL_GPIO_Init+0x340>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d013      	beq.n	80024aa <HAL_GPIO_Init+0x236>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a4c      	ldr	r2, [pc, #304]	; (80025b8 <HAL_GPIO_Init+0x344>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d00d      	beq.n	80024a6 <HAL_GPIO_Init+0x232>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a4b      	ldr	r2, [pc, #300]	; (80025bc <HAL_GPIO_Init+0x348>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d007      	beq.n	80024a2 <HAL_GPIO_Init+0x22e>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a4a      	ldr	r2, [pc, #296]	; (80025c0 <HAL_GPIO_Init+0x34c>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d101      	bne.n	800249e <HAL_GPIO_Init+0x22a>
 800249a:	2306      	movs	r3, #6
 800249c:	e00c      	b.n	80024b8 <HAL_GPIO_Init+0x244>
 800249e:	2307      	movs	r3, #7
 80024a0:	e00a      	b.n	80024b8 <HAL_GPIO_Init+0x244>
 80024a2:	2305      	movs	r3, #5
 80024a4:	e008      	b.n	80024b8 <HAL_GPIO_Init+0x244>
 80024a6:	2304      	movs	r3, #4
 80024a8:	e006      	b.n	80024b8 <HAL_GPIO_Init+0x244>
 80024aa:	2303      	movs	r3, #3
 80024ac:	e004      	b.n	80024b8 <HAL_GPIO_Init+0x244>
 80024ae:	2302      	movs	r3, #2
 80024b0:	e002      	b.n	80024b8 <HAL_GPIO_Init+0x244>
 80024b2:	2301      	movs	r3, #1
 80024b4:	e000      	b.n	80024b8 <HAL_GPIO_Init+0x244>
 80024b6:	2300      	movs	r3, #0
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	f002 0203 	and.w	r2, r2, #3
 80024be:	0092      	lsls	r2, r2, #2
 80024c0:	4093      	lsls	r3, r2
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024c8:	4937      	ldr	r1, [pc, #220]	; (80025a8 <HAL_GPIO_Init+0x334>)
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	089b      	lsrs	r3, r3, #2
 80024ce:	3302      	adds	r3, #2
 80024d0:	693a      	ldr	r2, [r7, #16]
 80024d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024d6:	4b3b      	ldr	r3, [pc, #236]	; (80025c4 <HAL_GPIO_Init+0x350>)
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	43db      	mvns	r3, r3
 80024e0:	693a      	ldr	r2, [r7, #16]
 80024e2:	4013      	ands	r3, r2
 80024e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d003      	beq.n	80024fa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80024f2:	693a      	ldr	r2, [r7, #16]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024fa:	4a32      	ldr	r2, [pc, #200]	; (80025c4 <HAL_GPIO_Init+0x350>)
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002500:	4b30      	ldr	r3, [pc, #192]	; (80025c4 <HAL_GPIO_Init+0x350>)
 8002502:	68db      	ldr	r3, [r3, #12]
 8002504:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	43db      	mvns	r3, r3
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	4013      	ands	r3, r2
 800250e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d003      	beq.n	8002524 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	4313      	orrs	r3, r2
 8002522:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002524:	4a27      	ldr	r2, [pc, #156]	; (80025c4 <HAL_GPIO_Init+0x350>)
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800252a:	4b26      	ldr	r3, [pc, #152]	; (80025c4 <HAL_GPIO_Init+0x350>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	43db      	mvns	r3, r3
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	4013      	ands	r3, r2
 8002538:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d003      	beq.n	800254e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	4313      	orrs	r3, r2
 800254c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800254e:	4a1d      	ldr	r2, [pc, #116]	; (80025c4 <HAL_GPIO_Init+0x350>)
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002554:	4b1b      	ldr	r3, [pc, #108]	; (80025c4 <HAL_GPIO_Init+0x350>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	43db      	mvns	r3, r3
 800255e:	693a      	ldr	r2, [r7, #16]
 8002560:	4013      	ands	r3, r2
 8002562:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d003      	beq.n	8002578 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002570:	693a      	ldr	r2, [r7, #16]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	4313      	orrs	r3, r2
 8002576:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002578:	4a12      	ldr	r2, [pc, #72]	; (80025c4 <HAL_GPIO_Init+0x350>)
 800257a:	693b      	ldr	r3, [r7, #16]
 800257c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	3301      	adds	r3, #1
 8002582:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	fa22 f303 	lsr.w	r3, r2, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	f47f ae78 	bne.w	8002284 <HAL_GPIO_Init+0x10>
  }
}
 8002594:	bf00      	nop
 8002596:	bf00      	nop
 8002598:	371c      	adds	r7, #28
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	40021000 	.word	0x40021000
 80025a8:	40010000 	.word	0x40010000
 80025ac:	48000400 	.word	0x48000400
 80025b0:	48000800 	.word	0x48000800
 80025b4:	48000c00 	.word	0x48000c00
 80025b8:	48001000 	.word	0x48001000
 80025bc:	48001400 	.word	0x48001400
 80025c0:	48001800 	.word	0x48001800
 80025c4:	40010400 	.word	0x40010400

080025c8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b087      	sub	sp, #28
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025d2:	2300      	movs	r3, #0
 80025d4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80025d6:	e0cd      	b.n	8002774 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80025d8:	2201      	movs	r2, #1
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	4013      	ands	r3, r2
 80025e4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 80c0 	beq.w	800276e <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 80025ee:	4a68      	ldr	r2, [pc, #416]	; (8002790 <HAL_GPIO_DeInit+0x1c8>)
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	089b      	lsrs	r3, r3, #2
 80025f4:	3302      	adds	r3, #2
 80025f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025fa:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	f003 0303 	and.w	r3, r3, #3
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	220f      	movs	r2, #15
 8002606:	fa02 f303 	lsl.w	r3, r2, r3
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	4013      	ands	r3, r2
 800260e:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002616:	d025      	beq.n	8002664 <HAL_GPIO_DeInit+0x9c>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a5e      	ldr	r2, [pc, #376]	; (8002794 <HAL_GPIO_DeInit+0x1cc>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d01f      	beq.n	8002660 <HAL_GPIO_DeInit+0x98>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a5d      	ldr	r2, [pc, #372]	; (8002798 <HAL_GPIO_DeInit+0x1d0>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d019      	beq.n	800265c <HAL_GPIO_DeInit+0x94>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a5c      	ldr	r2, [pc, #368]	; (800279c <HAL_GPIO_DeInit+0x1d4>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d013      	beq.n	8002658 <HAL_GPIO_DeInit+0x90>
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a5b      	ldr	r2, [pc, #364]	; (80027a0 <HAL_GPIO_DeInit+0x1d8>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d00d      	beq.n	8002654 <HAL_GPIO_DeInit+0x8c>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a5a      	ldr	r2, [pc, #360]	; (80027a4 <HAL_GPIO_DeInit+0x1dc>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d007      	beq.n	8002650 <HAL_GPIO_DeInit+0x88>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a59      	ldr	r2, [pc, #356]	; (80027a8 <HAL_GPIO_DeInit+0x1e0>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d101      	bne.n	800264c <HAL_GPIO_DeInit+0x84>
 8002648:	2306      	movs	r3, #6
 800264a:	e00c      	b.n	8002666 <HAL_GPIO_DeInit+0x9e>
 800264c:	2307      	movs	r3, #7
 800264e:	e00a      	b.n	8002666 <HAL_GPIO_DeInit+0x9e>
 8002650:	2305      	movs	r3, #5
 8002652:	e008      	b.n	8002666 <HAL_GPIO_DeInit+0x9e>
 8002654:	2304      	movs	r3, #4
 8002656:	e006      	b.n	8002666 <HAL_GPIO_DeInit+0x9e>
 8002658:	2303      	movs	r3, #3
 800265a:	e004      	b.n	8002666 <HAL_GPIO_DeInit+0x9e>
 800265c:	2302      	movs	r3, #2
 800265e:	e002      	b.n	8002666 <HAL_GPIO_DeInit+0x9e>
 8002660:	2301      	movs	r3, #1
 8002662:	e000      	b.n	8002666 <HAL_GPIO_DeInit+0x9e>
 8002664:	2300      	movs	r3, #0
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	f002 0203 	and.w	r2, r2, #3
 800266c:	0092      	lsls	r2, r2, #2
 800266e:	4093      	lsls	r3, r2
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	429a      	cmp	r2, r3
 8002674:	d132      	bne.n	80026dc <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002676:	4b4d      	ldr	r3, [pc, #308]	; (80027ac <HAL_GPIO_DeInit+0x1e4>)
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	43db      	mvns	r3, r3
 800267e:	494b      	ldr	r1, [pc, #300]	; (80027ac <HAL_GPIO_DeInit+0x1e4>)
 8002680:	4013      	ands	r3, r2
 8002682:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002684:	4b49      	ldr	r3, [pc, #292]	; (80027ac <HAL_GPIO_DeInit+0x1e4>)
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	43db      	mvns	r3, r3
 800268c:	4947      	ldr	r1, [pc, #284]	; (80027ac <HAL_GPIO_DeInit+0x1e4>)
 800268e:	4013      	ands	r3, r2
 8002690:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002692:	4b46      	ldr	r3, [pc, #280]	; (80027ac <HAL_GPIO_DeInit+0x1e4>)
 8002694:	68da      	ldr	r2, [r3, #12]
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	43db      	mvns	r3, r3
 800269a:	4944      	ldr	r1, [pc, #272]	; (80027ac <HAL_GPIO_DeInit+0x1e4>)
 800269c:	4013      	ands	r3, r2
 800269e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80026a0:	4b42      	ldr	r3, [pc, #264]	; (80027ac <HAL_GPIO_DeInit+0x1e4>)
 80026a2:	689a      	ldr	r2, [r3, #8]
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	43db      	mvns	r3, r3
 80026a8:	4940      	ldr	r1, [pc, #256]	; (80027ac <HAL_GPIO_DeInit+0x1e4>)
 80026aa:	4013      	ands	r3, r2
 80026ac:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	f003 0303 	and.w	r3, r3, #3
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	220f      	movs	r2, #15
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80026be:	4a34      	ldr	r2, [pc, #208]	; (8002790 <HAL_GPIO_DeInit+0x1c8>)
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	089b      	lsrs	r3, r3, #2
 80026c4:	3302      	adds	r3, #2
 80026c6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	43da      	mvns	r2, r3
 80026ce:	4830      	ldr	r0, [pc, #192]	; (8002790 <HAL_GPIO_DeInit+0x1c8>)
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	089b      	lsrs	r3, r3, #2
 80026d4:	400a      	ands	r2, r1
 80026d6:	3302      	adds	r3, #2
 80026d8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	2103      	movs	r1, #3
 80026e6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ea:	431a      	orrs	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	08da      	lsrs	r2, r3, #3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	3208      	adds	r2, #8
 80026f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	220f      	movs	r2, #15
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	43db      	mvns	r3, r3
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	08d2      	lsrs	r2, r2, #3
 8002710:	4019      	ands	r1, r3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	3208      	adds	r2, #8
 8002716:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	689a      	ldr	r2, [r3, #8]
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	2103      	movs	r1, #3
 8002724:	fa01 f303 	lsl.w	r3, r1, r3
 8002728:	43db      	mvns	r3, r3
 800272a:	401a      	ands	r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685a      	ldr	r2, [r3, #4]
 8002734:	2101      	movs	r1, #1
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	fa01 f303 	lsl.w	r3, r1, r3
 800273c:	43db      	mvns	r3, r3
 800273e:	401a      	ands	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68da      	ldr	r2, [r3, #12]
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	2103      	movs	r1, #3
 800274e:	fa01 f303 	lsl.w	r3, r1, r3
 8002752:	43db      	mvns	r3, r3
 8002754:	401a      	ands	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800275e:	2101      	movs	r1, #1
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	fa01 f303 	lsl.w	r3, r1, r3
 8002766:	43db      	mvns	r3, r3
 8002768:	401a      	ands	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	3301      	adds	r3, #1
 8002772:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002774:	683a      	ldr	r2, [r7, #0]
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	fa22 f303 	lsr.w	r3, r2, r3
 800277c:	2b00      	cmp	r3, #0
 800277e:	f47f af2b 	bne.w	80025d8 <HAL_GPIO_DeInit+0x10>
  }
}
 8002782:	bf00      	nop
 8002784:	bf00      	nop
 8002786:	371c      	adds	r7, #28
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr
 8002790:	40010000 	.word	0x40010000
 8002794:	48000400 	.word	0x48000400
 8002798:	48000800 	.word	0x48000800
 800279c:	48000c00 	.word	0x48000c00
 80027a0:	48001000 	.word	0x48001000
 80027a4:	48001400 	.word	0x48001400
 80027a8:	48001800 	.word	0x48001800
 80027ac:	40010400 	.word	0x40010400

080027b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	460b      	mov	r3, r1
 80027ba:	807b      	strh	r3, [r7, #2]
 80027bc:	4613      	mov	r3, r2
 80027be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027c0:	787b      	ldrb	r3, [r7, #1]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d003      	beq.n	80027ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027c6:	887a      	ldrh	r2, [r7, #2]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027cc:	e002      	b.n	80027d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027ce:	887a      	ldrh	r2, [r7, #2]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027d4:	bf00      	nop
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	460b      	mov	r3, r1
 80027ea:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	695b      	ldr	r3, [r3, #20]
 80027f0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027f2:	887a      	ldrh	r2, [r7, #2]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	4013      	ands	r3, r2
 80027f8:	041a      	lsls	r2, r3, #16
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	43d9      	mvns	r1, r3
 80027fe:	887b      	ldrh	r3, [r7, #2]
 8002800:	400b      	ands	r3, r1
 8002802:	431a      	orrs	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	619a      	str	r2, [r3, #24]
}
 8002808:	bf00      	nop
 800280a:	3714      	adds	r7, #20
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0
 800281a:	4603      	mov	r3, r0
 800281c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800281e:	4b08      	ldr	r3, [pc, #32]	; (8002840 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002820:	695a      	ldr	r2, [r3, #20]
 8002822:	88fb      	ldrh	r3, [r7, #6]
 8002824:	4013      	ands	r3, r2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d006      	beq.n	8002838 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800282a:	4a05      	ldr	r2, [pc, #20]	; (8002840 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800282c:	88fb      	ldrh	r3, [r7, #6]
 800282e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002830:	88fb      	ldrh	r3, [r7, #6]
 8002832:	4618      	mov	r0, r3
 8002834:	f000 f806 	bl	8002844 <HAL_GPIO_EXTI_Callback>
  }
}
 8002838:	bf00      	nop
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	40010400 	.word	0x40010400

08002844 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	4603      	mov	r3, r0
 800284c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800285a:	b580      	push	{r7, lr}
 800285c:	b082      	sub	sp, #8
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d101      	bne.n	800286c <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e08d      	b.n	8002988 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002872:	b2db      	uxtb	r3, r3
 8002874:	2b00      	cmp	r3, #0
 8002876:	d106      	bne.n	8002886 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f7fe fd03 	bl	800128c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2224      	movs	r2, #36	; 0x24
 800288a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 0201 	bic.w	r2, r2, #1
 800289c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685a      	ldr	r2, [r3, #4]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028aa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	689a      	ldr	r2, [r3, #8]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80028ba:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d107      	bne.n	80028d4 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80028d0:	609a      	str	r2, [r3, #8]
 80028d2:	e006      	b.n	80028e2 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80028e0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	2b02      	cmp	r3, #2
 80028e8:	d108      	bne.n	80028fc <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028f8:	605a      	str	r2, [r3, #4]
 80028fa:	e007      	b.n	800290c <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	685a      	ldr	r2, [r3, #4]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800290a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	6812      	ldr	r2, [r2, #0]
 8002916:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800291a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800291e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	68da      	ldr	r2, [r3, #12]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800292e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	691a      	ldr	r2, [r3, #16]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	695b      	ldr	r3, [r3, #20]
 8002938:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	699b      	ldr	r3, [r3, #24]
 8002940:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	430a      	orrs	r2, r1
 8002948:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	69d9      	ldr	r1, [r3, #28]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6a1a      	ldr	r2, [r3, #32]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	430a      	orrs	r2, r1
 8002958:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f042 0201 	orr.w	r2, r2, #1
 8002968:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2220      	movs	r2, #32
 8002974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002986:	2300      	movs	r3, #0
}
 8002988:	4618      	mov	r0, r3
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e021      	b.n	80029e6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2224      	movs	r2, #36	; 0x24
 80029a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 0201 	bic.w	r2, r2, #1
 80029b8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7fe fcc4 	bl	8001348 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3708      	adds	r7, #8
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
	...

080029f0 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b088      	sub	sp, #32
 80029f4:	af02      	add	r7, sp, #8
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	4608      	mov	r0, r1
 80029fa:	4611      	mov	r1, r2
 80029fc:	461a      	mov	r2, r3
 80029fe:	4603      	mov	r3, r0
 8002a00:	817b      	strh	r3, [r7, #10]
 8002a02:	460b      	mov	r3, r1
 8002a04:	813b      	strh	r3, [r7, #8]
 8002a06:	4613      	mov	r3, r2
 8002a08:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b20      	cmp	r3, #32
 8002a14:	f040 80f9 	bne.w	8002c0a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a18:	6a3b      	ldr	r3, [r7, #32]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d002      	beq.n	8002a24 <HAL_I2C_Mem_Write+0x34>
 8002a1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d105      	bne.n	8002a30 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a2a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e0ed      	b.n	8002c0c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d101      	bne.n	8002a3e <HAL_I2C_Mem_Write+0x4e>
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	e0e6      	b.n	8002c0c <HAL_I2C_Mem_Write+0x21c>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2201      	movs	r2, #1
 8002a42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a46:	f7ff f9c7 	bl	8001dd8 <HAL_GetTick>
 8002a4a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	2319      	movs	r3, #25
 8002a52:	2201      	movs	r2, #1
 8002a54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f000 fac3 	bl	8002fe4 <I2C_WaitOnFlagUntilTimeout>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d001      	beq.n	8002a68 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e0d1      	b.n	8002c0c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2221      	movs	r2, #33	; 0x21
 8002a6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	2240      	movs	r2, #64	; 0x40
 8002a74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6a3a      	ldr	r2, [r7, #32]
 8002a82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a90:	88f8      	ldrh	r0, [r7, #6]
 8002a92:	893a      	ldrh	r2, [r7, #8]
 8002a94:	8979      	ldrh	r1, [r7, #10]
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	9301      	str	r3, [sp, #4]
 8002a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f000 f9d3 	bl	8002e4c <I2C_RequestMemoryWrite>
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d005      	beq.n	8002ab8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	e0a9      	b.n	8002c0c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	2bff      	cmp	r3, #255	; 0xff
 8002ac0:	d90e      	bls.n	8002ae0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	22ff      	movs	r2, #255	; 0xff
 8002ac6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	8979      	ldrh	r1, [r7, #10]
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	9300      	str	r3, [sp, #0]
 8002ad4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f000 fc3d 	bl	8003358 <I2C_TransferConfig>
 8002ade:	e00f      	b.n	8002b00 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aee:	b2da      	uxtb	r2, r3
 8002af0:	8979      	ldrh	r1, [r7, #10]
 8002af2:	2300      	movs	r3, #0
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002afa:	68f8      	ldr	r0, [r7, #12]
 8002afc:	f000 fc2c 	bl	8003358 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f000 fabc 	bl	8003082 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e07b      	b.n	8002c0c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b18:	781a      	ldrb	r2, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b24:	1c5a      	adds	r2, r3, #1
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	3b01      	subs	r3, #1
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d034      	beq.n	8002bb8 <HAL_I2C_Mem_Write+0x1c8>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d130      	bne.n	8002bb8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	9300      	str	r3, [sp, #0]
 8002b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	2180      	movs	r1, #128	; 0x80
 8002b60:	68f8      	ldr	r0, [r7, #12]
 8002b62:	f000 fa3f 	bl	8002fe4 <I2C_WaitOnFlagUntilTimeout>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e04d      	b.n	8002c0c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	2bff      	cmp	r3, #255	; 0xff
 8002b78:	d90e      	bls.n	8002b98 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	22ff      	movs	r2, #255	; 0xff
 8002b7e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b84:	b2da      	uxtb	r2, r3
 8002b86:	8979      	ldrh	r1, [r7, #10]
 8002b88:	2300      	movs	r3, #0
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f000 fbe1 	bl	8003358 <I2C_TransferConfig>
 8002b96:	e00f      	b.n	8002bb8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba6:	b2da      	uxtb	r2, r3
 8002ba8:	8979      	ldrh	r1, [r7, #10]
 8002baa:	2300      	movs	r3, #0
 8002bac:	9300      	str	r3, [sp, #0]
 8002bae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f000 fbd0 	bl	8003358 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bbc:	b29b      	uxth	r3, r3
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d19e      	bne.n	8002b00 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f000 faa2 	bl	8003110 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e01a      	b.n	8002c0c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2220      	movs	r2, #32
 8002bdc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	6859      	ldr	r1, [r3, #4]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	4b0a      	ldr	r3, [pc, #40]	; (8002c14 <HAL_I2C_Mem_Write+0x224>)
 8002bea:	400b      	ands	r3, r1
 8002bec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2220      	movs	r2, #32
 8002bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c06:	2300      	movs	r3, #0
 8002c08:	e000      	b.n	8002c0c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002c0a:	2302      	movs	r3, #2
  }
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	fe00e800 	.word	0xfe00e800

08002c18 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b088      	sub	sp, #32
 8002c1c:	af02      	add	r7, sp, #8
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	4608      	mov	r0, r1
 8002c22:	4611      	mov	r1, r2
 8002c24:	461a      	mov	r2, r3
 8002c26:	4603      	mov	r3, r0
 8002c28:	817b      	strh	r3, [r7, #10]
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	813b      	strh	r3, [r7, #8]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	2b20      	cmp	r3, #32
 8002c3c:	f040 80fd 	bne.w	8002e3a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c40:	6a3b      	ldr	r3, [r7, #32]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d002      	beq.n	8002c4c <HAL_I2C_Mem_Read+0x34>
 8002c46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d105      	bne.n	8002c58 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c52:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	e0f1      	b.n	8002e3c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d101      	bne.n	8002c66 <HAL_I2C_Mem_Read+0x4e>
 8002c62:	2302      	movs	r3, #2
 8002c64:	e0ea      	b.n	8002e3c <HAL_I2C_Mem_Read+0x224>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002c6e:	f7ff f8b3 	bl	8001dd8 <HAL_GetTick>
 8002c72:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	9300      	str	r3, [sp, #0]
 8002c78:	2319      	movs	r3, #25
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c80:	68f8      	ldr	r0, [r7, #12]
 8002c82:	f000 f9af 	bl	8002fe4 <I2C_WaitOnFlagUntilTimeout>
 8002c86:	4603      	mov	r3, r0
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d001      	beq.n	8002c90 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e0d5      	b.n	8002e3c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2222      	movs	r2, #34	; 0x22
 8002c94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2240      	movs	r2, #64	; 0x40
 8002c9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6a3a      	ldr	r2, [r7, #32]
 8002caa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002cb0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002cb8:	88f8      	ldrh	r0, [r7, #6]
 8002cba:	893a      	ldrh	r2, [r7, #8]
 8002cbc:	8979      	ldrh	r1, [r7, #10]
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	9301      	str	r3, [sp, #4]
 8002cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f000 f913 	bl	8002ef4 <I2C_RequestMemoryRead>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d005      	beq.n	8002ce0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e0ad      	b.n	8002e3c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	2bff      	cmp	r3, #255	; 0xff
 8002ce8:	d90e      	bls.n	8002d08 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	22ff      	movs	r2, #255	; 0xff
 8002cee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	8979      	ldrh	r1, [r7, #10]
 8002cf8:	4b52      	ldr	r3, [pc, #328]	; (8002e44 <HAL_I2C_Mem_Read+0x22c>)
 8002cfa:	9300      	str	r3, [sp, #0]
 8002cfc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f000 fb29 	bl	8003358 <I2C_TransferConfig>
 8002d06:	e00f      	b.n	8002d28 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d0c:	b29a      	uxth	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	8979      	ldrh	r1, [r7, #10]
 8002d1a:	4b4a      	ldr	r3, [pc, #296]	; (8002e44 <HAL_I2C_Mem_Read+0x22c>)
 8002d1c:	9300      	str	r3, [sp, #0]
 8002d1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f000 fb18 	bl	8003358 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d2e:	2200      	movs	r2, #0
 8002d30:	2104      	movs	r1, #4
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f000 f956 	bl	8002fe4 <I2C_WaitOnFlagUntilTimeout>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e07c      	b.n	8002e3c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4c:	b2d2      	uxtb	r2, r2
 8002d4e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d54:	1c5a      	adds	r2, r3, #1
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	b29a      	uxth	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d034      	beq.n	8002de8 <HAL_I2C_Mem_Read+0x1d0>
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d130      	bne.n	8002de8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	9300      	str	r3, [sp, #0]
 8002d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	2180      	movs	r1, #128	; 0x80
 8002d90:	68f8      	ldr	r0, [r7, #12]
 8002d92:	f000 f927 	bl	8002fe4 <I2C_WaitOnFlagUntilTimeout>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e04d      	b.n	8002e3c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	2bff      	cmp	r3, #255	; 0xff
 8002da8:	d90e      	bls.n	8002dc8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	22ff      	movs	r2, #255	; 0xff
 8002dae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002db4:	b2da      	uxtb	r2, r3
 8002db6:	8979      	ldrh	r1, [r7, #10]
 8002db8:	2300      	movs	r3, #0
 8002dba:	9300      	str	r3, [sp, #0]
 8002dbc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f000 fac9 	bl	8003358 <I2C_TransferConfig>
 8002dc6:	e00f      	b.n	8002de8 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dcc:	b29a      	uxth	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd6:	b2da      	uxtb	r2, r3
 8002dd8:	8979      	ldrh	r1, [r7, #10]
 8002dda:	2300      	movs	r3, #0
 8002ddc:	9300      	str	r3, [sp, #0]
 8002dde:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f000 fab8 	bl	8003358 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d19a      	bne.n	8002d28 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002df6:	68f8      	ldr	r0, [r7, #12]
 8002df8:	f000 f98a 	bl	8003110 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e01a      	b.n	8002e3c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	6859      	ldr	r1, [r3, #4]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	4b0b      	ldr	r3, [pc, #44]	; (8002e48 <HAL_I2C_Mem_Read+0x230>)
 8002e1a:	400b      	ands	r3, r1
 8002e1c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2220      	movs	r2, #32
 8002e22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e36:	2300      	movs	r3, #0
 8002e38:	e000      	b.n	8002e3c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002e3a:	2302      	movs	r3, #2
  }
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3718      	adds	r7, #24
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	80002400 	.word	0x80002400
 8002e48:	fe00e800 	.word	0xfe00e800

08002e4c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af02      	add	r7, sp, #8
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	4608      	mov	r0, r1
 8002e56:	4611      	mov	r1, r2
 8002e58:	461a      	mov	r2, r3
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	817b      	strh	r3, [r7, #10]
 8002e5e:	460b      	mov	r3, r1
 8002e60:	813b      	strh	r3, [r7, #8]
 8002e62:	4613      	mov	r3, r2
 8002e64:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002e66:	88fb      	ldrh	r3, [r7, #6]
 8002e68:	b2da      	uxtb	r2, r3
 8002e6a:	8979      	ldrh	r1, [r7, #10]
 8002e6c:	4b20      	ldr	r3, [pc, #128]	; (8002ef0 <I2C_RequestMemoryWrite+0xa4>)
 8002e6e:	9300      	str	r3, [sp, #0]
 8002e70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e74:	68f8      	ldr	r0, [r7, #12]
 8002e76:	f000 fa6f 	bl	8003358 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e7a:	69fa      	ldr	r2, [r7, #28]
 8002e7c:	69b9      	ldr	r1, [r7, #24]
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f000 f8ff 	bl	8003082 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e02c      	b.n	8002ee8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002e8e:	88fb      	ldrh	r3, [r7, #6]
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d105      	bne.n	8002ea0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002e94:	893b      	ldrh	r3, [r7, #8]
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	629a      	str	r2, [r3, #40]	; 0x28
 8002e9e:	e015      	b.n	8002ecc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ea0:	893b      	ldrh	r3, [r7, #8]
 8002ea2:	0a1b      	lsrs	r3, r3, #8
 8002ea4:	b29b      	uxth	r3, r3
 8002ea6:	b2da      	uxtb	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eae:	69fa      	ldr	r2, [r7, #28]
 8002eb0:	69b9      	ldr	r1, [r7, #24]
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f000 f8e5 	bl	8003082 <I2C_WaitOnTXISFlagUntilTimeout>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e012      	b.n	8002ee8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ec2:	893b      	ldrh	r3, [r7, #8]
 8002ec4:	b2da      	uxtb	r2, r3
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	2180      	movs	r1, #128	; 0x80
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 f884 	bl	8002fe4 <I2C_WaitOnFlagUntilTimeout>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e000      	b.n	8002ee8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	80002000 	.word	0x80002000

08002ef4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b086      	sub	sp, #24
 8002ef8:	af02      	add	r7, sp, #8
 8002efa:	60f8      	str	r0, [r7, #12]
 8002efc:	4608      	mov	r0, r1
 8002efe:	4611      	mov	r1, r2
 8002f00:	461a      	mov	r2, r3
 8002f02:	4603      	mov	r3, r0
 8002f04:	817b      	strh	r3, [r7, #10]
 8002f06:	460b      	mov	r3, r1
 8002f08:	813b      	strh	r3, [r7, #8]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002f0e:	88fb      	ldrh	r3, [r7, #6]
 8002f10:	b2da      	uxtb	r2, r3
 8002f12:	8979      	ldrh	r1, [r7, #10]
 8002f14:	4b20      	ldr	r3, [pc, #128]	; (8002f98 <I2C_RequestMemoryRead+0xa4>)
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	2300      	movs	r3, #0
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f000 fa1c 	bl	8003358 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f20:	69fa      	ldr	r2, [r7, #28]
 8002f22:	69b9      	ldr	r1, [r7, #24]
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f000 f8ac 	bl	8003082 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e02c      	b.n	8002f8e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002f34:	88fb      	ldrh	r3, [r7, #6]
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d105      	bne.n	8002f46 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f3a:	893b      	ldrh	r3, [r7, #8]
 8002f3c:	b2da      	uxtb	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	629a      	str	r2, [r3, #40]	; 0x28
 8002f44:	e015      	b.n	8002f72 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002f46:	893b      	ldrh	r3, [r7, #8]
 8002f48:	0a1b      	lsrs	r3, r3, #8
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	b2da      	uxtb	r2, r3
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f54:	69fa      	ldr	r2, [r7, #28]
 8002f56:	69b9      	ldr	r1, [r7, #24]
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f000 f892 	bl	8003082 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d001      	beq.n	8002f68 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e012      	b.n	8002f8e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f68:	893b      	ldrh	r3, [r7, #8]
 8002f6a:	b2da      	uxtb	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	9300      	str	r3, [sp, #0]
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	2140      	movs	r1, #64	; 0x40
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	f000 f831 	bl	8002fe4 <I2C_WaitOnFlagUntilTimeout>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e000      	b.n	8002f8e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	80002000 	.word	0x80002000

08002f9c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	699b      	ldr	r3, [r3, #24]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d103      	bne.n	8002fba <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d007      	beq.n	8002fd8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	699a      	ldr	r2, [r3, #24]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f042 0201 	orr.w	r2, r2, #1
 8002fd6:	619a      	str	r2, [r3, #24]
  }
}
 8002fd8:	bf00      	nop
 8002fda:	370c      	adds	r7, #12
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr

08002fe4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	603b      	str	r3, [r7, #0]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ff4:	e031      	b.n	800305a <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ffc:	d02d      	beq.n	800305a <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ffe:	f7fe feeb 	bl	8001dd8 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	429a      	cmp	r2, r3
 800300c:	d302      	bcc.n	8003014 <I2C_WaitOnFlagUntilTimeout+0x30>
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d122      	bne.n	800305a <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	699a      	ldr	r2, [r3, #24]
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	4013      	ands	r3, r2
 800301e:	68ba      	ldr	r2, [r7, #8]
 8003020:	429a      	cmp	r2, r3
 8003022:	bf0c      	ite	eq
 8003024:	2301      	moveq	r3, #1
 8003026:	2300      	movne	r3, #0
 8003028:	b2db      	uxtb	r3, r3
 800302a:	461a      	mov	r2, r3
 800302c:	79fb      	ldrb	r3, [r7, #7]
 800302e:	429a      	cmp	r2, r3
 8003030:	d113      	bne.n	800305a <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003036:	f043 0220 	orr.w	r2, r3, #32
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2220      	movs	r2, #32
 8003042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2200      	movs	r2, #0
 8003052:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e00f      	b.n	800307a <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	699a      	ldr	r2, [r3, #24]
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	4013      	ands	r3, r2
 8003064:	68ba      	ldr	r2, [r7, #8]
 8003066:	429a      	cmp	r2, r3
 8003068:	bf0c      	ite	eq
 800306a:	2301      	moveq	r3, #1
 800306c:	2300      	movne	r3, #0
 800306e:	b2db      	uxtb	r3, r3
 8003070:	461a      	mov	r2, r3
 8003072:	79fb      	ldrb	r3, [r7, #7]
 8003074:	429a      	cmp	r2, r3
 8003076:	d0be      	beq.n	8002ff6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003078:	2300      	movs	r3, #0
}
 800307a:	4618      	mov	r0, r3
 800307c:	3710      	adds	r7, #16
 800307e:	46bd      	mov	sp, r7
 8003080:	bd80      	pop	{r7, pc}

08003082 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003082:	b580      	push	{r7, lr}
 8003084:	b084      	sub	sp, #16
 8003086:	af00      	add	r7, sp, #0
 8003088:	60f8      	str	r0, [r7, #12]
 800308a:	60b9      	str	r1, [r7, #8]
 800308c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800308e:	e033      	b.n	80030f8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	68b9      	ldr	r1, [r7, #8]
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f000 f87f 	bl	8003198 <I2C_IsErrorOccurred>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e031      	b.n	8003108 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030aa:	d025      	beq.n	80030f8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ac:	f7fe fe94 	bl	8001dd8 <HAL_GetTick>
 80030b0:	4602      	mov	r2, r0
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	1ad3      	subs	r3, r2, r3
 80030b6:	68ba      	ldr	r2, [r7, #8]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d302      	bcc.n	80030c2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d11a      	bne.n	80030f8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	699b      	ldr	r3, [r3, #24]
 80030c8:	f003 0302 	and.w	r3, r3, #2
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d013      	beq.n	80030f8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d4:	f043 0220 	orr.w	r2, r3, #32
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2220      	movs	r2, #32
 80030e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2200      	movs	r2, #0
 80030e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e007      	b.n	8003108 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b02      	cmp	r3, #2
 8003104:	d1c4      	bne.n	8003090 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	3710      	adds	r7, #16
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800311c:	e02f      	b.n	800317e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	68b9      	ldr	r1, [r7, #8]
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f000 f838 	bl	8003198 <I2C_IsErrorOccurred>
 8003128:	4603      	mov	r3, r0
 800312a:	2b00      	cmp	r3, #0
 800312c:	d001      	beq.n	8003132 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e02d      	b.n	800318e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003132:	f7fe fe51 	bl	8001dd8 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	68ba      	ldr	r2, [r7, #8]
 800313e:	429a      	cmp	r2, r3
 8003140:	d302      	bcc.n	8003148 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d11a      	bne.n	800317e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	699b      	ldr	r3, [r3, #24]
 800314e:	f003 0320 	and.w	r3, r3, #32
 8003152:	2b20      	cmp	r3, #32
 8003154:	d013      	beq.n	800317e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315a:	f043 0220 	orr.w	r2, r3, #32
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2220      	movs	r2, #32
 8003166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2200      	movs	r2, #0
 800316e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	e007      	b.n	800318e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	699b      	ldr	r3, [r3, #24]
 8003184:	f003 0320 	and.w	r3, r3, #32
 8003188:	2b20      	cmp	r3, #32
 800318a:	d1c8      	bne.n	800311e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
	...

08003198 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b08a      	sub	sp, #40	; 0x28
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031a4:	2300      	movs	r3, #0
 80031a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80031b2:	2300      	movs	r3, #0
 80031b4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	f003 0310 	and.w	r3, r3, #16
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d068      	beq.n	8003296 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2210      	movs	r2, #16
 80031ca:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80031cc:	e049      	b.n	8003262 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d4:	d045      	beq.n	8003262 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80031d6:	f7fe fdff 	bl	8001dd8 <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	68ba      	ldr	r2, [r7, #8]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d302      	bcc.n	80031ec <I2C_IsErrorOccurred+0x54>
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d13a      	bne.n	8003262 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031f6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80031fe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	699b      	ldr	r3, [r3, #24]
 8003206:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800320a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800320e:	d121      	bne.n	8003254 <I2C_IsErrorOccurred+0xbc>
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003216:	d01d      	beq.n	8003254 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003218:	7cfb      	ldrb	r3, [r7, #19]
 800321a:	2b20      	cmp	r3, #32
 800321c:	d01a      	beq.n	8003254 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	685a      	ldr	r2, [r3, #4]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800322c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800322e:	f7fe fdd3 	bl	8001dd8 <HAL_GetTick>
 8003232:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003234:	e00e      	b.n	8003254 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003236:	f7fe fdcf 	bl	8001dd8 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b19      	cmp	r3, #25
 8003242:	d907      	bls.n	8003254 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003244:	6a3b      	ldr	r3, [r7, #32]
 8003246:	f043 0320 	orr.w	r3, r3, #32
 800324a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003252:	e006      	b.n	8003262 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	f003 0320 	and.w	r3, r3, #32
 800325e:	2b20      	cmp	r3, #32
 8003260:	d1e9      	bne.n	8003236 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	f003 0320 	and.w	r3, r3, #32
 800326c:	2b20      	cmp	r3, #32
 800326e:	d003      	beq.n	8003278 <I2C_IsErrorOccurred+0xe0>
 8003270:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003274:	2b00      	cmp	r3, #0
 8003276:	d0aa      	beq.n	80031ce <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003278:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800327c:	2b00      	cmp	r3, #0
 800327e:	d103      	bne.n	8003288 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2220      	movs	r2, #32
 8003286:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003288:	6a3b      	ldr	r3, [r7, #32]
 800328a:	f043 0304 	orr.w	r3, r3, #4
 800328e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	699b      	ldr	r3, [r3, #24]
 800329c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00b      	beq.n	80032c0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80032a8:	6a3b      	ldr	r3, [r7, #32]
 80032aa:	f043 0301 	orr.w	r3, r3, #1
 80032ae:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00b      	beq.n	80032e2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80032ca:	6a3b      	ldr	r3, [r7, #32]
 80032cc:	f043 0308 	orr.w	r3, r3, #8
 80032d0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032da:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00b      	beq.n	8003304 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80032ec:	6a3b      	ldr	r3, [r7, #32]
 80032ee:	f043 0302 	orr.w	r3, r3, #2
 80032f2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032fc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003304:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003308:	2b00      	cmp	r3, #0
 800330a:	d01c      	beq.n	8003346 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f7ff fe45 	bl	8002f9c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6859      	ldr	r1, [r3, #4]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	4b0d      	ldr	r3, [pc, #52]	; (8003354 <I2C_IsErrorOccurred+0x1bc>)
 800331e:	400b      	ands	r3, r1
 8003320:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003326:	6a3b      	ldr	r3, [r7, #32]
 8003328:	431a      	orrs	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2220      	movs	r2, #32
 8003332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003346:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800334a:	4618      	mov	r0, r3
 800334c:	3728      	adds	r7, #40	; 0x28
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
 8003352:	bf00      	nop
 8003354:	fe00e800 	.word	0xfe00e800

08003358 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003358:	b480      	push	{r7}
 800335a:	b087      	sub	sp, #28
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	607b      	str	r3, [r7, #4]
 8003362:	460b      	mov	r3, r1
 8003364:	817b      	strh	r3, [r7, #10]
 8003366:	4613      	mov	r3, r2
 8003368:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800336a:	897b      	ldrh	r3, [r7, #10]
 800336c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003370:	7a7b      	ldrb	r3, [r7, #9]
 8003372:	041b      	lsls	r3, r3, #16
 8003374:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003378:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800337e:	6a3b      	ldr	r3, [r7, #32]
 8003380:	4313      	orrs	r3, r2
 8003382:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003386:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	6a3b      	ldr	r3, [r7, #32]
 8003390:	0d5b      	lsrs	r3, r3, #21
 8003392:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003396:	4b08      	ldr	r3, [pc, #32]	; (80033b8 <I2C_TransferConfig+0x60>)
 8003398:	430b      	orrs	r3, r1
 800339a:	43db      	mvns	r3, r3
 800339c:	ea02 0103 	and.w	r1, r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	697a      	ldr	r2, [r7, #20]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80033aa:	bf00      	nop
 80033ac:	371c      	adds	r7, #28
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	03ff63ff 	.word	0x03ff63ff

080033bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b20      	cmp	r3, #32
 80033d0:	d138      	bne.n	8003444 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d101      	bne.n	80033e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80033dc:	2302      	movs	r3, #2
 80033de:	e032      	b.n	8003446 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2224      	movs	r2, #36	; 0x24
 80033ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f022 0201 	bic.w	r2, r2, #1
 80033fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800340e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6819      	ldr	r1, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	430a      	orrs	r2, r1
 800341e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f042 0201 	orr.w	r2, r2, #1
 800342e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2220      	movs	r2, #32
 8003434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003440:	2300      	movs	r3, #0
 8003442:	e000      	b.n	8003446 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003444:	2302      	movs	r3, #2
  }
}
 8003446:	4618      	mov	r0, r3
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr

08003452 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003452:	b480      	push	{r7}
 8003454:	b085      	sub	sp, #20
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
 800345a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b20      	cmp	r3, #32
 8003466:	d139      	bne.n	80034dc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800346e:	2b01      	cmp	r3, #1
 8003470:	d101      	bne.n	8003476 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003472:	2302      	movs	r3, #2
 8003474:	e033      	b.n	80034de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2224      	movs	r2, #36	; 0x24
 8003482:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 0201 	bic.w	r2, r2, #1
 8003494:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80034a4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	021b      	lsls	r3, r3, #8
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68fa      	ldr	r2, [r7, #12]
 80034b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f042 0201 	orr.w	r2, r2, #1
 80034c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2220      	movs	r2, #32
 80034cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034d8:	2300      	movs	r3, #0
 80034da:	e000      	b.n	80034de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80034dc:	2302      	movs	r3, #2
  }
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3714      	adds	r7, #20
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr

080034ea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80034ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034ec:	b08f      	sub	sp, #60	; 0x3c
 80034ee:	af0a      	add	r7, sp, #40	; 0x28
 80034f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d101      	bne.n	80034fc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e116      	b.n	800372a <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d106      	bne.n	800351c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f7fe f866 	bl	80015e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2203      	movs	r2, #3
 8003520:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4618      	mov	r0, r3
 800353c:	f002 fb9f 	bl	8005c7e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	603b      	str	r3, [r7, #0]
 8003546:	687e      	ldr	r6, [r7, #4]
 8003548:	466d      	mov	r5, sp
 800354a:	f106 0410 	add.w	r4, r6, #16
 800354e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003550:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003552:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003554:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003556:	e894 0003 	ldmia.w	r4, {r0, r1}
 800355a:	e885 0003 	stmia.w	r5, {r0, r1}
 800355e:	1d33      	adds	r3, r6, #4
 8003560:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003562:	6838      	ldr	r0, [r7, #0]
 8003564:	f002 fb5f 	bl	8005c26 <USB_CoreInit>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d005      	beq.n	800357a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2202      	movs	r2, #2
 8003572:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e0d7      	b.n	800372a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2100      	movs	r1, #0
 8003580:	4618      	mov	r0, r3
 8003582:	f002 fb8d 	bl	8005ca0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003586:	2300      	movs	r3, #0
 8003588:	73fb      	strb	r3, [r7, #15]
 800358a:	e04a      	b.n	8003622 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800358c:	7bfa      	ldrb	r2, [r7, #15]
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	4613      	mov	r3, r2
 8003592:	00db      	lsls	r3, r3, #3
 8003594:	4413      	add	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	440b      	add	r3, r1
 800359a:	333d      	adds	r3, #61	; 0x3d
 800359c:	2201      	movs	r2, #1
 800359e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80035a0:	7bfa      	ldrb	r2, [r7, #15]
 80035a2:	6879      	ldr	r1, [r7, #4]
 80035a4:	4613      	mov	r3, r2
 80035a6:	00db      	lsls	r3, r3, #3
 80035a8:	4413      	add	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	440b      	add	r3, r1
 80035ae:	333c      	adds	r3, #60	; 0x3c
 80035b0:	7bfa      	ldrb	r2, [r7, #15]
 80035b2:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 80035b4:	7bfa      	ldrb	r2, [r7, #15]
 80035b6:	7bfb      	ldrb	r3, [r7, #15]
 80035b8:	b298      	uxth	r0, r3
 80035ba:	6879      	ldr	r1, [r7, #4]
 80035bc:	4613      	mov	r3, r2
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	4413      	add	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	440b      	add	r3, r1
 80035c6:	3356      	adds	r3, #86	; 0x56
 80035c8:	4602      	mov	r2, r0
 80035ca:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80035cc:	7bfa      	ldrb	r2, [r7, #15]
 80035ce:	6879      	ldr	r1, [r7, #4]
 80035d0:	4613      	mov	r3, r2
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	4413      	add	r3, r2
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	440b      	add	r3, r1
 80035da:	3340      	adds	r3, #64	; 0x40
 80035dc:	2200      	movs	r2, #0
 80035de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80035e0:	7bfa      	ldrb	r2, [r7, #15]
 80035e2:	6879      	ldr	r1, [r7, #4]
 80035e4:	4613      	mov	r3, r2
 80035e6:	00db      	lsls	r3, r3, #3
 80035e8:	4413      	add	r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	440b      	add	r3, r1
 80035ee:	3344      	adds	r3, #68	; 0x44
 80035f0:	2200      	movs	r2, #0
 80035f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80035f4:	7bfa      	ldrb	r2, [r7, #15]
 80035f6:	6879      	ldr	r1, [r7, #4]
 80035f8:	4613      	mov	r3, r2
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	4413      	add	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	440b      	add	r3, r1
 8003602:	3348      	adds	r3, #72	; 0x48
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003608:	7bfa      	ldrb	r2, [r7, #15]
 800360a:	6879      	ldr	r1, [r7, #4]
 800360c:	4613      	mov	r3, r2
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	4413      	add	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	440b      	add	r3, r1
 8003616:	334c      	adds	r3, #76	; 0x4c
 8003618:	2200      	movs	r2, #0
 800361a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800361c:	7bfb      	ldrb	r3, [r7, #15]
 800361e:	3301      	adds	r3, #1
 8003620:	73fb      	strb	r3, [r7, #15]
 8003622:	7bfa      	ldrb	r2, [r7, #15]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	429a      	cmp	r2, r3
 800362a:	d3af      	bcc.n	800358c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800362c:	2300      	movs	r3, #0
 800362e:	73fb      	strb	r3, [r7, #15]
 8003630:	e044      	b.n	80036bc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003632:	7bfa      	ldrb	r2, [r7, #15]
 8003634:	6879      	ldr	r1, [r7, #4]
 8003636:	4613      	mov	r3, r2
 8003638:	00db      	lsls	r3, r3, #3
 800363a:	4413      	add	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	440b      	add	r3, r1
 8003640:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003644:	2200      	movs	r2, #0
 8003646:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003648:	7bfa      	ldrb	r2, [r7, #15]
 800364a:	6879      	ldr	r1, [r7, #4]
 800364c:	4613      	mov	r3, r2
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	4413      	add	r3, r2
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	440b      	add	r3, r1
 8003656:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800365a:	7bfa      	ldrb	r2, [r7, #15]
 800365c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800365e:	7bfa      	ldrb	r2, [r7, #15]
 8003660:	6879      	ldr	r1, [r7, #4]
 8003662:	4613      	mov	r3, r2
 8003664:	00db      	lsls	r3, r3, #3
 8003666:	4413      	add	r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	440b      	add	r3, r1
 800366c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003670:	2200      	movs	r2, #0
 8003672:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003674:	7bfa      	ldrb	r2, [r7, #15]
 8003676:	6879      	ldr	r1, [r7, #4]
 8003678:	4613      	mov	r3, r2
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	4413      	add	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	440b      	add	r3, r1
 8003682:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8003686:	2200      	movs	r2, #0
 8003688:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800368a:	7bfa      	ldrb	r2, [r7, #15]
 800368c:	6879      	ldr	r1, [r7, #4]
 800368e:	4613      	mov	r3, r2
 8003690:	00db      	lsls	r3, r3, #3
 8003692:	4413      	add	r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	440b      	add	r3, r1
 8003698:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800369c:	2200      	movs	r2, #0
 800369e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80036a0:	7bfa      	ldrb	r2, [r7, #15]
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	4613      	mov	r3, r2
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	4413      	add	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	440b      	add	r3, r1
 80036ae:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80036b2:	2200      	movs	r2, #0
 80036b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036b6:	7bfb      	ldrb	r3, [r7, #15]
 80036b8:	3301      	adds	r3, #1
 80036ba:	73fb      	strb	r3, [r7, #15]
 80036bc:	7bfa      	ldrb	r2, [r7, #15]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d3b5      	bcc.n	8003632 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	603b      	str	r3, [r7, #0]
 80036cc:	687e      	ldr	r6, [r7, #4]
 80036ce:	466d      	mov	r5, sp
 80036d0:	f106 0410 	add.w	r4, r6, #16
 80036d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80036e0:	e885 0003 	stmia.w	r5, {r0, r1}
 80036e4:	1d33      	adds	r3, r6, #4
 80036e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036e8:	6838      	ldr	r0, [r7, #0]
 80036ea:	f002 fb25 	bl	8005d38 <USB_DevInit>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d005      	beq.n	8003700 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2202      	movs	r2, #2
 80036f8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e014      	b.n	800372a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003714:	2b01      	cmp	r3, #1
 8003716:	d102      	bne.n	800371e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f000 f80a 	bl	8003732 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4618      	mov	r0, r3
 8003724:	f002 fcc7 	bl	80060b6 <USB_DevDisconnect>

  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3714      	adds	r7, #20
 800372e:	46bd      	mov	sp, r7
 8003730:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003732 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003732:	b480      	push	{r7}
 8003734:	b085      	sub	sp, #20
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	699b      	ldr	r3, [r3, #24]
 8003754:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003764:	f043 0303 	orr.w	r3, r3, #3
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3714      	adds	r7, #20
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
	...

0800377c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003780:	4b05      	ldr	r3, [pc, #20]	; (8003798 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a04      	ldr	r2, [pc, #16]	; (8003798 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003786:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800378a:	6013      	str	r3, [r2, #0]
}
 800378c:	bf00      	nop
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	40007000 	.word	0x40007000

0800379c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80037a0:	4b04      	ldr	r3, [pc, #16]	; (80037b4 <HAL_PWREx_GetVoltageRange+0x18>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	40007000 	.word	0x40007000

080037b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b085      	sub	sp, #20
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037c6:	d130      	bne.n	800382a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80037c8:	4b23      	ldr	r3, [pc, #140]	; (8003858 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80037d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037d4:	d038      	beq.n	8003848 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80037d6:	4b20      	ldr	r3, [pc, #128]	; (8003858 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80037de:	4a1e      	ldr	r2, [pc, #120]	; (8003858 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80037e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037e4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80037e6:	4b1d      	ldr	r3, [pc, #116]	; (800385c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2232      	movs	r2, #50	; 0x32
 80037ec:	fb02 f303 	mul.w	r3, r2, r3
 80037f0:	4a1b      	ldr	r2, [pc, #108]	; (8003860 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80037f2:	fba2 2303 	umull	r2, r3, r2, r3
 80037f6:	0c9b      	lsrs	r3, r3, #18
 80037f8:	3301      	adds	r3, #1
 80037fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80037fc:	e002      	b.n	8003804 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	3b01      	subs	r3, #1
 8003802:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003804:	4b14      	ldr	r3, [pc, #80]	; (8003858 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800380c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003810:	d102      	bne.n	8003818 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1f2      	bne.n	80037fe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003818:	4b0f      	ldr	r3, [pc, #60]	; (8003858 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800381a:	695b      	ldr	r3, [r3, #20]
 800381c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003820:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003824:	d110      	bne.n	8003848 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e00f      	b.n	800384a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800382a:	4b0b      	ldr	r3, [pc, #44]	; (8003858 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003832:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003836:	d007      	beq.n	8003848 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003838:	4b07      	ldr	r3, [pc, #28]	; (8003858 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003840:	4a05      	ldr	r2, [pc, #20]	; (8003858 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003842:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003846:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3714      	adds	r7, #20
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	40007000 	.word	0x40007000
 800385c:	20000094 	.word	0x20000094
 8003860:	431bde83 	.word	0x431bde83

08003864 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003864:	b480      	push	{r7}
 8003866:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8003868:	4b05      	ldr	r3, [pc, #20]	; (8003880 <HAL_PWREx_EnableVddUSB+0x1c>)
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	4a04      	ldr	r2, [pc, #16]	; (8003880 <HAL_PWREx_EnableVddUSB+0x1c>)
 800386e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003872:	6053      	str	r3, [r2, #4]
}
 8003874:	bf00      	nop
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	40007000 	.word	0x40007000

08003884 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af02      	add	r7, sp, #8
 800388a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800388c:	f7fe faa4 	bl	8001dd8 <HAL_GetTick>
 8003890:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d101      	bne.n	800389c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e063      	b.n	8003964 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10b      	bne.n	80038c0 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f7fd fd6d 	bl	8001390 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80038b6:	f241 3188 	movw	r1, #5000	; 0x1388
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f858 	bl	8003970 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	3b01      	subs	r3, #1
 80038d0:	021a      	lsls	r2, r3, #8
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	2120      	movs	r1, #32
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f850 	bl	800398c <QSPI_WaitFlagStateUntilTimeout>
 80038ec:	4603      	mov	r3, r0
 80038ee:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 80038f0:	7afb      	ldrb	r3, [r7, #11]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d131      	bne.n	800395a <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003900:	f023 0310 	bic.w	r3, r3, #16
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	6852      	ldr	r2, [r2, #4]
 8003908:	0611      	lsls	r1, r2, #24
 800390a:	687a      	ldr	r2, [r7, #4]
 800390c:	68d2      	ldr	r2, [r2, #12]
 800390e:	4311      	orrs	r1, r2
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	6812      	ldr	r2, [r2, #0]
 8003914:	430b      	orrs	r3, r1
 8003916:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	685a      	ldr	r2, [r3, #4]
 800391e:	4b13      	ldr	r3, [pc, #76]	; (800396c <HAL_QSPI_Init+0xe8>)
 8003920:	4013      	ands	r3, r2
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	6912      	ldr	r2, [r2, #16]
 8003926:	0411      	lsls	r1, r2, #16
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	6952      	ldr	r2, [r2, #20]
 800392c:	4311      	orrs	r1, r2
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	6992      	ldr	r2, [r2, #24]
 8003932:	4311      	orrs	r1, r2
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	6812      	ldr	r2, [r2, #0]
 8003938:	430b      	orrs	r3, r1
 800393a:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681a      	ldr	r2, [r3, #0]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f042 0201 	orr.w	r2, r2, #1
 800394a:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8003962:	7afb      	ldrb	r3, [r7, #11]
}
 8003964:	4618      	mov	r0, r3
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	ffe0f8fe 	.word	0xffe0f8fe

08003970 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	683a      	ldr	r2, [r7, #0]
 800397e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	603b      	str	r3, [r7, #0]
 8003998:	4613      	mov	r3, r2
 800399a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800399c:	e01a      	b.n	80039d4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a4:	d016      	beq.n	80039d4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039a6:	f7fe fa17 	bl	8001dd8 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d302      	bcc.n	80039bc <QSPI_WaitFlagStateUntilTimeout+0x30>
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d10b      	bne.n	80039d4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2204      	movs	r2, #4
 80039c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039c8:	f043 0201 	orr.w	r2, r3, #1
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e00e      	b.n	80039f2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	689a      	ldr	r2, [r3, #8]
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	4013      	ands	r3, r2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	bf14      	ite	ne
 80039e2:	2301      	movne	r3, #1
 80039e4:	2300      	moveq	r3, #0
 80039e6:	b2db      	uxtb	r3, r3
 80039e8:	461a      	mov	r2, r3
 80039ea:	79fb      	ldrb	r3, [r7, #7]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d1d6      	bne.n	800399e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
	...

080039fc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b088      	sub	sp, #32
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e3ca      	b.n	80041a4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a0e:	4b97      	ldr	r3, [pc, #604]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f003 030c 	and.w	r3, r3, #12
 8003a16:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a18:	4b94      	ldr	r3, [pc, #592]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	f003 0303 	and.w	r3, r3, #3
 8003a20:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0310 	and.w	r3, r3, #16
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f000 80e4 	beq.w	8003bf8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a30:	69bb      	ldr	r3, [r7, #24]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d007      	beq.n	8003a46 <HAL_RCC_OscConfig+0x4a>
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	2b0c      	cmp	r3, #12
 8003a3a:	f040 808b 	bne.w	8003b54 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	f040 8087 	bne.w	8003b54 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a46:	4b89      	ldr	r3, [pc, #548]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d005      	beq.n	8003a5e <HAL_RCC_OscConfig+0x62>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e3a2      	b.n	80041a4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a1a      	ldr	r2, [r3, #32]
 8003a62:	4b82      	ldr	r3, [pc, #520]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 0308 	and.w	r3, r3, #8
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d004      	beq.n	8003a78 <HAL_RCC_OscConfig+0x7c>
 8003a6e:	4b7f      	ldr	r3, [pc, #508]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a76:	e005      	b.n	8003a84 <HAL_RCC_OscConfig+0x88>
 8003a78:	4b7c      	ldr	r3, [pc, #496]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003a7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a7e:	091b      	lsrs	r3, r3, #4
 8003a80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d223      	bcs.n	8003ad0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f000 fd55 	bl	800453c <RCC_SetFlashLatencyFromMSIRange>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d001      	beq.n	8003a9c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e383      	b.n	80041a4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a9c:	4b73      	ldr	r3, [pc, #460]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a72      	ldr	r2, [pc, #456]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003aa2:	f043 0308 	orr.w	r3, r3, #8
 8003aa6:	6013      	str	r3, [r2, #0]
 8003aa8:	4b70      	ldr	r3, [pc, #448]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a1b      	ldr	r3, [r3, #32]
 8003ab4:	496d      	ldr	r1, [pc, #436]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003aba:	4b6c      	ldr	r3, [pc, #432]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	021b      	lsls	r3, r3, #8
 8003ac8:	4968      	ldr	r1, [pc, #416]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	604b      	str	r3, [r1, #4]
 8003ace:	e025      	b.n	8003b1c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ad0:	4b66      	ldr	r3, [pc, #408]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a65      	ldr	r2, [pc, #404]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003ad6:	f043 0308 	orr.w	r3, r3, #8
 8003ada:	6013      	str	r3, [r2, #0]
 8003adc:	4b63      	ldr	r3, [pc, #396]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	4960      	ldr	r1, [pc, #384]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003aee:	4b5f      	ldr	r3, [pc, #380]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	021b      	lsls	r3, r3, #8
 8003afc:	495b      	ldr	r1, [pc, #364]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003afe:	4313      	orrs	r3, r2
 8003b00:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d109      	bne.n	8003b1c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a1b      	ldr	r3, [r3, #32]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f000 fd15 	bl	800453c <RCC_SetFlashLatencyFromMSIRange>
 8003b12:	4603      	mov	r3, r0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e343      	b.n	80041a4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b1c:	f000 fc4a 	bl	80043b4 <HAL_RCC_GetSysClockFreq>
 8003b20:	4602      	mov	r2, r0
 8003b22:	4b52      	ldr	r3, [pc, #328]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	091b      	lsrs	r3, r3, #4
 8003b28:	f003 030f 	and.w	r3, r3, #15
 8003b2c:	4950      	ldr	r1, [pc, #320]	; (8003c70 <HAL_RCC_OscConfig+0x274>)
 8003b2e:	5ccb      	ldrb	r3, [r1, r3]
 8003b30:	f003 031f 	and.w	r3, r3, #31
 8003b34:	fa22 f303 	lsr.w	r3, r2, r3
 8003b38:	4a4e      	ldr	r2, [pc, #312]	; (8003c74 <HAL_RCC_OscConfig+0x278>)
 8003b3a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003b3c:	4b4e      	ldr	r3, [pc, #312]	; (8003c78 <HAL_RCC_OscConfig+0x27c>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f7fe f8f9 	bl	8001d38 <HAL_InitTick>
 8003b46:	4603      	mov	r3, r0
 8003b48:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003b4a:	7bfb      	ldrb	r3, [r7, #15]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d052      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003b50:	7bfb      	ldrb	r3, [r7, #15]
 8003b52:	e327      	b.n	80041a4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d032      	beq.n	8003bc2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003b5c:	4b43      	ldr	r3, [pc, #268]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a42      	ldr	r2, [pc, #264]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003b62:	f043 0301 	orr.w	r3, r3, #1
 8003b66:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b68:	f7fe f936 	bl	8001dd8 <HAL_GetTick>
 8003b6c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b6e:	e008      	b.n	8003b82 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b70:	f7fe f932 	bl	8001dd8 <HAL_GetTick>
 8003b74:	4602      	mov	r2, r0
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	1ad3      	subs	r3, r2, r3
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e310      	b.n	80041a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b82:	4b3a      	ldr	r3, [pc, #232]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d0f0      	beq.n	8003b70 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b8e:	4b37      	ldr	r3, [pc, #220]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a36      	ldr	r2, [pc, #216]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003b94:	f043 0308 	orr.w	r3, r3, #8
 8003b98:	6013      	str	r3, [r2, #0]
 8003b9a:	4b34      	ldr	r3, [pc, #208]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a1b      	ldr	r3, [r3, #32]
 8003ba6:	4931      	ldr	r1, [pc, #196]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003bac:	4b2f      	ldr	r3, [pc, #188]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	69db      	ldr	r3, [r3, #28]
 8003bb8:	021b      	lsls	r3, r3, #8
 8003bba:	492c      	ldr	r1, [pc, #176]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	604b      	str	r3, [r1, #4]
 8003bc0:	e01a      	b.n	8003bf8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003bc2:	4b2a      	ldr	r3, [pc, #168]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a29      	ldr	r2, [pc, #164]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003bc8:	f023 0301 	bic.w	r3, r3, #1
 8003bcc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003bce:	f7fe f903 	bl	8001dd8 <HAL_GetTick>
 8003bd2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003bd4:	e008      	b.n	8003be8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003bd6:	f7fe f8ff 	bl	8001dd8 <HAL_GetTick>
 8003bda:	4602      	mov	r2, r0
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	2b02      	cmp	r3, #2
 8003be2:	d901      	bls.n	8003be8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e2dd      	b.n	80041a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003be8:	4b20      	ldr	r3, [pc, #128]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 0302 	and.w	r3, r3, #2
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1f0      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x1da>
 8003bf4:	e000      	b.n	8003bf8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003bf6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d074      	beq.n	8003cee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	2b08      	cmp	r3, #8
 8003c08:	d005      	beq.n	8003c16 <HAL_RCC_OscConfig+0x21a>
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	2b0c      	cmp	r3, #12
 8003c0e:	d10e      	bne.n	8003c2e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	2b03      	cmp	r3, #3
 8003c14:	d10b      	bne.n	8003c2e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c16:	4b15      	ldr	r3, [pc, #84]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d064      	beq.n	8003cec <HAL_RCC_OscConfig+0x2f0>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d160      	bne.n	8003cec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e2ba      	b.n	80041a4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c36:	d106      	bne.n	8003c46 <HAL_RCC_OscConfig+0x24a>
 8003c38:	4b0c      	ldr	r3, [pc, #48]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a0b      	ldr	r2, [pc, #44]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003c3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c42:	6013      	str	r3, [r2, #0]
 8003c44:	e026      	b.n	8003c94 <HAL_RCC_OscConfig+0x298>
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c4e:	d115      	bne.n	8003c7c <HAL_RCC_OscConfig+0x280>
 8003c50:	4b06      	ldr	r3, [pc, #24]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a05      	ldr	r2, [pc, #20]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003c56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c5a:	6013      	str	r3, [r2, #0]
 8003c5c:	4b03      	ldr	r3, [pc, #12]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a02      	ldr	r2, [pc, #8]	; (8003c6c <HAL_RCC_OscConfig+0x270>)
 8003c62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c66:	6013      	str	r3, [r2, #0]
 8003c68:	e014      	b.n	8003c94 <HAL_RCC_OscConfig+0x298>
 8003c6a:	bf00      	nop
 8003c6c:	40021000 	.word	0x40021000
 8003c70:	08006ba8 	.word	0x08006ba8
 8003c74:	20000094 	.word	0x20000094
 8003c78:	200000a8 	.word	0x200000a8
 8003c7c:	4ba0      	ldr	r3, [pc, #640]	; (8003f00 <HAL_RCC_OscConfig+0x504>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a9f      	ldr	r2, [pc, #636]	; (8003f00 <HAL_RCC_OscConfig+0x504>)
 8003c82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c86:	6013      	str	r3, [r2, #0]
 8003c88:	4b9d      	ldr	r3, [pc, #628]	; (8003f00 <HAL_RCC_OscConfig+0x504>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a9c      	ldr	r2, [pc, #624]	; (8003f00 <HAL_RCC_OscConfig+0x504>)
 8003c8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d013      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c9c:	f7fe f89c 	bl	8001dd8 <HAL_GetTick>
 8003ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ca2:	e008      	b.n	8003cb6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ca4:	f7fe f898 	bl	8001dd8 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b64      	cmp	r3, #100	; 0x64
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e276      	b.n	80041a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cb6:	4b92      	ldr	r3, [pc, #584]	; (8003f00 <HAL_RCC_OscConfig+0x504>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d0f0      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x2a8>
 8003cc2:	e014      	b.n	8003cee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc4:	f7fe f888 	bl	8001dd8 <HAL_GetTick>
 8003cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cca:	e008      	b.n	8003cde <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ccc:	f7fe f884 	bl	8001dd8 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b64      	cmp	r3, #100	; 0x64
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e262      	b.n	80041a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cde:	4b88      	ldr	r3, [pc, #544]	; (8003f00 <HAL_RCC_OscConfig+0x504>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1f0      	bne.n	8003ccc <HAL_RCC_OscConfig+0x2d0>
 8003cea:	e000      	b.n	8003cee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d060      	beq.n	8003dbc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	2b04      	cmp	r3, #4
 8003cfe:	d005      	beq.n	8003d0c <HAL_RCC_OscConfig+0x310>
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	2b0c      	cmp	r3, #12
 8003d04:	d119      	bne.n	8003d3a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d116      	bne.n	8003d3a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d0c:	4b7c      	ldr	r3, [pc, #496]	; (8003f00 <HAL_RCC_OscConfig+0x504>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d005      	beq.n	8003d24 <HAL_RCC_OscConfig+0x328>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d101      	bne.n	8003d24 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e23f      	b.n	80041a4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d24:	4b76      	ldr	r3, [pc, #472]	; (8003f00 <HAL_RCC_OscConfig+0x504>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	691b      	ldr	r3, [r3, #16]
 8003d30:	061b      	lsls	r3, r3, #24
 8003d32:	4973      	ldr	r1, [pc, #460]	; (8003f00 <HAL_RCC_OscConfig+0x504>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d38:	e040      	b.n	8003dbc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d023      	beq.n	8003d8a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d42:	4b6f      	ldr	r3, [pc, #444]	; (8003f00 <HAL_RCC_OscConfig+0x504>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a6e      	ldr	r2, [pc, #440]	; (8003f00 <HAL_RCC_OscConfig+0x504>)
 8003d48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4e:	f7fe f843 	bl	8001dd8 <HAL_GetTick>
 8003d52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d54:	e008      	b.n	8003d68 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d56:	f7fe f83f 	bl	8001dd8 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d901      	bls.n	8003d68 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e21d      	b.n	80041a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d68:	4b65      	ldr	r3, [pc, #404]	; (8003f00 <HAL_RCC_OscConfig+0x504>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d0f0      	beq.n	8003d56 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d74:	4b62      	ldr	r3, [pc, #392]	; (8003f00 <HAL_RCC_OscConfig+0x504>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	061b      	lsls	r3, r3, #24
 8003d82:	495f      	ldr	r1, [pc, #380]	; (8003f00 <HAL_RCC_OscConfig+0x504>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	604b      	str	r3, [r1, #4]
 8003d88:	e018      	b.n	8003dbc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d8a:	4b5d      	ldr	r3, [pc, #372]	; (8003f00 <HAL_RCC_OscConfig+0x504>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a5c      	ldr	r2, [pc, #368]	; (8003f00 <HAL_RCC_OscConfig+0x504>)
 8003d90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d96:	f7fe f81f 	bl	8001dd8 <HAL_GetTick>
 8003d9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d9c:	e008      	b.n	8003db0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d9e:	f7fe f81b 	bl	8001dd8 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d901      	bls.n	8003db0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003dac:	2303      	movs	r3, #3
 8003dae:	e1f9      	b.n	80041a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003db0:	4b53      	ldr	r3, [pc, #332]	; (8003f00 <HAL_RCC_OscConfig+0x504>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1f0      	bne.n	8003d9e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0308 	and.w	r3, r3, #8
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d03c      	beq.n	8003e42 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	695b      	ldr	r3, [r3, #20]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d01c      	beq.n	8003e0a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dd0:	4b4b      	ldr	r3, [pc, #300]	; (8003f00 <HAL_RCC_OscConfig+0x504>)
 8003dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003dd6:	4a4a      	ldr	r2, [pc, #296]	; (8003f00 <HAL_RCC_OscConfig+0x504>)
 8003dd8:	f043 0301 	orr.w	r3, r3, #1
 8003ddc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003de0:	f7fd fffa 	bl	8001dd8 <HAL_GetTick>
 8003de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003de6:	e008      	b.n	8003dfa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003de8:	f7fd fff6 	bl	8001dd8 <HAL_GetTick>
 8003dec:	4602      	mov	r2, r0
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	2b02      	cmp	r3, #2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e1d4      	b.n	80041a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003dfa:	4b41      	ldr	r3, [pc, #260]	; (8003f00 <HAL_RCC_OscConfig+0x504>)
 8003dfc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d0ef      	beq.n	8003de8 <HAL_RCC_OscConfig+0x3ec>
 8003e08:	e01b      	b.n	8003e42 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e0a:	4b3d      	ldr	r3, [pc, #244]	; (8003f00 <HAL_RCC_OscConfig+0x504>)
 8003e0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e10:	4a3b      	ldr	r2, [pc, #236]	; (8003f00 <HAL_RCC_OscConfig+0x504>)
 8003e12:	f023 0301 	bic.w	r3, r3, #1
 8003e16:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e1a:	f7fd ffdd 	bl	8001dd8 <HAL_GetTick>
 8003e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e20:	e008      	b.n	8003e34 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e22:	f7fd ffd9 	bl	8001dd8 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d901      	bls.n	8003e34 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e1b7      	b.n	80041a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e34:	4b32      	ldr	r3, [pc, #200]	; (8003f00 <HAL_RCC_OscConfig+0x504>)
 8003e36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1ef      	bne.n	8003e22 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 0304 	and.w	r3, r3, #4
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	f000 80a6 	beq.w	8003f9c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e50:	2300      	movs	r3, #0
 8003e52:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003e54:	4b2a      	ldr	r3, [pc, #168]	; (8003f00 <HAL_RCC_OscConfig+0x504>)
 8003e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d10d      	bne.n	8003e7c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e60:	4b27      	ldr	r3, [pc, #156]	; (8003f00 <HAL_RCC_OscConfig+0x504>)
 8003e62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e64:	4a26      	ldr	r2, [pc, #152]	; (8003f00 <HAL_RCC_OscConfig+0x504>)
 8003e66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e6a:	6593      	str	r3, [r2, #88]	; 0x58
 8003e6c:	4b24      	ldr	r3, [pc, #144]	; (8003f00 <HAL_RCC_OscConfig+0x504>)
 8003e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e74:	60bb      	str	r3, [r7, #8]
 8003e76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e7c:	4b21      	ldr	r3, [pc, #132]	; (8003f04 <HAL_RCC_OscConfig+0x508>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d118      	bne.n	8003eba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e88:	4b1e      	ldr	r3, [pc, #120]	; (8003f04 <HAL_RCC_OscConfig+0x508>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a1d      	ldr	r2, [pc, #116]	; (8003f04 <HAL_RCC_OscConfig+0x508>)
 8003e8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e92:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e94:	f7fd ffa0 	bl	8001dd8 <HAL_GetTick>
 8003e98:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e9a:	e008      	b.n	8003eae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e9c:	f7fd ff9c 	bl	8001dd8 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e17a      	b.n	80041a4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003eae:	4b15      	ldr	r3, [pc, #84]	; (8003f04 <HAL_RCC_OscConfig+0x508>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d0f0      	beq.n	8003e9c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d108      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x4d8>
 8003ec2:	4b0f      	ldr	r3, [pc, #60]	; (8003f00 <HAL_RCC_OscConfig+0x504>)
 8003ec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec8:	4a0d      	ldr	r2, [pc, #52]	; (8003f00 <HAL_RCC_OscConfig+0x504>)
 8003eca:	f043 0301 	orr.w	r3, r3, #1
 8003ece:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ed2:	e029      	b.n	8003f28 <HAL_RCC_OscConfig+0x52c>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	2b05      	cmp	r3, #5
 8003eda:	d115      	bne.n	8003f08 <HAL_RCC_OscConfig+0x50c>
 8003edc:	4b08      	ldr	r3, [pc, #32]	; (8003f00 <HAL_RCC_OscConfig+0x504>)
 8003ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee2:	4a07      	ldr	r2, [pc, #28]	; (8003f00 <HAL_RCC_OscConfig+0x504>)
 8003ee4:	f043 0304 	orr.w	r3, r3, #4
 8003ee8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003eec:	4b04      	ldr	r3, [pc, #16]	; (8003f00 <HAL_RCC_OscConfig+0x504>)
 8003eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef2:	4a03      	ldr	r2, [pc, #12]	; (8003f00 <HAL_RCC_OscConfig+0x504>)
 8003ef4:	f043 0301 	orr.w	r3, r3, #1
 8003ef8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003efc:	e014      	b.n	8003f28 <HAL_RCC_OscConfig+0x52c>
 8003efe:	bf00      	nop
 8003f00:	40021000 	.word	0x40021000
 8003f04:	40007000 	.word	0x40007000
 8003f08:	4b9c      	ldr	r3, [pc, #624]	; (800417c <HAL_RCC_OscConfig+0x780>)
 8003f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f0e:	4a9b      	ldr	r2, [pc, #620]	; (800417c <HAL_RCC_OscConfig+0x780>)
 8003f10:	f023 0301 	bic.w	r3, r3, #1
 8003f14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f18:	4b98      	ldr	r3, [pc, #608]	; (800417c <HAL_RCC_OscConfig+0x780>)
 8003f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f1e:	4a97      	ldr	r2, [pc, #604]	; (800417c <HAL_RCC_OscConfig+0x780>)
 8003f20:	f023 0304 	bic.w	r3, r3, #4
 8003f24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d016      	beq.n	8003f5e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f30:	f7fd ff52 	bl	8001dd8 <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f36:	e00a      	b.n	8003f4e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f38:	f7fd ff4e 	bl	8001dd8 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e12a      	b.n	80041a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f4e:	4b8b      	ldr	r3, [pc, #556]	; (800417c <HAL_RCC_OscConfig+0x780>)
 8003f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d0ed      	beq.n	8003f38 <HAL_RCC_OscConfig+0x53c>
 8003f5c:	e015      	b.n	8003f8a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f5e:	f7fd ff3b 	bl	8001dd8 <HAL_GetTick>
 8003f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f64:	e00a      	b.n	8003f7c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f66:	f7fd ff37 	bl	8001dd8 <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d901      	bls.n	8003f7c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e113      	b.n	80041a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f7c:	4b7f      	ldr	r3, [pc, #508]	; (800417c <HAL_RCC_OscConfig+0x780>)
 8003f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f82:	f003 0302 	and.w	r3, r3, #2
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d1ed      	bne.n	8003f66 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f8a:	7ffb      	ldrb	r3, [r7, #31]
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d105      	bne.n	8003f9c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f90:	4b7a      	ldr	r3, [pc, #488]	; (800417c <HAL_RCC_OscConfig+0x780>)
 8003f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f94:	4a79      	ldr	r2, [pc, #484]	; (800417c <HAL_RCC_OscConfig+0x780>)
 8003f96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f9a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	f000 80fe 	beq.w	80041a2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	f040 80d0 	bne.w	8004150 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003fb0:	4b72      	ldr	r3, [pc, #456]	; (800417c <HAL_RCC_OscConfig+0x780>)
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	f003 0203 	and.w	r2, r3, #3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d130      	bne.n	8004026 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d127      	bne.n	8004026 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fe0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d11f      	bne.n	8004026 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ff0:	2a07      	cmp	r2, #7
 8003ff2:	bf14      	ite	ne
 8003ff4:	2201      	movne	r2, #1
 8003ff6:	2200      	moveq	r2, #0
 8003ff8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d113      	bne.n	8004026 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004008:	085b      	lsrs	r3, r3, #1
 800400a:	3b01      	subs	r3, #1
 800400c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800400e:	429a      	cmp	r2, r3
 8004010:	d109      	bne.n	8004026 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800401c:	085b      	lsrs	r3, r3, #1
 800401e:	3b01      	subs	r3, #1
 8004020:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004022:	429a      	cmp	r2, r3
 8004024:	d06e      	beq.n	8004104 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	2b0c      	cmp	r3, #12
 800402a:	d069      	beq.n	8004100 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800402c:	4b53      	ldr	r3, [pc, #332]	; (800417c <HAL_RCC_OscConfig+0x780>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d105      	bne.n	8004044 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004038:	4b50      	ldr	r3, [pc, #320]	; (800417c <HAL_RCC_OscConfig+0x780>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004040:	2b00      	cmp	r3, #0
 8004042:	d001      	beq.n	8004048 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e0ad      	b.n	80041a4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004048:	4b4c      	ldr	r3, [pc, #304]	; (800417c <HAL_RCC_OscConfig+0x780>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a4b      	ldr	r2, [pc, #300]	; (800417c <HAL_RCC_OscConfig+0x780>)
 800404e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004052:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004054:	f7fd fec0 	bl	8001dd8 <HAL_GetTick>
 8004058:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800405a:	e008      	b.n	800406e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800405c:	f7fd febc 	bl	8001dd8 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	2b02      	cmp	r3, #2
 8004068:	d901      	bls.n	800406e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e09a      	b.n	80041a4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800406e:	4b43      	ldr	r3, [pc, #268]	; (800417c <HAL_RCC_OscConfig+0x780>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1f0      	bne.n	800405c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800407a:	4b40      	ldr	r3, [pc, #256]	; (800417c <HAL_RCC_OscConfig+0x780>)
 800407c:	68da      	ldr	r2, [r3, #12]
 800407e:	4b40      	ldr	r3, [pc, #256]	; (8004180 <HAL_RCC_OscConfig+0x784>)
 8004080:	4013      	ands	r3, r2
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800408a:	3a01      	subs	r2, #1
 800408c:	0112      	lsls	r2, r2, #4
 800408e:	4311      	orrs	r1, r2
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004094:	0212      	lsls	r2, r2, #8
 8004096:	4311      	orrs	r1, r2
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800409c:	0852      	lsrs	r2, r2, #1
 800409e:	3a01      	subs	r2, #1
 80040a0:	0552      	lsls	r2, r2, #21
 80040a2:	4311      	orrs	r1, r2
 80040a4:	687a      	ldr	r2, [r7, #4]
 80040a6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80040a8:	0852      	lsrs	r2, r2, #1
 80040aa:	3a01      	subs	r2, #1
 80040ac:	0652      	lsls	r2, r2, #25
 80040ae:	4311      	orrs	r1, r2
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040b4:	0912      	lsrs	r2, r2, #4
 80040b6:	0452      	lsls	r2, r2, #17
 80040b8:	430a      	orrs	r2, r1
 80040ba:	4930      	ldr	r1, [pc, #192]	; (800417c <HAL_RCC_OscConfig+0x780>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80040c0:	4b2e      	ldr	r3, [pc, #184]	; (800417c <HAL_RCC_OscConfig+0x780>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a2d      	ldr	r2, [pc, #180]	; (800417c <HAL_RCC_OscConfig+0x780>)
 80040c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040ca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040cc:	4b2b      	ldr	r3, [pc, #172]	; (800417c <HAL_RCC_OscConfig+0x780>)
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	4a2a      	ldr	r2, [pc, #168]	; (800417c <HAL_RCC_OscConfig+0x780>)
 80040d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80040d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80040d8:	f7fd fe7e 	bl	8001dd8 <HAL_GetTick>
 80040dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040de:	e008      	b.n	80040f2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040e0:	f7fd fe7a 	bl	8001dd8 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e058      	b.n	80041a4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040f2:	4b22      	ldr	r3, [pc, #136]	; (800417c <HAL_RCC_OscConfig+0x780>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d0f0      	beq.n	80040e0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040fe:	e050      	b.n	80041a2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e04f      	b.n	80041a4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004104:	4b1d      	ldr	r3, [pc, #116]	; (800417c <HAL_RCC_OscConfig+0x780>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d148      	bne.n	80041a2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004110:	4b1a      	ldr	r3, [pc, #104]	; (800417c <HAL_RCC_OscConfig+0x780>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a19      	ldr	r2, [pc, #100]	; (800417c <HAL_RCC_OscConfig+0x780>)
 8004116:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800411a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800411c:	4b17      	ldr	r3, [pc, #92]	; (800417c <HAL_RCC_OscConfig+0x780>)
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	4a16      	ldr	r2, [pc, #88]	; (800417c <HAL_RCC_OscConfig+0x780>)
 8004122:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004126:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004128:	f7fd fe56 	bl	8001dd8 <HAL_GetTick>
 800412c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800412e:	e008      	b.n	8004142 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004130:	f7fd fe52 	bl	8001dd8 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b02      	cmp	r3, #2
 800413c:	d901      	bls.n	8004142 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e030      	b.n	80041a4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004142:	4b0e      	ldr	r3, [pc, #56]	; (800417c <HAL_RCC_OscConfig+0x780>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d0f0      	beq.n	8004130 <HAL_RCC_OscConfig+0x734>
 800414e:	e028      	b.n	80041a2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	2b0c      	cmp	r3, #12
 8004154:	d023      	beq.n	800419e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004156:	4b09      	ldr	r3, [pc, #36]	; (800417c <HAL_RCC_OscConfig+0x780>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a08      	ldr	r2, [pc, #32]	; (800417c <HAL_RCC_OscConfig+0x780>)
 800415c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004160:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004162:	f7fd fe39 	bl	8001dd8 <HAL_GetTick>
 8004166:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004168:	e00c      	b.n	8004184 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800416a:	f7fd fe35 	bl	8001dd8 <HAL_GetTick>
 800416e:	4602      	mov	r2, r0
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	2b02      	cmp	r3, #2
 8004176:	d905      	bls.n	8004184 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	e013      	b.n	80041a4 <HAL_RCC_OscConfig+0x7a8>
 800417c:	40021000 	.word	0x40021000
 8004180:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004184:	4b09      	ldr	r3, [pc, #36]	; (80041ac <HAL_RCC_OscConfig+0x7b0>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1ec      	bne.n	800416a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004190:	4b06      	ldr	r3, [pc, #24]	; (80041ac <HAL_RCC_OscConfig+0x7b0>)
 8004192:	68da      	ldr	r2, [r3, #12]
 8004194:	4905      	ldr	r1, [pc, #20]	; (80041ac <HAL_RCC_OscConfig+0x7b0>)
 8004196:	4b06      	ldr	r3, [pc, #24]	; (80041b0 <HAL_RCC_OscConfig+0x7b4>)
 8004198:	4013      	ands	r3, r2
 800419a:	60cb      	str	r3, [r1, #12]
 800419c:	e001      	b.n	80041a2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e000      	b.n	80041a4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80041a2:	2300      	movs	r3, #0
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3720      	adds	r7, #32
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	40021000 	.word	0x40021000
 80041b0:	feeefffc 	.word	0xfeeefffc

080041b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d101      	bne.n	80041c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e0e7      	b.n	8004398 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041c8:	4b75      	ldr	r3, [pc, #468]	; (80043a0 <HAL_RCC_ClockConfig+0x1ec>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0307 	and.w	r3, r3, #7
 80041d0:	683a      	ldr	r2, [r7, #0]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d910      	bls.n	80041f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041d6:	4b72      	ldr	r3, [pc, #456]	; (80043a0 <HAL_RCC_ClockConfig+0x1ec>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f023 0207 	bic.w	r2, r3, #7
 80041de:	4970      	ldr	r1, [pc, #448]	; (80043a0 <HAL_RCC_ClockConfig+0x1ec>)
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041e6:	4b6e      	ldr	r3, [pc, #440]	; (80043a0 <HAL_RCC_ClockConfig+0x1ec>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0307 	and.w	r3, r3, #7
 80041ee:	683a      	ldr	r2, [r7, #0]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d001      	beq.n	80041f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e0cf      	b.n	8004398 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0302 	and.w	r3, r3, #2
 8004200:	2b00      	cmp	r3, #0
 8004202:	d010      	beq.n	8004226 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	689a      	ldr	r2, [r3, #8]
 8004208:	4b66      	ldr	r3, [pc, #408]	; (80043a4 <HAL_RCC_ClockConfig+0x1f0>)
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004210:	429a      	cmp	r2, r3
 8004212:	d908      	bls.n	8004226 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004214:	4b63      	ldr	r3, [pc, #396]	; (80043a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	4960      	ldr	r1, [pc, #384]	; (80043a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004222:	4313      	orrs	r3, r2
 8004224:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b00      	cmp	r3, #0
 8004230:	d04c      	beq.n	80042cc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	2b03      	cmp	r3, #3
 8004238:	d107      	bne.n	800424a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800423a:	4b5a      	ldr	r3, [pc, #360]	; (80043a4 <HAL_RCC_ClockConfig+0x1f0>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d121      	bne.n	800428a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004246:	2301      	movs	r3, #1
 8004248:	e0a6      	b.n	8004398 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	2b02      	cmp	r3, #2
 8004250:	d107      	bne.n	8004262 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004252:	4b54      	ldr	r3, [pc, #336]	; (80043a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d115      	bne.n	800428a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e09a      	b.n	8004398 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d107      	bne.n	800427a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800426a:	4b4e      	ldr	r3, [pc, #312]	; (80043a4 <HAL_RCC_ClockConfig+0x1f0>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 0302 	and.w	r3, r3, #2
 8004272:	2b00      	cmp	r3, #0
 8004274:	d109      	bne.n	800428a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e08e      	b.n	8004398 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800427a:	4b4a      	ldr	r3, [pc, #296]	; (80043a4 <HAL_RCC_ClockConfig+0x1f0>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004282:	2b00      	cmp	r3, #0
 8004284:	d101      	bne.n	800428a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	e086      	b.n	8004398 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800428a:	4b46      	ldr	r3, [pc, #280]	; (80043a4 <HAL_RCC_ClockConfig+0x1f0>)
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f023 0203 	bic.w	r2, r3, #3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	4943      	ldr	r1, [pc, #268]	; (80043a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004298:	4313      	orrs	r3, r2
 800429a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800429c:	f7fd fd9c 	bl	8001dd8 <HAL_GetTick>
 80042a0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042a2:	e00a      	b.n	80042ba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042a4:	f7fd fd98 	bl	8001dd8 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e06e      	b.n	8004398 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ba:	4b3a      	ldr	r3, [pc, #232]	; (80043a4 <HAL_RCC_ClockConfig+0x1f0>)
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	f003 020c 	and.w	r2, r3, #12
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d1eb      	bne.n	80042a4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d010      	beq.n	80042fa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	689a      	ldr	r2, [r3, #8]
 80042dc:	4b31      	ldr	r3, [pc, #196]	; (80043a4 <HAL_RCC_ClockConfig+0x1f0>)
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d208      	bcs.n	80042fa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042e8:	4b2e      	ldr	r3, [pc, #184]	; (80043a4 <HAL_RCC_ClockConfig+0x1f0>)
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	492b      	ldr	r1, [pc, #172]	; (80043a4 <HAL_RCC_ClockConfig+0x1f0>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042fa:	4b29      	ldr	r3, [pc, #164]	; (80043a0 <HAL_RCC_ClockConfig+0x1ec>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0307 	and.w	r3, r3, #7
 8004302:	683a      	ldr	r2, [r7, #0]
 8004304:	429a      	cmp	r2, r3
 8004306:	d210      	bcs.n	800432a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004308:	4b25      	ldr	r3, [pc, #148]	; (80043a0 <HAL_RCC_ClockConfig+0x1ec>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f023 0207 	bic.w	r2, r3, #7
 8004310:	4923      	ldr	r1, [pc, #140]	; (80043a0 <HAL_RCC_ClockConfig+0x1ec>)
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	4313      	orrs	r3, r2
 8004316:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004318:	4b21      	ldr	r3, [pc, #132]	; (80043a0 <HAL_RCC_ClockConfig+0x1ec>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0307 	and.w	r3, r3, #7
 8004320:	683a      	ldr	r2, [r7, #0]
 8004322:	429a      	cmp	r2, r3
 8004324:	d001      	beq.n	800432a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e036      	b.n	8004398 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0304 	and.w	r3, r3, #4
 8004332:	2b00      	cmp	r3, #0
 8004334:	d008      	beq.n	8004348 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004336:	4b1b      	ldr	r3, [pc, #108]	; (80043a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	4918      	ldr	r1, [pc, #96]	; (80043a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004344:	4313      	orrs	r3, r2
 8004346:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0308 	and.w	r3, r3, #8
 8004350:	2b00      	cmp	r3, #0
 8004352:	d009      	beq.n	8004368 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004354:	4b13      	ldr	r3, [pc, #76]	; (80043a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	00db      	lsls	r3, r3, #3
 8004362:	4910      	ldr	r1, [pc, #64]	; (80043a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004364:	4313      	orrs	r3, r2
 8004366:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004368:	f000 f824 	bl	80043b4 <HAL_RCC_GetSysClockFreq>
 800436c:	4602      	mov	r2, r0
 800436e:	4b0d      	ldr	r3, [pc, #52]	; (80043a4 <HAL_RCC_ClockConfig+0x1f0>)
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	091b      	lsrs	r3, r3, #4
 8004374:	f003 030f 	and.w	r3, r3, #15
 8004378:	490b      	ldr	r1, [pc, #44]	; (80043a8 <HAL_RCC_ClockConfig+0x1f4>)
 800437a:	5ccb      	ldrb	r3, [r1, r3]
 800437c:	f003 031f 	and.w	r3, r3, #31
 8004380:	fa22 f303 	lsr.w	r3, r2, r3
 8004384:	4a09      	ldr	r2, [pc, #36]	; (80043ac <HAL_RCC_ClockConfig+0x1f8>)
 8004386:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004388:	4b09      	ldr	r3, [pc, #36]	; (80043b0 <HAL_RCC_ClockConfig+0x1fc>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4618      	mov	r0, r3
 800438e:	f7fd fcd3 	bl	8001d38 <HAL_InitTick>
 8004392:	4603      	mov	r3, r0
 8004394:	72fb      	strb	r3, [r7, #11]

  return status;
 8004396:	7afb      	ldrb	r3, [r7, #11]
}
 8004398:	4618      	mov	r0, r3
 800439a:	3710      	adds	r7, #16
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	40022000 	.word	0x40022000
 80043a4:	40021000 	.word	0x40021000
 80043a8:	08006ba8 	.word	0x08006ba8
 80043ac:	20000094 	.word	0x20000094
 80043b0:	200000a8 	.word	0x200000a8

080043b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b089      	sub	sp, #36	; 0x24
 80043b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80043ba:	2300      	movs	r3, #0
 80043bc:	61fb      	str	r3, [r7, #28]
 80043be:	2300      	movs	r3, #0
 80043c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043c2:	4b3e      	ldr	r3, [pc, #248]	; (80044bc <HAL_RCC_GetSysClockFreq+0x108>)
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	f003 030c 	and.w	r3, r3, #12
 80043ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043cc:	4b3b      	ldr	r3, [pc, #236]	; (80044bc <HAL_RCC_GetSysClockFreq+0x108>)
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	f003 0303 	and.w	r3, r3, #3
 80043d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d005      	beq.n	80043e8 <HAL_RCC_GetSysClockFreq+0x34>
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	2b0c      	cmp	r3, #12
 80043e0:	d121      	bne.n	8004426 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d11e      	bne.n	8004426 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80043e8:	4b34      	ldr	r3, [pc, #208]	; (80044bc <HAL_RCC_GetSysClockFreq+0x108>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0308 	and.w	r3, r3, #8
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d107      	bne.n	8004404 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80043f4:	4b31      	ldr	r3, [pc, #196]	; (80044bc <HAL_RCC_GetSysClockFreq+0x108>)
 80043f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043fa:	0a1b      	lsrs	r3, r3, #8
 80043fc:	f003 030f 	and.w	r3, r3, #15
 8004400:	61fb      	str	r3, [r7, #28]
 8004402:	e005      	b.n	8004410 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004404:	4b2d      	ldr	r3, [pc, #180]	; (80044bc <HAL_RCC_GetSysClockFreq+0x108>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	091b      	lsrs	r3, r3, #4
 800440a:	f003 030f 	and.w	r3, r3, #15
 800440e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004410:	4a2b      	ldr	r2, [pc, #172]	; (80044c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004418:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d10d      	bne.n	800443c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004424:	e00a      	b.n	800443c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	2b04      	cmp	r3, #4
 800442a:	d102      	bne.n	8004432 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800442c:	4b25      	ldr	r3, [pc, #148]	; (80044c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800442e:	61bb      	str	r3, [r7, #24]
 8004430:	e004      	b.n	800443c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	2b08      	cmp	r3, #8
 8004436:	d101      	bne.n	800443c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004438:	4b23      	ldr	r3, [pc, #140]	; (80044c8 <HAL_RCC_GetSysClockFreq+0x114>)
 800443a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	2b0c      	cmp	r3, #12
 8004440:	d134      	bne.n	80044ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004442:	4b1e      	ldr	r3, [pc, #120]	; (80044bc <HAL_RCC_GetSysClockFreq+0x108>)
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	f003 0303 	and.w	r3, r3, #3
 800444a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	2b02      	cmp	r3, #2
 8004450:	d003      	beq.n	800445a <HAL_RCC_GetSysClockFreq+0xa6>
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	2b03      	cmp	r3, #3
 8004456:	d003      	beq.n	8004460 <HAL_RCC_GetSysClockFreq+0xac>
 8004458:	e005      	b.n	8004466 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800445a:	4b1a      	ldr	r3, [pc, #104]	; (80044c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800445c:	617b      	str	r3, [r7, #20]
      break;
 800445e:	e005      	b.n	800446c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004460:	4b19      	ldr	r3, [pc, #100]	; (80044c8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004462:	617b      	str	r3, [r7, #20]
      break;
 8004464:	e002      	b.n	800446c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	617b      	str	r3, [r7, #20]
      break;
 800446a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800446c:	4b13      	ldr	r3, [pc, #76]	; (80044bc <HAL_RCC_GetSysClockFreq+0x108>)
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	091b      	lsrs	r3, r3, #4
 8004472:	f003 0307 	and.w	r3, r3, #7
 8004476:	3301      	adds	r3, #1
 8004478:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800447a:	4b10      	ldr	r3, [pc, #64]	; (80044bc <HAL_RCC_GetSysClockFreq+0x108>)
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	0a1b      	lsrs	r3, r3, #8
 8004480:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004484:	697a      	ldr	r2, [r7, #20]
 8004486:	fb03 f202 	mul.w	r2, r3, r2
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004490:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004492:	4b0a      	ldr	r3, [pc, #40]	; (80044bc <HAL_RCC_GetSysClockFreq+0x108>)
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	0e5b      	lsrs	r3, r3, #25
 8004498:	f003 0303 	and.w	r3, r3, #3
 800449c:	3301      	adds	r3, #1
 800449e:	005b      	lsls	r3, r3, #1
 80044a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80044a2:	697a      	ldr	r2, [r7, #20]
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80044ac:	69bb      	ldr	r3, [r7, #24]
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3724      	adds	r7, #36	; 0x24
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	40021000 	.word	0x40021000
 80044c0:	08006bc0 	.word	0x08006bc0
 80044c4:	00f42400 	.word	0x00f42400
 80044c8:	007a1200 	.word	0x007a1200

080044cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044cc:	b480      	push	{r7}
 80044ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044d0:	4b03      	ldr	r3, [pc, #12]	; (80044e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80044d2:	681b      	ldr	r3, [r3, #0]
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	46bd      	mov	sp, r7
 80044d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044dc:	4770      	bx	lr
 80044de:	bf00      	nop
 80044e0:	20000094 	.word	0x20000094

080044e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044e4:	b580      	push	{r7, lr}
 80044e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80044e8:	f7ff fff0 	bl	80044cc <HAL_RCC_GetHCLKFreq>
 80044ec:	4602      	mov	r2, r0
 80044ee:	4b06      	ldr	r3, [pc, #24]	; (8004508 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	0a1b      	lsrs	r3, r3, #8
 80044f4:	f003 0307 	and.w	r3, r3, #7
 80044f8:	4904      	ldr	r1, [pc, #16]	; (800450c <HAL_RCC_GetPCLK1Freq+0x28>)
 80044fa:	5ccb      	ldrb	r3, [r1, r3]
 80044fc:	f003 031f 	and.w	r3, r3, #31
 8004500:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004504:	4618      	mov	r0, r3
 8004506:	bd80      	pop	{r7, pc}
 8004508:	40021000 	.word	0x40021000
 800450c:	08006bb8 	.word	0x08006bb8

08004510 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004514:	f7ff ffda 	bl	80044cc <HAL_RCC_GetHCLKFreq>
 8004518:	4602      	mov	r2, r0
 800451a:	4b06      	ldr	r3, [pc, #24]	; (8004534 <HAL_RCC_GetPCLK2Freq+0x24>)
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	0adb      	lsrs	r3, r3, #11
 8004520:	f003 0307 	and.w	r3, r3, #7
 8004524:	4904      	ldr	r1, [pc, #16]	; (8004538 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004526:	5ccb      	ldrb	r3, [r1, r3]
 8004528:	f003 031f 	and.w	r3, r3, #31
 800452c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004530:	4618      	mov	r0, r3
 8004532:	bd80      	pop	{r7, pc}
 8004534:	40021000 	.word	0x40021000
 8004538:	08006bb8 	.word	0x08006bb8

0800453c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b086      	sub	sp, #24
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004544:	2300      	movs	r3, #0
 8004546:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004548:	4b2a      	ldr	r3, [pc, #168]	; (80045f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800454a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800454c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d003      	beq.n	800455c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004554:	f7ff f922 	bl	800379c <HAL_PWREx_GetVoltageRange>
 8004558:	6178      	str	r0, [r7, #20]
 800455a:	e014      	b.n	8004586 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800455c:	4b25      	ldr	r3, [pc, #148]	; (80045f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800455e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004560:	4a24      	ldr	r2, [pc, #144]	; (80045f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004566:	6593      	str	r3, [r2, #88]	; 0x58
 8004568:	4b22      	ldr	r3, [pc, #136]	; (80045f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800456a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800456c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004570:	60fb      	str	r3, [r7, #12]
 8004572:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004574:	f7ff f912 	bl	800379c <HAL_PWREx_GetVoltageRange>
 8004578:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800457a:	4b1e      	ldr	r3, [pc, #120]	; (80045f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800457c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800457e:	4a1d      	ldr	r2, [pc, #116]	; (80045f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004580:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004584:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800458c:	d10b      	bne.n	80045a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2b80      	cmp	r3, #128	; 0x80
 8004592:	d919      	bls.n	80045c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2ba0      	cmp	r3, #160	; 0xa0
 8004598:	d902      	bls.n	80045a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800459a:	2302      	movs	r3, #2
 800459c:	613b      	str	r3, [r7, #16]
 800459e:	e013      	b.n	80045c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80045a0:	2301      	movs	r3, #1
 80045a2:	613b      	str	r3, [r7, #16]
 80045a4:	e010      	b.n	80045c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2b80      	cmp	r3, #128	; 0x80
 80045aa:	d902      	bls.n	80045b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80045ac:	2303      	movs	r3, #3
 80045ae:	613b      	str	r3, [r7, #16]
 80045b0:	e00a      	b.n	80045c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2b80      	cmp	r3, #128	; 0x80
 80045b6:	d102      	bne.n	80045be <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80045b8:	2302      	movs	r3, #2
 80045ba:	613b      	str	r3, [r7, #16]
 80045bc:	e004      	b.n	80045c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2b70      	cmp	r3, #112	; 0x70
 80045c2:	d101      	bne.n	80045c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80045c4:	2301      	movs	r3, #1
 80045c6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80045c8:	4b0b      	ldr	r3, [pc, #44]	; (80045f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f023 0207 	bic.w	r2, r3, #7
 80045d0:	4909      	ldr	r1, [pc, #36]	; (80045f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80045d8:	4b07      	ldr	r3, [pc, #28]	; (80045f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0307 	and.w	r3, r3, #7
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d001      	beq.n	80045ea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e000      	b.n	80045ec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3718      	adds	r7, #24
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}
 80045f4:	40021000 	.word	0x40021000
 80045f8:	40022000 	.word	0x40022000

080045fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b086      	sub	sp, #24
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004604:	2300      	movs	r3, #0
 8004606:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004608:	2300      	movs	r3, #0
 800460a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004614:	2b00      	cmp	r3, #0
 8004616:	d041      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800461c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004620:	d02a      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004622:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004626:	d824      	bhi.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004628:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800462c:	d008      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800462e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004632:	d81e      	bhi.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004634:	2b00      	cmp	r3, #0
 8004636:	d00a      	beq.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004638:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800463c:	d010      	beq.n	8004660 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800463e:	e018      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004640:	4b86      	ldr	r3, [pc, #536]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	4a85      	ldr	r2, [pc, #532]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004646:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800464a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800464c:	e015      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	3304      	adds	r3, #4
 8004652:	2100      	movs	r1, #0
 8004654:	4618      	mov	r0, r3
 8004656:	f000 facb 	bl	8004bf0 <RCCEx_PLLSAI1_Config>
 800465a:	4603      	mov	r3, r0
 800465c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800465e:	e00c      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	3320      	adds	r3, #32
 8004664:	2100      	movs	r1, #0
 8004666:	4618      	mov	r0, r3
 8004668:	f000 fbb6 	bl	8004dd8 <RCCEx_PLLSAI2_Config>
 800466c:	4603      	mov	r3, r0
 800466e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004670:	e003      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	74fb      	strb	r3, [r7, #19]
      break;
 8004676:	e000      	b.n	800467a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004678:	bf00      	nop
    }

    if(ret == HAL_OK)
 800467a:	7cfb      	ldrb	r3, [r7, #19]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d10b      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004680:	4b76      	ldr	r3, [pc, #472]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004686:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800468e:	4973      	ldr	r1, [pc, #460]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004690:	4313      	orrs	r3, r2
 8004692:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004696:	e001      	b.n	800469c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004698:	7cfb      	ldrb	r3, [r7, #19]
 800469a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d041      	beq.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046ac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80046b0:	d02a      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80046b2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80046b6:	d824      	bhi.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80046b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046bc:	d008      	beq.n	80046d0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80046be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046c2:	d81e      	bhi.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d00a      	beq.n	80046de <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80046c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80046cc:	d010      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80046ce:	e018      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80046d0:	4b62      	ldr	r3, [pc, #392]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	4a61      	ldr	r2, [pc, #388]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046da:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046dc:	e015      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	3304      	adds	r3, #4
 80046e2:	2100      	movs	r1, #0
 80046e4:	4618      	mov	r0, r3
 80046e6:	f000 fa83 	bl	8004bf0 <RCCEx_PLLSAI1_Config>
 80046ea:	4603      	mov	r3, r0
 80046ec:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046ee:	e00c      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	3320      	adds	r3, #32
 80046f4:	2100      	movs	r1, #0
 80046f6:	4618      	mov	r0, r3
 80046f8:	f000 fb6e 	bl	8004dd8 <RCCEx_PLLSAI2_Config>
 80046fc:	4603      	mov	r3, r0
 80046fe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004700:	e003      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	74fb      	strb	r3, [r7, #19]
      break;
 8004706:	e000      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004708:	bf00      	nop
    }

    if(ret == HAL_OK)
 800470a:	7cfb      	ldrb	r3, [r7, #19]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d10b      	bne.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004710:	4b52      	ldr	r3, [pc, #328]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004716:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800471e:	494f      	ldr	r1, [pc, #316]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004720:	4313      	orrs	r3, r2
 8004722:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004726:	e001      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004728:	7cfb      	ldrb	r3, [r7, #19]
 800472a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004734:	2b00      	cmp	r3, #0
 8004736:	f000 80a0 	beq.w	800487a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800473a:	2300      	movs	r3, #0
 800473c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800473e:	4b47      	ldr	r3, [pc, #284]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800474a:	2301      	movs	r3, #1
 800474c:	e000      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800474e:	2300      	movs	r3, #0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00d      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004754:	4b41      	ldr	r3, [pc, #260]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004758:	4a40      	ldr	r2, [pc, #256]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800475a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800475e:	6593      	str	r3, [r2, #88]	; 0x58
 8004760:	4b3e      	ldr	r3, [pc, #248]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004768:	60bb      	str	r3, [r7, #8]
 800476a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800476c:	2301      	movs	r3, #1
 800476e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004770:	4b3b      	ldr	r3, [pc, #236]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a3a      	ldr	r2, [pc, #232]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004776:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800477a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800477c:	f7fd fb2c 	bl	8001dd8 <HAL_GetTick>
 8004780:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004782:	e009      	b.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004784:	f7fd fb28 	bl	8001dd8 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b02      	cmp	r3, #2
 8004790:	d902      	bls.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	74fb      	strb	r3, [r7, #19]
        break;
 8004796:	e005      	b.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004798:	4b31      	ldr	r3, [pc, #196]	; (8004860 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d0ef      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80047a4:	7cfb      	ldrb	r3, [r7, #19]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d15c      	bne.n	8004864 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80047aa:	4b2c      	ldr	r3, [pc, #176]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047b4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d01f      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x200>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d019      	beq.n	80047fc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80047c8:	4b24      	ldr	r3, [pc, #144]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047d4:	4b21      	ldr	r3, [pc, #132]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047da:	4a20      	ldr	r2, [pc, #128]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047e4:	4b1d      	ldr	r3, [pc, #116]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ea:	4a1c      	ldr	r2, [pc, #112]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80047f4:	4a19      	ldr	r2, [pc, #100]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b00      	cmp	r3, #0
 8004804:	d016      	beq.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004806:	f7fd fae7 	bl	8001dd8 <HAL_GetTick>
 800480a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800480c:	e00b      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800480e:	f7fd fae3 	bl	8001dd8 <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	f241 3288 	movw	r2, #5000	; 0x1388
 800481c:	4293      	cmp	r3, r2
 800481e:	d902      	bls.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	74fb      	strb	r3, [r7, #19]
            break;
 8004824:	e006      	b.n	8004834 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004826:	4b0d      	ldr	r3, [pc, #52]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800482c:	f003 0302 	and.w	r3, r3, #2
 8004830:	2b00      	cmp	r3, #0
 8004832:	d0ec      	beq.n	800480e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004834:	7cfb      	ldrb	r3, [r7, #19]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d10c      	bne.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800483a:	4b08      	ldr	r3, [pc, #32]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800483c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004840:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800484a:	4904      	ldr	r1, [pc, #16]	; (800485c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800484c:	4313      	orrs	r3, r2
 800484e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004852:	e009      	b.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004854:	7cfb      	ldrb	r3, [r7, #19]
 8004856:	74bb      	strb	r3, [r7, #18]
 8004858:	e006      	b.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800485a:	bf00      	nop
 800485c:	40021000 	.word	0x40021000
 8004860:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004864:	7cfb      	ldrb	r3, [r7, #19]
 8004866:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004868:	7c7b      	ldrb	r3, [r7, #17]
 800486a:	2b01      	cmp	r3, #1
 800486c:	d105      	bne.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800486e:	4b9e      	ldr	r3, [pc, #632]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004872:	4a9d      	ldr	r2, [pc, #628]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004874:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004878:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0301 	and.w	r3, r3, #1
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00a      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004886:	4b98      	ldr	r3, [pc, #608]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800488c:	f023 0203 	bic.w	r2, r3, #3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004894:	4994      	ldr	r1, [pc, #592]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004896:	4313      	orrs	r3, r2
 8004898:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f003 0302 	and.w	r3, r3, #2
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00a      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80048a8:	4b8f      	ldr	r3, [pc, #572]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ae:	f023 020c 	bic.w	r2, r3, #12
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b6:	498c      	ldr	r1, [pc, #560]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0304 	and.w	r3, r3, #4
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00a      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048ca:	4b87      	ldr	r3, [pc, #540]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048d0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d8:	4983      	ldr	r1, [pc, #524]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0308 	and.w	r3, r3, #8
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00a      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048ec:	4b7e      	ldr	r3, [pc, #504]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048fa:	497b      	ldr	r1, [pc, #492]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f003 0310 	and.w	r3, r3, #16
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00a      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800490e:	4b76      	ldr	r3, [pc, #472]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004914:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800491c:	4972      	ldr	r1, [pc, #456]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800491e:	4313      	orrs	r3, r2
 8004920:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0320 	and.w	r3, r3, #32
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00a      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004930:	4b6d      	ldr	r3, [pc, #436]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004936:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800493e:	496a      	ldr	r1, [pc, #424]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004940:	4313      	orrs	r3, r2
 8004942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800494e:	2b00      	cmp	r3, #0
 8004950:	d00a      	beq.n	8004968 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004952:	4b65      	ldr	r3, [pc, #404]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004958:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004960:	4961      	ldr	r1, [pc, #388]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004962:	4313      	orrs	r3, r2
 8004964:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00a      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004974:	4b5c      	ldr	r3, [pc, #368]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800497a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004982:	4959      	ldr	r1, [pc, #356]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004984:	4313      	orrs	r3, r2
 8004986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004992:	2b00      	cmp	r3, #0
 8004994:	d00a      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004996:	4b54      	ldr	r3, [pc, #336]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800499c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049a4:	4950      	ldr	r1, [pc, #320]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049a6:	4313      	orrs	r3, r2
 80049a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d00a      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049b8:	4b4b      	ldr	r3, [pc, #300]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049be:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049c6:	4948      	ldr	r1, [pc, #288]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d00a      	beq.n	80049f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049da:	4b43      	ldr	r3, [pc, #268]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049e8:	493f      	ldr	r1, [pc, #252]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d028      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049fc:	4b3a      	ldr	r3, [pc, #232]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a0a:	4937      	ldr	r1, [pc, #220]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a1a:	d106      	bne.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a1c:	4b32      	ldr	r3, [pc, #200]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a1e:	68db      	ldr	r3, [r3, #12]
 8004a20:	4a31      	ldr	r2, [pc, #196]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a26:	60d3      	str	r3, [r2, #12]
 8004a28:	e011      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a32:	d10c      	bne.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	3304      	adds	r3, #4
 8004a38:	2101      	movs	r1, #1
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f000 f8d8 	bl	8004bf0 <RCCEx_PLLSAI1_Config>
 8004a40:	4603      	mov	r3, r0
 8004a42:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004a44:	7cfb      	ldrb	r3, [r7, #19]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d001      	beq.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004a4a:	7cfb      	ldrb	r3, [r7, #19]
 8004a4c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d028      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a5a:	4b23      	ldr	r3, [pc, #140]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a60:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a68:	491f      	ldr	r1, [pc, #124]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a78:	d106      	bne.n	8004a88 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a7a:	4b1b      	ldr	r3, [pc, #108]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	4a1a      	ldr	r2, [pc, #104]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a84:	60d3      	str	r3, [r2, #12]
 8004a86:	e011      	b.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004a90:	d10c      	bne.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	3304      	adds	r3, #4
 8004a96:	2101      	movs	r1, #1
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f000 f8a9 	bl	8004bf0 <RCCEx_PLLSAI1_Config>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004aa2:	7cfb      	ldrb	r3, [r7, #19]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d001      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004aa8:	7cfb      	ldrb	r3, [r7, #19]
 8004aaa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d02b      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ab8:	4b0b      	ldr	r3, [pc, #44]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004abe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ac6:	4908      	ldr	r1, [pc, #32]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ad2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ad6:	d109      	bne.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ad8:	4b03      	ldr	r3, [pc, #12]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	4a02      	ldr	r2, [pc, #8]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ade:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ae2:	60d3      	str	r3, [r2, #12]
 8004ae4:	e014      	b.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004ae6:	bf00      	nop
 8004ae8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004af0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004af4:	d10c      	bne.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	3304      	adds	r3, #4
 8004afa:	2101      	movs	r1, #1
 8004afc:	4618      	mov	r0, r3
 8004afe:	f000 f877 	bl	8004bf0 <RCCEx_PLLSAI1_Config>
 8004b02:	4603      	mov	r3, r0
 8004b04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b06:	7cfb      	ldrb	r3, [r7, #19]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d001      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004b0c:	7cfb      	ldrb	r3, [r7, #19]
 8004b0e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d02f      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b1c:	4b2b      	ldr	r3, [pc, #172]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b22:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b2a:	4928      	ldr	r1, [pc, #160]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b36:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b3a:	d10d      	bne.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	3304      	adds	r3, #4
 8004b40:	2102      	movs	r1, #2
 8004b42:	4618      	mov	r0, r3
 8004b44:	f000 f854 	bl	8004bf0 <RCCEx_PLLSAI1_Config>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b4c:	7cfb      	ldrb	r3, [r7, #19]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d014      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004b52:	7cfb      	ldrb	r3, [r7, #19]
 8004b54:	74bb      	strb	r3, [r7, #18]
 8004b56:	e011      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b60:	d10c      	bne.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	3320      	adds	r3, #32
 8004b66:	2102      	movs	r1, #2
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f000 f935 	bl	8004dd8 <RCCEx_PLLSAI2_Config>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b72:	7cfb      	ldrb	r3, [r7, #19]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d001      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004b78:	7cfb      	ldrb	r3, [r7, #19]
 8004b7a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d00a      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004b88:	4b10      	ldr	r3, [pc, #64]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b8e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b96:	490d      	ldr	r1, [pc, #52]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00b      	beq.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004baa:	4b08      	ldr	r3, [pc, #32]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004bba:	4904      	ldr	r1, [pc, #16]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004bc2:	7cbb      	ldrb	r3, [r7, #18]
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3718      	adds	r7, #24
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	40021000 	.word	0x40021000

08004bd0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004bd4:	4b05      	ldr	r3, [pc, #20]	; (8004bec <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a04      	ldr	r2, [pc, #16]	; (8004bec <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004bda:	f043 0304 	orr.w	r3, r3, #4
 8004bde:	6013      	str	r3, [r2, #0]
}
 8004be0:	bf00      	nop
 8004be2:	46bd      	mov	sp, r7
 8004be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be8:	4770      	bx	lr
 8004bea:	bf00      	nop
 8004bec:	40021000 	.word	0x40021000

08004bf0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004bfe:	4b75      	ldr	r3, [pc, #468]	; (8004dd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	f003 0303 	and.w	r3, r3, #3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d018      	beq.n	8004c3c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004c0a:	4b72      	ldr	r3, [pc, #456]	; (8004dd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	f003 0203 	and.w	r2, r3, #3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d10d      	bne.n	8004c36 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
       ||
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d009      	beq.n	8004c36 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004c22:	4b6c      	ldr	r3, [pc, #432]	; (8004dd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	091b      	lsrs	r3, r3, #4
 8004c28:	f003 0307 	and.w	r3, r3, #7
 8004c2c:	1c5a      	adds	r2, r3, #1
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685b      	ldr	r3, [r3, #4]
       ||
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d047      	beq.n	8004cc6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	73fb      	strb	r3, [r7, #15]
 8004c3a:	e044      	b.n	8004cc6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	2b03      	cmp	r3, #3
 8004c42:	d018      	beq.n	8004c76 <RCCEx_PLLSAI1_Config+0x86>
 8004c44:	2b03      	cmp	r3, #3
 8004c46:	d825      	bhi.n	8004c94 <RCCEx_PLLSAI1_Config+0xa4>
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d002      	beq.n	8004c52 <RCCEx_PLLSAI1_Config+0x62>
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d009      	beq.n	8004c64 <RCCEx_PLLSAI1_Config+0x74>
 8004c50:	e020      	b.n	8004c94 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c52:	4b60      	ldr	r3, [pc, #384]	; (8004dd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0302 	and.w	r3, r3, #2
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d11d      	bne.n	8004c9a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c62:	e01a      	b.n	8004c9a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c64:	4b5b      	ldr	r3, [pc, #364]	; (8004dd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d116      	bne.n	8004c9e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c74:	e013      	b.n	8004c9e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c76:	4b57      	ldr	r3, [pc, #348]	; (8004dd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10f      	bne.n	8004ca2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c82:	4b54      	ldr	r3, [pc, #336]	; (8004dd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d109      	bne.n	8004ca2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c92:	e006      	b.n	8004ca2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	73fb      	strb	r3, [r7, #15]
      break;
 8004c98:	e004      	b.n	8004ca4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c9a:	bf00      	nop
 8004c9c:	e002      	b.n	8004ca4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c9e:	bf00      	nop
 8004ca0:	e000      	b.n	8004ca4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004ca2:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ca4:	7bfb      	ldrb	r3, [r7, #15]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d10d      	bne.n	8004cc6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004caa:	4b4a      	ldr	r3, [pc, #296]	; (8004dd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6819      	ldr	r1, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	011b      	lsls	r3, r3, #4
 8004cbe:	430b      	orrs	r3, r1
 8004cc0:	4944      	ldr	r1, [pc, #272]	; (8004dd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004cc6:	7bfb      	ldrb	r3, [r7, #15]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d17d      	bne.n	8004dc8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004ccc:	4b41      	ldr	r3, [pc, #260]	; (8004dd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a40      	ldr	r2, [pc, #256]	; (8004dd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cd2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004cd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cd8:	f7fd f87e 	bl	8001dd8 <HAL_GetTick>
 8004cdc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004cde:	e009      	b.n	8004cf4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ce0:	f7fd f87a 	bl	8001dd8 <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d902      	bls.n	8004cf4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	73fb      	strb	r3, [r7, #15]
        break;
 8004cf2:	e005      	b.n	8004d00 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004cf4:	4b37      	ldr	r3, [pc, #220]	; (8004dd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d1ef      	bne.n	8004ce0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004d00:	7bfb      	ldrb	r3, [r7, #15]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d160      	bne.n	8004dc8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d111      	bne.n	8004d30 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d0c:	4b31      	ldr	r3, [pc, #196]	; (8004dd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004d14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	6892      	ldr	r2, [r2, #8]
 8004d1c:	0211      	lsls	r1, r2, #8
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	68d2      	ldr	r2, [r2, #12]
 8004d22:	0912      	lsrs	r2, r2, #4
 8004d24:	0452      	lsls	r2, r2, #17
 8004d26:	430a      	orrs	r2, r1
 8004d28:	492a      	ldr	r1, [pc, #168]	; (8004dd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	610b      	str	r3, [r1, #16]
 8004d2e:	e027      	b.n	8004d80 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d112      	bne.n	8004d5c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d36:	4b27      	ldr	r3, [pc, #156]	; (8004dd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004d3e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	6892      	ldr	r2, [r2, #8]
 8004d46:	0211      	lsls	r1, r2, #8
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	6912      	ldr	r2, [r2, #16]
 8004d4c:	0852      	lsrs	r2, r2, #1
 8004d4e:	3a01      	subs	r2, #1
 8004d50:	0552      	lsls	r2, r2, #21
 8004d52:	430a      	orrs	r2, r1
 8004d54:	491f      	ldr	r1, [pc, #124]	; (8004dd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d56:	4313      	orrs	r3, r2
 8004d58:	610b      	str	r3, [r1, #16]
 8004d5a:	e011      	b.n	8004d80 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d5c:	4b1d      	ldr	r3, [pc, #116]	; (8004dd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004d64:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	6892      	ldr	r2, [r2, #8]
 8004d6c:	0211      	lsls	r1, r2, #8
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	6952      	ldr	r2, [r2, #20]
 8004d72:	0852      	lsrs	r2, r2, #1
 8004d74:	3a01      	subs	r2, #1
 8004d76:	0652      	lsls	r2, r2, #25
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	4916      	ldr	r1, [pc, #88]	; (8004dd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004d80:	4b14      	ldr	r3, [pc, #80]	; (8004dd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a13      	ldr	r2, [pc, #76]	; (8004dd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d86:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d8a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d8c:	f7fd f824 	bl	8001dd8 <HAL_GetTick>
 8004d90:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d92:	e009      	b.n	8004da8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d94:	f7fd f820 	bl	8001dd8 <HAL_GetTick>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	1ad3      	subs	r3, r2, r3
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d902      	bls.n	8004da8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	73fb      	strb	r3, [r7, #15]
          break;
 8004da6:	e005      	b.n	8004db4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004da8:	4b0a      	ldr	r3, [pc, #40]	; (8004dd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d0ef      	beq.n	8004d94 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004db4:	7bfb      	ldrb	r3, [r7, #15]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d106      	bne.n	8004dc8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004dba:	4b06      	ldr	r3, [pc, #24]	; (8004dd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dbc:	691a      	ldr	r2, [r3, #16]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	4904      	ldr	r1, [pc, #16]	; (8004dd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3710      	adds	r7, #16
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	40021000 	.word	0x40021000

08004dd8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b084      	sub	sp, #16
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004de2:	2300      	movs	r3, #0
 8004de4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004de6:	4b6a      	ldr	r3, [pc, #424]	; (8004f90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	f003 0303 	and.w	r3, r3, #3
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d018      	beq.n	8004e24 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004df2:	4b67      	ldr	r3, [pc, #412]	; (8004f90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	f003 0203 	and.w	r2, r3, #3
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d10d      	bne.n	8004e1e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
       ||
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d009      	beq.n	8004e1e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004e0a:	4b61      	ldr	r3, [pc, #388]	; (8004f90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e0c:	68db      	ldr	r3, [r3, #12]
 8004e0e:	091b      	lsrs	r3, r3, #4
 8004e10:	f003 0307 	and.w	r3, r3, #7
 8004e14:	1c5a      	adds	r2, r3, #1
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	685b      	ldr	r3, [r3, #4]
       ||
 8004e1a:	429a      	cmp	r2, r3
 8004e1c:	d047      	beq.n	8004eae <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	73fb      	strb	r3, [r7, #15]
 8004e22:	e044      	b.n	8004eae <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2b03      	cmp	r3, #3
 8004e2a:	d018      	beq.n	8004e5e <RCCEx_PLLSAI2_Config+0x86>
 8004e2c:	2b03      	cmp	r3, #3
 8004e2e:	d825      	bhi.n	8004e7c <RCCEx_PLLSAI2_Config+0xa4>
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d002      	beq.n	8004e3a <RCCEx_PLLSAI2_Config+0x62>
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d009      	beq.n	8004e4c <RCCEx_PLLSAI2_Config+0x74>
 8004e38:	e020      	b.n	8004e7c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e3a:	4b55      	ldr	r3, [pc, #340]	; (8004f90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0302 	and.w	r3, r3, #2
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d11d      	bne.n	8004e82 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004e46:	2301      	movs	r3, #1
 8004e48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e4a:	e01a      	b.n	8004e82 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e4c:	4b50      	ldr	r3, [pc, #320]	; (8004f90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d116      	bne.n	8004e86 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e5c:	e013      	b.n	8004e86 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e5e:	4b4c      	ldr	r3, [pc, #304]	; (8004f90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d10f      	bne.n	8004e8a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e6a:	4b49      	ldr	r3, [pc, #292]	; (8004f90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d109      	bne.n	8004e8a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e7a:	e006      	b.n	8004e8a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e80:	e004      	b.n	8004e8c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e82:	bf00      	nop
 8004e84:	e002      	b.n	8004e8c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e86:	bf00      	nop
 8004e88:	e000      	b.n	8004e8c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e8a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e8c:	7bfb      	ldrb	r3, [r7, #15]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d10d      	bne.n	8004eae <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e92:	4b3f      	ldr	r3, [pc, #252]	; (8004f90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6819      	ldr	r1, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	011b      	lsls	r3, r3, #4
 8004ea6:	430b      	orrs	r3, r1
 8004ea8:	4939      	ldr	r1, [pc, #228]	; (8004f90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004eae:	7bfb      	ldrb	r3, [r7, #15]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d167      	bne.n	8004f84 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004eb4:	4b36      	ldr	r3, [pc, #216]	; (8004f90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a35      	ldr	r2, [pc, #212]	; (8004f90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ebe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ec0:	f7fc ff8a 	bl	8001dd8 <HAL_GetTick>
 8004ec4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ec6:	e009      	b.n	8004edc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004ec8:	f7fc ff86 	bl	8001dd8 <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	2b02      	cmp	r3, #2
 8004ed4:	d902      	bls.n	8004edc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	73fb      	strb	r3, [r7, #15]
        break;
 8004eda:	e005      	b.n	8004ee8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004edc:	4b2c      	ldr	r3, [pc, #176]	; (8004f90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1ef      	bne.n	8004ec8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ee8:	7bfb      	ldrb	r3, [r7, #15]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d14a      	bne.n	8004f84 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d111      	bne.n	8004f18 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ef4:	4b26      	ldr	r3, [pc, #152]	; (8004f90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ef6:	695b      	ldr	r3, [r3, #20]
 8004ef8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8004efc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f00:	687a      	ldr	r2, [r7, #4]
 8004f02:	6892      	ldr	r2, [r2, #8]
 8004f04:	0211      	lsls	r1, r2, #8
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	68d2      	ldr	r2, [r2, #12]
 8004f0a:	0912      	lsrs	r2, r2, #4
 8004f0c:	0452      	lsls	r2, r2, #17
 8004f0e:	430a      	orrs	r2, r1
 8004f10:	491f      	ldr	r1, [pc, #124]	; (8004f90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	614b      	str	r3, [r1, #20]
 8004f16:	e011      	b.n	8004f3c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004f18:	4b1d      	ldr	r3, [pc, #116]	; (8004f90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f1a:	695b      	ldr	r3, [r3, #20]
 8004f1c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004f20:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	6892      	ldr	r2, [r2, #8]
 8004f28:	0211      	lsls	r1, r2, #8
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	6912      	ldr	r2, [r2, #16]
 8004f2e:	0852      	lsrs	r2, r2, #1
 8004f30:	3a01      	subs	r2, #1
 8004f32:	0652      	lsls	r2, r2, #25
 8004f34:	430a      	orrs	r2, r1
 8004f36:	4916      	ldr	r1, [pc, #88]	; (8004f90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004f3c:	4b14      	ldr	r3, [pc, #80]	; (8004f90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a13      	ldr	r2, [pc, #76]	; (8004f90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f46:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f48:	f7fc ff46 	bl	8001dd8 <HAL_GetTick>
 8004f4c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f4e:	e009      	b.n	8004f64 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f50:	f7fc ff42 	bl	8001dd8 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d902      	bls.n	8004f64 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	73fb      	strb	r3, [r7, #15]
          break;
 8004f62:	e005      	b.n	8004f70 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f64:	4b0a      	ldr	r3, [pc, #40]	; (8004f90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d0ef      	beq.n	8004f50 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004f70:	7bfb      	ldrb	r3, [r7, #15]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d106      	bne.n	8004f84 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004f76:	4b06      	ldr	r3, [pc, #24]	; (8004f90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f78:	695a      	ldr	r2, [r3, #20]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	4904      	ldr	r1, [pc, #16]	; (8004f90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	40021000 	.word	0x40021000

08004f94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d101      	bne.n	8004fa6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e095      	b.n	80050d2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d108      	bne.n	8004fc0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fb6:	d009      	beq.n	8004fcc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	61da      	str	r2, [r3, #28]
 8004fbe:	e005      	b.n	8004fcc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d106      	bne.n	8004fec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f7fc fa16 	bl	8001418 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2202      	movs	r2, #2
 8004ff0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005002:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800500c:	d902      	bls.n	8005014 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800500e:	2300      	movs	r3, #0
 8005010:	60fb      	str	r3, [r7, #12]
 8005012:	e002      	b.n	800501a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005014:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005018:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005022:	d007      	beq.n	8005034 <HAL_SPI_Init+0xa0>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800502c:	d002      	beq.n	8005034 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	2200      	movs	r2, #0
 8005032:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005044:	431a      	orrs	r2, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	f003 0302 	and.w	r3, r3, #2
 800504e:	431a      	orrs	r2, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	695b      	ldr	r3, [r3, #20]
 8005054:	f003 0301 	and.w	r3, r3, #1
 8005058:	431a      	orrs	r2, r3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005062:	431a      	orrs	r2, r3
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	69db      	ldr	r3, [r3, #28]
 8005068:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800506c:	431a      	orrs	r2, r3
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a1b      	ldr	r3, [r3, #32]
 8005072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005076:	ea42 0103 	orr.w	r1, r2, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	430a      	orrs	r2, r1
 8005088:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	0c1b      	lsrs	r3, r3, #16
 8005090:	f003 0204 	and.w	r2, r3, #4
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005098:	f003 0310 	and.w	r3, r3, #16
 800509c:	431a      	orrs	r2, r3
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050a2:	f003 0308 	and.w	r3, r3, #8
 80050a6:	431a      	orrs	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80050b0:	ea42 0103 	orr.w	r1, r2, r3
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	430a      	orrs	r2, r1
 80050c0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3710      	adds	r7, #16
 80050d6:	46bd      	mov	sp, r7
 80050d8:	bd80      	pop	{r7, pc}

080050da <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050da:	b580      	push	{r7, lr}
 80050dc:	b082      	sub	sp, #8
 80050de:	af00      	add	r7, sp, #0
 80050e0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d101      	bne.n	80050ec <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050e8:	2301      	movs	r3, #1
 80050ea:	e040      	b.n	800516e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d106      	bne.n	8005102 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f7fc f9cf 	bl	80014a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2224      	movs	r2, #36	; 0x24
 8005106:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f022 0201 	bic.w	r2, r2, #1
 8005116:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511c:	2b00      	cmp	r3, #0
 800511e:	d002      	beq.n	8005126 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 fb6b 	bl	80057fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 f8b0 	bl	800528c <UART_SetConfig>
 800512c:	4603      	mov	r3, r0
 800512e:	2b01      	cmp	r3, #1
 8005130:	d101      	bne.n	8005136 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e01b      	b.n	800516e <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	685a      	ldr	r2, [r3, #4]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005144:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	689a      	ldr	r2, [r3, #8]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005154:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f042 0201 	orr.w	r2, r2, #1
 8005164:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 fbea 	bl	8005940 <UART_CheckIdleState>
 800516c:	4603      	mov	r3, r0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3708      	adds	r7, #8
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}

08005176 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005176:	b580      	push	{r7, lr}
 8005178:	b08a      	sub	sp, #40	; 0x28
 800517a:	af02      	add	r7, sp, #8
 800517c:	60f8      	str	r0, [r7, #12]
 800517e:	60b9      	str	r1, [r7, #8]
 8005180:	603b      	str	r3, [r7, #0]
 8005182:	4613      	mov	r3, r2
 8005184:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800518a:	2b20      	cmp	r3, #32
 800518c:	d178      	bne.n	8005280 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d002      	beq.n	800519a <HAL_UART_Transmit+0x24>
 8005194:	88fb      	ldrh	r3, [r7, #6]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d101      	bne.n	800519e <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800519a:	2301      	movs	r3, #1
 800519c:	e071      	b.n	8005282 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2221      	movs	r2, #33	; 0x21
 80051aa:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051ac:	f7fc fe14 	bl	8001dd8 <HAL_GetTick>
 80051b0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	88fa      	ldrh	r2, [r7, #6]
 80051b6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	88fa      	ldrh	r2, [r7, #6]
 80051be:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051ca:	d108      	bne.n	80051de <HAL_UART_Transmit+0x68>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	691b      	ldr	r3, [r3, #16]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d104      	bne.n	80051de <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80051d4:	2300      	movs	r3, #0
 80051d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	61bb      	str	r3, [r7, #24]
 80051dc:	e003      	b.n	80051e6 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051e2:	2300      	movs	r3, #0
 80051e4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80051e6:	e030      	b.n	800524a <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	9300      	str	r3, [sp, #0]
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	2200      	movs	r2, #0
 80051f0:	2180      	movs	r1, #128	; 0x80
 80051f2:	68f8      	ldr	r0, [r7, #12]
 80051f4:	f000 fc4c 	bl	8005a90 <UART_WaitOnFlagUntilTimeout>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d004      	beq.n	8005208 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2220      	movs	r2, #32
 8005202:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e03c      	b.n	8005282 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d10b      	bne.n	8005226 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	881a      	ldrh	r2, [r3, #0]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800521a:	b292      	uxth	r2, r2
 800521c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	3302      	adds	r3, #2
 8005222:	61bb      	str	r3, [r7, #24]
 8005224:	e008      	b.n	8005238 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	781a      	ldrb	r2, [r3, #0]
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	b292      	uxth	r2, r2
 8005230:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	3301      	adds	r3, #1
 8005236:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800523e:	b29b      	uxth	r3, r3
 8005240:	3b01      	subs	r3, #1
 8005242:	b29a      	uxth	r2, r3
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005250:	b29b      	uxth	r3, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1c8      	bne.n	80051e8 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	9300      	str	r3, [sp, #0]
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	2200      	movs	r2, #0
 800525e:	2140      	movs	r1, #64	; 0x40
 8005260:	68f8      	ldr	r0, [r7, #12]
 8005262:	f000 fc15 	bl	8005a90 <UART_WaitOnFlagUntilTimeout>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d004      	beq.n	8005276 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2220      	movs	r2, #32
 8005270:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e005      	b.n	8005282 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2220      	movs	r2, #32
 800527a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800527c:	2300      	movs	r3, #0
 800527e:	e000      	b.n	8005282 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005280:	2302      	movs	r3, #2
  }
}
 8005282:	4618      	mov	r0, r3
 8005284:	3720      	adds	r7, #32
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
	...

0800528c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800528c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005290:	b08a      	sub	sp, #40	; 0x28
 8005292:	af00      	add	r7, sp, #0
 8005294:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005296:	2300      	movs	r3, #0
 8005298:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	689a      	ldr	r2, [r3, #8]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	431a      	orrs	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	431a      	orrs	r2, r3
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	69db      	ldr	r3, [r3, #28]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	4ba4      	ldr	r3, [pc, #656]	; (800554c <UART_SetConfig+0x2c0>)
 80052bc:	4013      	ands	r3, r2
 80052be:	68fa      	ldr	r2, [r7, #12]
 80052c0:	6812      	ldr	r2, [r2, #0]
 80052c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80052c4:	430b      	orrs	r3, r1
 80052c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	68da      	ldr	r2, [r3, #12]
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	430a      	orrs	r2, r1
 80052dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	699b      	ldr	r3, [r3, #24]
 80052e2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a99      	ldr	r2, [pc, #612]	; (8005550 <UART_SetConfig+0x2c4>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d004      	beq.n	80052f8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	6a1b      	ldr	r3, [r3, #32]
 80052f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052f4:	4313      	orrs	r3, r2
 80052f6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005308:	430a      	orrs	r2, r1
 800530a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a90      	ldr	r2, [pc, #576]	; (8005554 <UART_SetConfig+0x2c8>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d126      	bne.n	8005364 <UART_SetConfig+0xd8>
 8005316:	4b90      	ldr	r3, [pc, #576]	; (8005558 <UART_SetConfig+0x2cc>)
 8005318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800531c:	f003 0303 	and.w	r3, r3, #3
 8005320:	2b03      	cmp	r3, #3
 8005322:	d81b      	bhi.n	800535c <UART_SetConfig+0xd0>
 8005324:	a201      	add	r2, pc, #4	; (adr r2, 800532c <UART_SetConfig+0xa0>)
 8005326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800532a:	bf00      	nop
 800532c:	0800533d 	.word	0x0800533d
 8005330:	0800534d 	.word	0x0800534d
 8005334:	08005345 	.word	0x08005345
 8005338:	08005355 	.word	0x08005355
 800533c:	2301      	movs	r3, #1
 800533e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005342:	e116      	b.n	8005572 <UART_SetConfig+0x2e6>
 8005344:	2302      	movs	r3, #2
 8005346:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800534a:	e112      	b.n	8005572 <UART_SetConfig+0x2e6>
 800534c:	2304      	movs	r3, #4
 800534e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005352:	e10e      	b.n	8005572 <UART_SetConfig+0x2e6>
 8005354:	2308      	movs	r3, #8
 8005356:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800535a:	e10a      	b.n	8005572 <UART_SetConfig+0x2e6>
 800535c:	2310      	movs	r3, #16
 800535e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005362:	e106      	b.n	8005572 <UART_SetConfig+0x2e6>
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a7c      	ldr	r2, [pc, #496]	; (800555c <UART_SetConfig+0x2d0>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d138      	bne.n	80053e0 <UART_SetConfig+0x154>
 800536e:	4b7a      	ldr	r3, [pc, #488]	; (8005558 <UART_SetConfig+0x2cc>)
 8005370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005374:	f003 030c 	and.w	r3, r3, #12
 8005378:	2b0c      	cmp	r3, #12
 800537a:	d82d      	bhi.n	80053d8 <UART_SetConfig+0x14c>
 800537c:	a201      	add	r2, pc, #4	; (adr r2, 8005384 <UART_SetConfig+0xf8>)
 800537e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005382:	bf00      	nop
 8005384:	080053b9 	.word	0x080053b9
 8005388:	080053d9 	.word	0x080053d9
 800538c:	080053d9 	.word	0x080053d9
 8005390:	080053d9 	.word	0x080053d9
 8005394:	080053c9 	.word	0x080053c9
 8005398:	080053d9 	.word	0x080053d9
 800539c:	080053d9 	.word	0x080053d9
 80053a0:	080053d9 	.word	0x080053d9
 80053a4:	080053c1 	.word	0x080053c1
 80053a8:	080053d9 	.word	0x080053d9
 80053ac:	080053d9 	.word	0x080053d9
 80053b0:	080053d9 	.word	0x080053d9
 80053b4:	080053d1 	.word	0x080053d1
 80053b8:	2300      	movs	r3, #0
 80053ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053be:	e0d8      	b.n	8005572 <UART_SetConfig+0x2e6>
 80053c0:	2302      	movs	r3, #2
 80053c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053c6:	e0d4      	b.n	8005572 <UART_SetConfig+0x2e6>
 80053c8:	2304      	movs	r3, #4
 80053ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053ce:	e0d0      	b.n	8005572 <UART_SetConfig+0x2e6>
 80053d0:	2308      	movs	r3, #8
 80053d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053d6:	e0cc      	b.n	8005572 <UART_SetConfig+0x2e6>
 80053d8:	2310      	movs	r3, #16
 80053da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80053de:	e0c8      	b.n	8005572 <UART_SetConfig+0x2e6>
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a5e      	ldr	r2, [pc, #376]	; (8005560 <UART_SetConfig+0x2d4>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d125      	bne.n	8005436 <UART_SetConfig+0x1aa>
 80053ea:	4b5b      	ldr	r3, [pc, #364]	; (8005558 <UART_SetConfig+0x2cc>)
 80053ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80053f4:	2b30      	cmp	r3, #48	; 0x30
 80053f6:	d016      	beq.n	8005426 <UART_SetConfig+0x19a>
 80053f8:	2b30      	cmp	r3, #48	; 0x30
 80053fa:	d818      	bhi.n	800542e <UART_SetConfig+0x1a2>
 80053fc:	2b20      	cmp	r3, #32
 80053fe:	d00a      	beq.n	8005416 <UART_SetConfig+0x18a>
 8005400:	2b20      	cmp	r3, #32
 8005402:	d814      	bhi.n	800542e <UART_SetConfig+0x1a2>
 8005404:	2b00      	cmp	r3, #0
 8005406:	d002      	beq.n	800540e <UART_SetConfig+0x182>
 8005408:	2b10      	cmp	r3, #16
 800540a:	d008      	beq.n	800541e <UART_SetConfig+0x192>
 800540c:	e00f      	b.n	800542e <UART_SetConfig+0x1a2>
 800540e:	2300      	movs	r3, #0
 8005410:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005414:	e0ad      	b.n	8005572 <UART_SetConfig+0x2e6>
 8005416:	2302      	movs	r3, #2
 8005418:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800541c:	e0a9      	b.n	8005572 <UART_SetConfig+0x2e6>
 800541e:	2304      	movs	r3, #4
 8005420:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005424:	e0a5      	b.n	8005572 <UART_SetConfig+0x2e6>
 8005426:	2308      	movs	r3, #8
 8005428:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800542c:	e0a1      	b.n	8005572 <UART_SetConfig+0x2e6>
 800542e:	2310      	movs	r3, #16
 8005430:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005434:	e09d      	b.n	8005572 <UART_SetConfig+0x2e6>
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a4a      	ldr	r2, [pc, #296]	; (8005564 <UART_SetConfig+0x2d8>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d125      	bne.n	800548c <UART_SetConfig+0x200>
 8005440:	4b45      	ldr	r3, [pc, #276]	; (8005558 <UART_SetConfig+0x2cc>)
 8005442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005446:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800544a:	2bc0      	cmp	r3, #192	; 0xc0
 800544c:	d016      	beq.n	800547c <UART_SetConfig+0x1f0>
 800544e:	2bc0      	cmp	r3, #192	; 0xc0
 8005450:	d818      	bhi.n	8005484 <UART_SetConfig+0x1f8>
 8005452:	2b80      	cmp	r3, #128	; 0x80
 8005454:	d00a      	beq.n	800546c <UART_SetConfig+0x1e0>
 8005456:	2b80      	cmp	r3, #128	; 0x80
 8005458:	d814      	bhi.n	8005484 <UART_SetConfig+0x1f8>
 800545a:	2b00      	cmp	r3, #0
 800545c:	d002      	beq.n	8005464 <UART_SetConfig+0x1d8>
 800545e:	2b40      	cmp	r3, #64	; 0x40
 8005460:	d008      	beq.n	8005474 <UART_SetConfig+0x1e8>
 8005462:	e00f      	b.n	8005484 <UART_SetConfig+0x1f8>
 8005464:	2300      	movs	r3, #0
 8005466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800546a:	e082      	b.n	8005572 <UART_SetConfig+0x2e6>
 800546c:	2302      	movs	r3, #2
 800546e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005472:	e07e      	b.n	8005572 <UART_SetConfig+0x2e6>
 8005474:	2304      	movs	r3, #4
 8005476:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800547a:	e07a      	b.n	8005572 <UART_SetConfig+0x2e6>
 800547c:	2308      	movs	r3, #8
 800547e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005482:	e076      	b.n	8005572 <UART_SetConfig+0x2e6>
 8005484:	2310      	movs	r3, #16
 8005486:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800548a:	e072      	b.n	8005572 <UART_SetConfig+0x2e6>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a35      	ldr	r2, [pc, #212]	; (8005568 <UART_SetConfig+0x2dc>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d12a      	bne.n	80054ec <UART_SetConfig+0x260>
 8005496:	4b30      	ldr	r3, [pc, #192]	; (8005558 <UART_SetConfig+0x2cc>)
 8005498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800549c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054a4:	d01a      	beq.n	80054dc <UART_SetConfig+0x250>
 80054a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054aa:	d81b      	bhi.n	80054e4 <UART_SetConfig+0x258>
 80054ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054b0:	d00c      	beq.n	80054cc <UART_SetConfig+0x240>
 80054b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054b6:	d815      	bhi.n	80054e4 <UART_SetConfig+0x258>
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d003      	beq.n	80054c4 <UART_SetConfig+0x238>
 80054bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054c0:	d008      	beq.n	80054d4 <UART_SetConfig+0x248>
 80054c2:	e00f      	b.n	80054e4 <UART_SetConfig+0x258>
 80054c4:	2300      	movs	r3, #0
 80054c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054ca:	e052      	b.n	8005572 <UART_SetConfig+0x2e6>
 80054cc:	2302      	movs	r3, #2
 80054ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054d2:	e04e      	b.n	8005572 <UART_SetConfig+0x2e6>
 80054d4:	2304      	movs	r3, #4
 80054d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054da:	e04a      	b.n	8005572 <UART_SetConfig+0x2e6>
 80054dc:	2308      	movs	r3, #8
 80054de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054e2:	e046      	b.n	8005572 <UART_SetConfig+0x2e6>
 80054e4:	2310      	movs	r3, #16
 80054e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054ea:	e042      	b.n	8005572 <UART_SetConfig+0x2e6>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a17      	ldr	r2, [pc, #92]	; (8005550 <UART_SetConfig+0x2c4>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d13a      	bne.n	800556c <UART_SetConfig+0x2e0>
 80054f6:	4b18      	ldr	r3, [pc, #96]	; (8005558 <UART_SetConfig+0x2cc>)
 80054f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005500:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005504:	d01a      	beq.n	800553c <UART_SetConfig+0x2b0>
 8005506:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800550a:	d81b      	bhi.n	8005544 <UART_SetConfig+0x2b8>
 800550c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005510:	d00c      	beq.n	800552c <UART_SetConfig+0x2a0>
 8005512:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005516:	d815      	bhi.n	8005544 <UART_SetConfig+0x2b8>
 8005518:	2b00      	cmp	r3, #0
 800551a:	d003      	beq.n	8005524 <UART_SetConfig+0x298>
 800551c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005520:	d008      	beq.n	8005534 <UART_SetConfig+0x2a8>
 8005522:	e00f      	b.n	8005544 <UART_SetConfig+0x2b8>
 8005524:	2300      	movs	r3, #0
 8005526:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800552a:	e022      	b.n	8005572 <UART_SetConfig+0x2e6>
 800552c:	2302      	movs	r3, #2
 800552e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005532:	e01e      	b.n	8005572 <UART_SetConfig+0x2e6>
 8005534:	2304      	movs	r3, #4
 8005536:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800553a:	e01a      	b.n	8005572 <UART_SetConfig+0x2e6>
 800553c:	2308      	movs	r3, #8
 800553e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005542:	e016      	b.n	8005572 <UART_SetConfig+0x2e6>
 8005544:	2310      	movs	r3, #16
 8005546:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800554a:	e012      	b.n	8005572 <UART_SetConfig+0x2e6>
 800554c:	efff69f3 	.word	0xefff69f3
 8005550:	40008000 	.word	0x40008000
 8005554:	40013800 	.word	0x40013800
 8005558:	40021000 	.word	0x40021000
 800555c:	40004400 	.word	0x40004400
 8005560:	40004800 	.word	0x40004800
 8005564:	40004c00 	.word	0x40004c00
 8005568:	40005000 	.word	0x40005000
 800556c:	2310      	movs	r3, #16
 800556e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a9f      	ldr	r2, [pc, #636]	; (80057f4 <UART_SetConfig+0x568>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d17a      	bne.n	8005672 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800557c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005580:	2b08      	cmp	r3, #8
 8005582:	d824      	bhi.n	80055ce <UART_SetConfig+0x342>
 8005584:	a201      	add	r2, pc, #4	; (adr r2, 800558c <UART_SetConfig+0x300>)
 8005586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800558a:	bf00      	nop
 800558c:	080055b1 	.word	0x080055b1
 8005590:	080055cf 	.word	0x080055cf
 8005594:	080055b9 	.word	0x080055b9
 8005598:	080055cf 	.word	0x080055cf
 800559c:	080055bf 	.word	0x080055bf
 80055a0:	080055cf 	.word	0x080055cf
 80055a4:	080055cf 	.word	0x080055cf
 80055a8:	080055cf 	.word	0x080055cf
 80055ac:	080055c7 	.word	0x080055c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055b0:	f7fe ff98 	bl	80044e4 <HAL_RCC_GetPCLK1Freq>
 80055b4:	61f8      	str	r0, [r7, #28]
        break;
 80055b6:	e010      	b.n	80055da <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055b8:	4b8f      	ldr	r3, [pc, #572]	; (80057f8 <UART_SetConfig+0x56c>)
 80055ba:	61fb      	str	r3, [r7, #28]
        break;
 80055bc:	e00d      	b.n	80055da <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055be:	f7fe fef9 	bl	80043b4 <HAL_RCC_GetSysClockFreq>
 80055c2:	61f8      	str	r0, [r7, #28]
        break;
 80055c4:	e009      	b.n	80055da <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055ca:	61fb      	str	r3, [r7, #28]
        break;
 80055cc:	e005      	b.n	80055da <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80055ce:	2300      	movs	r3, #0
 80055d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80055d8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	f000 80fb 	beq.w	80057d8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	685a      	ldr	r2, [r3, #4]
 80055e6:	4613      	mov	r3, r2
 80055e8:	005b      	lsls	r3, r3, #1
 80055ea:	4413      	add	r3, r2
 80055ec:	69fa      	ldr	r2, [r7, #28]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d305      	bcc.n	80055fe <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80055f8:	69fa      	ldr	r2, [r7, #28]
 80055fa:	429a      	cmp	r2, r3
 80055fc:	d903      	bls.n	8005606 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005604:	e0e8      	b.n	80057d8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	2200      	movs	r2, #0
 800560a:	461c      	mov	r4, r3
 800560c:	4615      	mov	r5, r2
 800560e:	f04f 0200 	mov.w	r2, #0
 8005612:	f04f 0300 	mov.w	r3, #0
 8005616:	022b      	lsls	r3, r5, #8
 8005618:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800561c:	0222      	lsls	r2, r4, #8
 800561e:	68f9      	ldr	r1, [r7, #12]
 8005620:	6849      	ldr	r1, [r1, #4]
 8005622:	0849      	lsrs	r1, r1, #1
 8005624:	2000      	movs	r0, #0
 8005626:	4688      	mov	r8, r1
 8005628:	4681      	mov	r9, r0
 800562a:	eb12 0a08 	adds.w	sl, r2, r8
 800562e:	eb43 0b09 	adc.w	fp, r3, r9
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	2200      	movs	r2, #0
 8005638:	603b      	str	r3, [r7, #0]
 800563a:	607a      	str	r2, [r7, #4]
 800563c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005640:	4650      	mov	r0, sl
 8005642:	4659      	mov	r1, fp
 8005644:	f7fa fff8 	bl	8000638 <__aeabi_uldivmod>
 8005648:	4602      	mov	r2, r0
 800564a:	460b      	mov	r3, r1
 800564c:	4613      	mov	r3, r2
 800564e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005656:	d308      	bcc.n	800566a <UART_SetConfig+0x3de>
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800565e:	d204      	bcs.n	800566a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	69ba      	ldr	r2, [r7, #24]
 8005666:	60da      	str	r2, [r3, #12]
 8005668:	e0b6      	b.n	80057d8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005670:	e0b2      	b.n	80057d8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	69db      	ldr	r3, [r3, #28]
 8005676:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800567a:	d15e      	bne.n	800573a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800567c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005680:	2b08      	cmp	r3, #8
 8005682:	d828      	bhi.n	80056d6 <UART_SetConfig+0x44a>
 8005684:	a201      	add	r2, pc, #4	; (adr r2, 800568c <UART_SetConfig+0x400>)
 8005686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800568a:	bf00      	nop
 800568c:	080056b1 	.word	0x080056b1
 8005690:	080056b9 	.word	0x080056b9
 8005694:	080056c1 	.word	0x080056c1
 8005698:	080056d7 	.word	0x080056d7
 800569c:	080056c7 	.word	0x080056c7
 80056a0:	080056d7 	.word	0x080056d7
 80056a4:	080056d7 	.word	0x080056d7
 80056a8:	080056d7 	.word	0x080056d7
 80056ac:	080056cf 	.word	0x080056cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056b0:	f7fe ff18 	bl	80044e4 <HAL_RCC_GetPCLK1Freq>
 80056b4:	61f8      	str	r0, [r7, #28]
        break;
 80056b6:	e014      	b.n	80056e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056b8:	f7fe ff2a 	bl	8004510 <HAL_RCC_GetPCLK2Freq>
 80056bc:	61f8      	str	r0, [r7, #28]
        break;
 80056be:	e010      	b.n	80056e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056c0:	4b4d      	ldr	r3, [pc, #308]	; (80057f8 <UART_SetConfig+0x56c>)
 80056c2:	61fb      	str	r3, [r7, #28]
        break;
 80056c4:	e00d      	b.n	80056e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056c6:	f7fe fe75 	bl	80043b4 <HAL_RCC_GetSysClockFreq>
 80056ca:	61f8      	str	r0, [r7, #28]
        break;
 80056cc:	e009      	b.n	80056e2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056d2:	61fb      	str	r3, [r7, #28]
        break;
 80056d4:	e005      	b.n	80056e2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80056d6:	2300      	movs	r3, #0
 80056d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80056e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d077      	beq.n	80057d8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	005a      	lsls	r2, r3, #1
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	085b      	lsrs	r3, r3, #1
 80056f2:	441a      	add	r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056fc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	2b0f      	cmp	r3, #15
 8005702:	d916      	bls.n	8005732 <UART_SetConfig+0x4a6>
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800570a:	d212      	bcs.n	8005732 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	b29b      	uxth	r3, r3
 8005710:	f023 030f 	bic.w	r3, r3, #15
 8005714:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	085b      	lsrs	r3, r3, #1
 800571a:	b29b      	uxth	r3, r3
 800571c:	f003 0307 	and.w	r3, r3, #7
 8005720:	b29a      	uxth	r2, r3
 8005722:	8afb      	ldrh	r3, [r7, #22]
 8005724:	4313      	orrs	r3, r2
 8005726:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	8afa      	ldrh	r2, [r7, #22]
 800572e:	60da      	str	r2, [r3, #12]
 8005730:	e052      	b.n	80057d8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005738:	e04e      	b.n	80057d8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800573a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800573e:	2b08      	cmp	r3, #8
 8005740:	d827      	bhi.n	8005792 <UART_SetConfig+0x506>
 8005742:	a201      	add	r2, pc, #4	; (adr r2, 8005748 <UART_SetConfig+0x4bc>)
 8005744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005748:	0800576d 	.word	0x0800576d
 800574c:	08005775 	.word	0x08005775
 8005750:	0800577d 	.word	0x0800577d
 8005754:	08005793 	.word	0x08005793
 8005758:	08005783 	.word	0x08005783
 800575c:	08005793 	.word	0x08005793
 8005760:	08005793 	.word	0x08005793
 8005764:	08005793 	.word	0x08005793
 8005768:	0800578b 	.word	0x0800578b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800576c:	f7fe feba 	bl	80044e4 <HAL_RCC_GetPCLK1Freq>
 8005770:	61f8      	str	r0, [r7, #28]
        break;
 8005772:	e014      	b.n	800579e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005774:	f7fe fecc 	bl	8004510 <HAL_RCC_GetPCLK2Freq>
 8005778:	61f8      	str	r0, [r7, #28]
        break;
 800577a:	e010      	b.n	800579e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800577c:	4b1e      	ldr	r3, [pc, #120]	; (80057f8 <UART_SetConfig+0x56c>)
 800577e:	61fb      	str	r3, [r7, #28]
        break;
 8005780:	e00d      	b.n	800579e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005782:	f7fe fe17 	bl	80043b4 <HAL_RCC_GetSysClockFreq>
 8005786:	61f8      	str	r0, [r7, #28]
        break;
 8005788:	e009      	b.n	800579e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800578a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800578e:	61fb      	str	r3, [r7, #28]
        break;
 8005790:	e005      	b.n	800579e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005792:	2300      	movs	r3, #0
 8005794:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800579c:	bf00      	nop
    }

    if (pclk != 0U)
 800579e:	69fb      	ldr	r3, [r7, #28]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d019      	beq.n	80057d8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	085a      	lsrs	r2, r3, #1
 80057aa:	69fb      	ldr	r3, [r7, #28]
 80057ac:	441a      	add	r2, r3
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057b6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	2b0f      	cmp	r3, #15
 80057bc:	d909      	bls.n	80057d2 <UART_SetConfig+0x546>
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057c4:	d205      	bcs.n	80057d2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	b29a      	uxth	r2, r3
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	60da      	str	r2, [r3, #12]
 80057d0:	e002      	b.n	80057d8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2200      	movs	r2, #0
 80057dc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2200      	movs	r2, #0
 80057e2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80057e4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3728      	adds	r7, #40	; 0x28
 80057ec:	46bd      	mov	sp, r7
 80057ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057f2:	bf00      	nop
 80057f4:	40008000 	.word	0x40008000
 80057f8:	00f42400 	.word	0x00f42400

080057fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005808:	f003 0308 	and.w	r3, r3, #8
 800580c:	2b00      	cmp	r3, #0
 800580e:	d00a      	beq.n	8005826 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	430a      	orrs	r2, r1
 8005824:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582a:	f003 0301 	and.w	r3, r3, #1
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00a      	beq.n	8005848 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	430a      	orrs	r2, r1
 8005846:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800584c:	f003 0302 	and.w	r3, r3, #2
 8005850:	2b00      	cmp	r3, #0
 8005852:	d00a      	beq.n	800586a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	430a      	orrs	r2, r1
 8005868:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586e:	f003 0304 	and.w	r3, r3, #4
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00a      	beq.n	800588c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	430a      	orrs	r2, r1
 800588a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005890:	f003 0310 	and.w	r3, r3, #16
 8005894:	2b00      	cmp	r3, #0
 8005896:	d00a      	beq.n	80058ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	430a      	orrs	r2, r1
 80058ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b2:	f003 0320 	and.w	r3, r3, #32
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00a      	beq.n	80058d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	689b      	ldr	r3, [r3, #8]
 80058c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	430a      	orrs	r2, r1
 80058ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d01a      	beq.n	8005912 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	430a      	orrs	r2, r1
 80058f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058fa:	d10a      	bne.n	8005912 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	430a      	orrs	r2, r1
 8005910:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00a      	beq.n	8005934 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	430a      	orrs	r2, r1
 8005932:	605a      	str	r2, [r3, #4]
  }
}
 8005934:	bf00      	nop
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b098      	sub	sp, #96	; 0x60
 8005944:	af02      	add	r7, sp, #8
 8005946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005950:	f7fc fa42 	bl	8001dd8 <HAL_GetTick>
 8005954:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0308 	and.w	r3, r3, #8
 8005960:	2b08      	cmp	r3, #8
 8005962:	d12e      	bne.n	80059c2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005964:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005968:	9300      	str	r3, [sp, #0]
 800596a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800596c:	2200      	movs	r2, #0
 800596e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 f88c 	bl	8005a90 <UART_WaitOnFlagUntilTimeout>
 8005978:	4603      	mov	r3, r0
 800597a:	2b00      	cmp	r3, #0
 800597c:	d021      	beq.n	80059c2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005986:	e853 3f00 	ldrex	r3, [r3]
 800598a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800598c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800598e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005992:	653b      	str	r3, [r7, #80]	; 0x50
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	461a      	mov	r2, r3
 800599a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800599c:	647b      	str	r3, [r7, #68]	; 0x44
 800599e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80059a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059a4:	e841 2300 	strex	r3, r2, [r1]
 80059a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80059aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d1e6      	bne.n	800597e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2220      	movs	r2, #32
 80059b4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059be:	2303      	movs	r3, #3
 80059c0:	e062      	b.n	8005a88 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f003 0304 	and.w	r3, r3, #4
 80059cc:	2b04      	cmp	r3, #4
 80059ce:	d149      	bne.n	8005a64 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059d4:	9300      	str	r3, [sp, #0]
 80059d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059d8:	2200      	movs	r2, #0
 80059da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 f856 	bl	8005a90 <UART_WaitOnFlagUntilTimeout>
 80059e4:	4603      	mov	r3, r0
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d03c      	beq.n	8005a64 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f2:	e853 3f00 	ldrex	r3, [r3]
 80059f6:	623b      	str	r3, [r7, #32]
   return(result);
 80059f8:	6a3b      	ldr	r3, [r7, #32]
 80059fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	461a      	mov	r2, r3
 8005a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a08:	633b      	str	r3, [r7, #48]	; 0x30
 8005a0a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a10:	e841 2300 	strex	r3, r2, [r1]
 8005a14:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d1e6      	bne.n	80059ea <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	3308      	adds	r3, #8
 8005a22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	e853 3f00 	ldrex	r3, [r3]
 8005a2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f023 0301 	bic.w	r3, r3, #1
 8005a32:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	3308      	adds	r3, #8
 8005a3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a3c:	61fa      	str	r2, [r7, #28]
 8005a3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a40:	69b9      	ldr	r1, [r7, #24]
 8005a42:	69fa      	ldr	r2, [r7, #28]
 8005a44:	e841 2300 	strex	r3, r2, [r1]
 8005a48:	617b      	str	r3, [r7, #20]
   return(result);
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d1e5      	bne.n	8005a1c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2220      	movs	r2, #32
 8005a54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a60:	2303      	movs	r3, #3
 8005a62:	e011      	b.n	8005a88 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2220      	movs	r2, #32
 8005a68:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2220      	movs	r2, #32
 8005a6e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005a86:	2300      	movs	r3, #0
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3758      	adds	r7, #88	; 0x58
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	603b      	str	r3, [r7, #0]
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aa0:	e049      	b.n	8005b36 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa8:	d045      	beq.n	8005b36 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aaa:	f7fc f995 	bl	8001dd8 <HAL_GetTick>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	69ba      	ldr	r2, [r7, #24]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d302      	bcc.n	8005ac0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d101      	bne.n	8005ac4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	e048      	b.n	8005b56 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 0304 	and.w	r3, r3, #4
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d031      	beq.n	8005b36 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	69db      	ldr	r3, [r3, #28]
 8005ad8:	f003 0308 	and.w	r3, r3, #8
 8005adc:	2b08      	cmp	r3, #8
 8005ade:	d110      	bne.n	8005b02 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	2208      	movs	r2, #8
 8005ae6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f000 f838 	bl	8005b5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2208      	movs	r2, #8
 8005af2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2200      	movs	r2, #0
 8005afa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e029      	b.n	8005b56 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	69db      	ldr	r3, [r3, #28]
 8005b08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b10:	d111      	bne.n	8005b36 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b1c:	68f8      	ldr	r0, [r7, #12]
 8005b1e:	f000 f81e 	bl	8005b5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2220      	movs	r2, #32
 8005b26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005b32:	2303      	movs	r3, #3
 8005b34:	e00f      	b.n	8005b56 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	69da      	ldr	r2, [r3, #28]
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	4013      	ands	r3, r2
 8005b40:	68ba      	ldr	r2, [r7, #8]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	bf0c      	ite	eq
 8005b46:	2301      	moveq	r3, #1
 8005b48:	2300      	movne	r3, #0
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	79fb      	ldrb	r3, [r7, #7]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d0a6      	beq.n	8005aa2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b54:	2300      	movs	r3, #0
}
 8005b56:	4618      	mov	r0, r3
 8005b58:	3710      	adds	r7, #16
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}

08005b5e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b5e:	b480      	push	{r7}
 8005b60:	b095      	sub	sp, #84	; 0x54
 8005b62:	af00      	add	r7, sp, #0
 8005b64:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b6e:	e853 3f00 	ldrex	r3, [r3]
 8005b72:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	461a      	mov	r2, r3
 8005b82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b84:	643b      	str	r3, [r7, #64]	; 0x40
 8005b86:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b88:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b8c:	e841 2300 	strex	r3, r2, [r1]
 8005b90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d1e6      	bne.n	8005b66 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	3308      	adds	r3, #8
 8005b9e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba0:	6a3b      	ldr	r3, [r7, #32]
 8005ba2:	e853 3f00 	ldrex	r3, [r3]
 8005ba6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	f023 0301 	bic.w	r3, r3, #1
 8005bae:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	3308      	adds	r3, #8
 8005bb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bb8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005bba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bbc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005bbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bc0:	e841 2300 	strex	r3, r2, [r1]
 8005bc4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1e5      	bne.n	8005b98 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d118      	bne.n	8005c06 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	e853 3f00 	ldrex	r3, [r3]
 8005be0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	f023 0310 	bic.w	r3, r3, #16
 8005be8:	647b      	str	r3, [r7, #68]	; 0x44
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	461a      	mov	r2, r3
 8005bf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bf2:	61bb      	str	r3, [r7, #24]
 8005bf4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf6:	6979      	ldr	r1, [r7, #20]
 8005bf8:	69ba      	ldr	r2, [r7, #24]
 8005bfa:	e841 2300 	strex	r3, r2, [r1]
 8005bfe:	613b      	str	r3, [r7, #16]
   return(result);
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1e6      	bne.n	8005bd4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2220      	movs	r2, #32
 8005c0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2200      	movs	r2, #0
 8005c18:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005c1a:	bf00      	nop
 8005c1c:	3754      	adds	r7, #84	; 0x54
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c26:	b084      	sub	sp, #16
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	f107 001c 	add.w	r0, r7, #28
 8005c34:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 fa65 	bl	8006114 <USB_CoreReset>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8005c4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d106      	bne.n	8005c62 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c58:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	639a      	str	r2, [r3, #56]	; 0x38
 8005c60:	e005      	b.n	8005c6e <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c66:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8005c6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	3710      	adds	r7, #16
 8005c74:	46bd      	mov	sp, r7
 8005c76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c7a:	b004      	add	sp, #16
 8005c7c:	4770      	bx	lr

08005c7e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c7e:	b480      	push	{r7}
 8005c80:	b083      	sub	sp, #12
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	f023 0201 	bic.w	r2, r3, #1
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	370c      	adds	r7, #12
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	460b      	mov	r3, r1
 8005caa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005cac:	2300      	movs	r3, #0
 8005cae:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005cbc:	78fb      	ldrb	r3, [r7, #3]
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d115      	bne.n	8005cee <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005cce:	2001      	movs	r0, #1
 8005cd0:	f7fc f88e 	bl	8001df0 <HAL_Delay>
      ms++;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 fa0c 	bl	80060f8 <USB_GetMode>
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	d01e      	beq.n	8005d24 <USB_SetCurrentMode+0x84>
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2b31      	cmp	r3, #49	; 0x31
 8005cea:	d9f0      	bls.n	8005cce <USB_SetCurrentMode+0x2e>
 8005cec:	e01a      	b.n	8005d24 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005cee:	78fb      	ldrb	r3, [r7, #3]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d115      	bne.n	8005d20 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005d00:	2001      	movs	r0, #1
 8005d02:	f7fc f875 	bl	8001df0 <HAL_Delay>
      ms++;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	3301      	adds	r3, #1
 8005d0a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 f9f3 	bl	80060f8 <USB_GetMode>
 8005d12:	4603      	mov	r3, r0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d005      	beq.n	8005d24 <USB_SetCurrentMode+0x84>
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2b31      	cmp	r3, #49	; 0x31
 8005d1c:	d9f0      	bls.n	8005d00 <USB_SetCurrentMode+0x60>
 8005d1e:	e001      	b.n	8005d24 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e005      	b.n	8005d30 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	2b32      	cmp	r3, #50	; 0x32
 8005d28:	d101      	bne.n	8005d2e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e000      	b.n	8005d30 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005d2e:	2300      	movs	r3, #0
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3710      	adds	r7, #16
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d38:	b084      	sub	sp, #16
 8005d3a:	b580      	push	{r7, lr}
 8005d3c:	b086      	sub	sp, #24
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
 8005d42:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005d46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005d52:	2300      	movs	r3, #0
 8005d54:	613b      	str	r3, [r7, #16]
 8005d56:	e009      	b.n	8005d6c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	3340      	adds	r3, #64	; 0x40
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	4413      	add	r3, r2
 8005d62:	2200      	movs	r2, #0
 8005d64:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	3301      	adds	r3, #1
 8005d6a:	613b      	str	r3, [r7, #16]
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	2b0e      	cmp	r3, #14
 8005d70:	d9f2      	bls.n	8005d58 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005d72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d11c      	bne.n	8005db2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	68fa      	ldr	r2, [r7, #12]
 8005d82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d86:	f043 0302 	orr.w	r3, r3, #2
 8005d8a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d90:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	601a      	str	r2, [r3, #0]
 8005db0:	e005      	b.n	8005dbe <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005dca:	2103      	movs	r1, #3
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f000 f959 	bl	8006084 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005dd2:	2110      	movs	r1, #16
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 f8f1 	bl	8005fbc <USB_FlushTxFifo>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d001      	beq.n	8005de4 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 f91d 	bl	8006024 <USB_FlushRxFifo>
 8005dea:	4603      	mov	r3, r0
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d001      	beq.n	8005df4 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e06:	461a      	mov	r2, r3
 8005e08:	2300      	movs	r3, #0
 8005e0a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e12:	461a      	mov	r2, r3
 8005e14:	2300      	movs	r3, #0
 8005e16:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e18:	2300      	movs	r3, #0
 8005e1a:	613b      	str	r3, [r7, #16]
 8005e1c:	e043      	b.n	8005ea6 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	015a      	lsls	r2, r3, #5
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	4413      	add	r3, r2
 8005e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e34:	d118      	bne.n	8005e68 <USB_DevInit+0x130>
    {
      if (i == 0U)
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d10a      	bne.n	8005e52 <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	015a      	lsls	r2, r3, #5
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	4413      	add	r3, r2
 8005e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e48:	461a      	mov	r2, r3
 8005e4a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e4e:	6013      	str	r3, [r2, #0]
 8005e50:	e013      	b.n	8005e7a <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	015a      	lsls	r2, r3, #5
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	4413      	add	r3, r2
 8005e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e5e:	461a      	mov	r2, r3
 8005e60:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e64:	6013      	str	r3, [r2, #0]
 8005e66:	e008      	b.n	8005e7a <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	015a      	lsls	r2, r3, #5
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	4413      	add	r3, r2
 8005e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e74:	461a      	mov	r2, r3
 8005e76:	2300      	movs	r3, #0
 8005e78:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	015a      	lsls	r2, r3, #5
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	4413      	add	r3, r2
 8005e82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e86:	461a      	mov	r2, r3
 8005e88:	2300      	movs	r3, #0
 8005e8a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	015a      	lsls	r2, r3, #5
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	4413      	add	r3, r2
 8005e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e98:	461a      	mov	r2, r3
 8005e9a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e9e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	3301      	adds	r3, #1
 8005ea4:	613b      	str	r3, [r7, #16]
 8005ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea8:	693a      	ldr	r2, [r7, #16]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d3b7      	bcc.n	8005e1e <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005eae:	2300      	movs	r3, #0
 8005eb0:	613b      	str	r3, [r7, #16]
 8005eb2:	e043      	b.n	8005f3c <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	015a      	lsls	r2, r3, #5
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	4413      	add	r3, r2
 8005ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ec6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005eca:	d118      	bne.n	8005efe <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d10a      	bne.n	8005ee8 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	015a      	lsls	r2, r3, #5
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	4413      	add	r3, r2
 8005eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ede:	461a      	mov	r2, r3
 8005ee0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005ee4:	6013      	str	r3, [r2, #0]
 8005ee6:	e013      	b.n	8005f10 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	015a      	lsls	r2, r3, #5
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	4413      	add	r3, r2
 8005ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ef4:	461a      	mov	r2, r3
 8005ef6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005efa:	6013      	str	r3, [r2, #0]
 8005efc:	e008      	b.n	8005f10 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	015a      	lsls	r2, r3, #5
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	4413      	add	r3, r2
 8005f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	015a      	lsls	r2, r3, #5
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	4413      	add	r3, r2
 8005f18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	2300      	movs	r3, #0
 8005f20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	015a      	lsls	r2, r3, #5
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	4413      	add	r3, r2
 8005f2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f2e:	461a      	mov	r2, r3
 8005f30:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005f34:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	3301      	adds	r3, #1
 8005f3a:	613b      	str	r3, [r7, #16]
 8005f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3e:	693a      	ldr	r2, [r7, #16]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d3b7      	bcc.n	8005eb4 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f4a:	691b      	ldr	r3, [r3, #16]
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f56:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005f64:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	699b      	ldr	r3, [r3, #24]
 8005f6a:	f043 0210 	orr.w	r2, r3, #16
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	699a      	ldr	r2, [r3, #24]
 8005f76:	4b10      	ldr	r3, [pc, #64]	; (8005fb8 <USB_DevInit+0x280>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005f7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d005      	beq.n	8005f90 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	699b      	ldr	r3, [r3, #24]
 8005f88:	f043 0208 	orr.w	r2, r3, #8
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005f90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d107      	bne.n	8005fa6 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f9e:	f043 0304 	orr.w	r3, r3, #4
 8005fa2:	687a      	ldr	r2, [r7, #4]
 8005fa4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005fa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3718      	adds	r7, #24
 8005fac:	46bd      	mov	sp, r7
 8005fae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005fb2:	b004      	add	sp, #16
 8005fb4:	4770      	bx	lr
 8005fb6:	bf00      	nop
 8005fb8:	803c3800 	.word	0x803c3800

08005fbc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	4a13      	ldr	r2, [pc, #76]	; (8006020 <USB_FlushTxFifo+0x64>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d901      	bls.n	8005fdc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005fd8:	2303      	movs	r3, #3
 8005fda:	e01b      	b.n	8006014 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	691b      	ldr	r3, [r3, #16]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	daf2      	bge.n	8005fca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	019b      	lsls	r3, r3, #6
 8005fec:	f043 0220 	orr.w	r2, r3, #32
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	4a08      	ldr	r2, [pc, #32]	; (8006020 <USB_FlushTxFifo+0x64>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d901      	bls.n	8006006 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006002:	2303      	movs	r3, #3
 8006004:	e006      	b.n	8006014 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	691b      	ldr	r3, [r3, #16]
 800600a:	f003 0320 	and.w	r3, r3, #32
 800600e:	2b20      	cmp	r3, #32
 8006010:	d0f0      	beq.n	8005ff4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006012:	2300      	movs	r3, #0
}
 8006014:	4618      	mov	r0, r3
 8006016:	3714      	adds	r7, #20
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr
 8006020:	00030d40 	.word	0x00030d40

08006024 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006024:	b480      	push	{r7}
 8006026:	b085      	sub	sp, #20
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800602c:	2300      	movs	r3, #0
 800602e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	3301      	adds	r3, #1
 8006034:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	4a11      	ldr	r2, [pc, #68]	; (8006080 <USB_FlushRxFifo+0x5c>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d901      	bls.n	8006042 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	e018      	b.n	8006074 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	691b      	ldr	r3, [r3, #16]
 8006046:	2b00      	cmp	r3, #0
 8006048:	daf2      	bge.n	8006030 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800604a:	2300      	movs	r3, #0
 800604c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2210      	movs	r2, #16
 8006052:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	3301      	adds	r3, #1
 8006058:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	4a08      	ldr	r2, [pc, #32]	; (8006080 <USB_FlushRxFifo+0x5c>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d901      	bls.n	8006066 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e006      	b.n	8006074 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	f003 0310 	and.w	r3, r3, #16
 800606e:	2b10      	cmp	r3, #16
 8006070:	d0f0      	beq.n	8006054 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	3714      	adds	r7, #20
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr
 8006080:	00030d40 	.word	0x00030d40

08006084 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	460b      	mov	r3, r1
 800608e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	78fb      	ldrb	r3, [r7, #3]
 800609e:	68f9      	ldr	r1, [r7, #12]
 80060a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060a4:	4313      	orrs	r3, r2
 80060a6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80060a8:	2300      	movs	r3, #0
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3714      	adds	r7, #20
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr

080060b6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80060b6:	b480      	push	{r7}
 80060b8:	b085      	sub	sp, #20
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68fa      	ldr	r2, [r7, #12]
 80060cc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80060d0:	f023 0303 	bic.w	r3, r3, #3
 80060d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	68fa      	ldr	r2, [r7, #12]
 80060e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80060e4:	f043 0302 	orr.w	r3, r3, #2
 80060e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80060ea:	2300      	movs	r3, #0
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3714      	adds	r7, #20
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	695b      	ldr	r3, [r3, #20]
 8006104:	f003 0301 	and.w	r3, r3, #1
}
 8006108:	4618      	mov	r0, r3
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800611c:	2300      	movs	r3, #0
 800611e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	3301      	adds	r3, #1
 8006124:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	4a13      	ldr	r2, [pc, #76]	; (8006178 <USB_CoreReset+0x64>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d901      	bls.n	8006132 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800612e:	2303      	movs	r3, #3
 8006130:	e01b      	b.n	800616a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	2b00      	cmp	r3, #0
 8006138:	daf2      	bge.n	8006120 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800613a:	2300      	movs	r3, #0
 800613c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	691b      	ldr	r3, [r3, #16]
 8006142:	f043 0201 	orr.w	r2, r3, #1
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	3301      	adds	r3, #1
 800614e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	4a09      	ldr	r2, [pc, #36]	; (8006178 <USB_CoreReset+0x64>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d901      	bls.n	800615c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006158:	2303      	movs	r3, #3
 800615a:	e006      	b.n	800616a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	f003 0301 	and.w	r3, r3, #1
 8006164:	2b01      	cmp	r3, #1
 8006166:	d0f0      	beq.n	800614a <USB_CoreReset+0x36>

  return HAL_OK;
 8006168:	2300      	movs	r3, #0
}
 800616a:	4618      	mov	r0, r3
 800616c:	3714      	adds	r7, #20
 800616e:	46bd      	mov	sp, r7
 8006170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006174:	4770      	bx	lr
 8006176:	bf00      	nop
 8006178:	00030d40 	.word	0x00030d40

0800617c <sniprintf>:
 800617c:	b40c      	push	{r2, r3}
 800617e:	b530      	push	{r4, r5, lr}
 8006180:	4b17      	ldr	r3, [pc, #92]	; (80061e0 <sniprintf+0x64>)
 8006182:	1e0c      	subs	r4, r1, #0
 8006184:	681d      	ldr	r5, [r3, #0]
 8006186:	b09d      	sub	sp, #116	; 0x74
 8006188:	da08      	bge.n	800619c <sniprintf+0x20>
 800618a:	238b      	movs	r3, #139	; 0x8b
 800618c:	602b      	str	r3, [r5, #0]
 800618e:	f04f 30ff 	mov.w	r0, #4294967295
 8006192:	b01d      	add	sp, #116	; 0x74
 8006194:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006198:	b002      	add	sp, #8
 800619a:	4770      	bx	lr
 800619c:	f44f 7302 	mov.w	r3, #520	; 0x208
 80061a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80061a4:	bf14      	ite	ne
 80061a6:	f104 33ff 	addne.w	r3, r4, #4294967295
 80061aa:	4623      	moveq	r3, r4
 80061ac:	9304      	str	r3, [sp, #16]
 80061ae:	9307      	str	r3, [sp, #28]
 80061b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80061b4:	9002      	str	r0, [sp, #8]
 80061b6:	9006      	str	r0, [sp, #24]
 80061b8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80061bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80061be:	ab21      	add	r3, sp, #132	; 0x84
 80061c0:	a902      	add	r1, sp, #8
 80061c2:	4628      	mov	r0, r5
 80061c4:	9301      	str	r3, [sp, #4]
 80061c6:	f000 f9a1 	bl	800650c <_svfiprintf_r>
 80061ca:	1c43      	adds	r3, r0, #1
 80061cc:	bfbc      	itt	lt
 80061ce:	238b      	movlt	r3, #139	; 0x8b
 80061d0:	602b      	strlt	r3, [r5, #0]
 80061d2:	2c00      	cmp	r4, #0
 80061d4:	d0dd      	beq.n	8006192 <sniprintf+0x16>
 80061d6:	9b02      	ldr	r3, [sp, #8]
 80061d8:	2200      	movs	r2, #0
 80061da:	701a      	strb	r2, [r3, #0]
 80061dc:	e7d9      	b.n	8006192 <sniprintf+0x16>
 80061de:	bf00      	nop
 80061e0:	200000fc 	.word	0x200000fc

080061e4 <memset>:
 80061e4:	4402      	add	r2, r0
 80061e6:	4603      	mov	r3, r0
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d100      	bne.n	80061ee <memset+0xa>
 80061ec:	4770      	bx	lr
 80061ee:	f803 1b01 	strb.w	r1, [r3], #1
 80061f2:	e7f9      	b.n	80061e8 <memset+0x4>

080061f4 <__errno>:
 80061f4:	4b01      	ldr	r3, [pc, #4]	; (80061fc <__errno+0x8>)
 80061f6:	6818      	ldr	r0, [r3, #0]
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop
 80061fc:	200000fc 	.word	0x200000fc

08006200 <__libc_init_array>:
 8006200:	b570      	push	{r4, r5, r6, lr}
 8006202:	4d0d      	ldr	r5, [pc, #52]	; (8006238 <__libc_init_array+0x38>)
 8006204:	4c0d      	ldr	r4, [pc, #52]	; (800623c <__libc_init_array+0x3c>)
 8006206:	1b64      	subs	r4, r4, r5
 8006208:	10a4      	asrs	r4, r4, #2
 800620a:	2600      	movs	r6, #0
 800620c:	42a6      	cmp	r6, r4
 800620e:	d109      	bne.n	8006224 <__libc_init_array+0x24>
 8006210:	4d0b      	ldr	r5, [pc, #44]	; (8006240 <__libc_init_array+0x40>)
 8006212:	4c0c      	ldr	r4, [pc, #48]	; (8006244 <__libc_init_array+0x44>)
 8006214:	f000 fca4 	bl	8006b60 <_init>
 8006218:	1b64      	subs	r4, r4, r5
 800621a:	10a4      	asrs	r4, r4, #2
 800621c:	2600      	movs	r6, #0
 800621e:	42a6      	cmp	r6, r4
 8006220:	d105      	bne.n	800622e <__libc_init_array+0x2e>
 8006222:	bd70      	pop	{r4, r5, r6, pc}
 8006224:	f855 3b04 	ldr.w	r3, [r5], #4
 8006228:	4798      	blx	r3
 800622a:	3601      	adds	r6, #1
 800622c:	e7ee      	b.n	800620c <__libc_init_array+0xc>
 800622e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006232:	4798      	blx	r3
 8006234:	3601      	adds	r6, #1
 8006236:	e7f2      	b.n	800621e <__libc_init_array+0x1e>
 8006238:	08006c2c 	.word	0x08006c2c
 800623c:	08006c2c 	.word	0x08006c2c
 8006240:	08006c2c 	.word	0x08006c2c
 8006244:	08006c30 	.word	0x08006c30

08006248 <__retarget_lock_acquire_recursive>:
 8006248:	4770      	bx	lr

0800624a <__retarget_lock_release_recursive>:
 800624a:	4770      	bx	lr

0800624c <memcpy>:
 800624c:	440a      	add	r2, r1
 800624e:	4291      	cmp	r1, r2
 8006250:	f100 33ff 	add.w	r3, r0, #4294967295
 8006254:	d100      	bne.n	8006258 <memcpy+0xc>
 8006256:	4770      	bx	lr
 8006258:	b510      	push	{r4, lr}
 800625a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800625e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006262:	4291      	cmp	r1, r2
 8006264:	d1f9      	bne.n	800625a <memcpy+0xe>
 8006266:	bd10      	pop	{r4, pc}

08006268 <_free_r>:
 8006268:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800626a:	2900      	cmp	r1, #0
 800626c:	d044      	beq.n	80062f8 <_free_r+0x90>
 800626e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006272:	9001      	str	r0, [sp, #4]
 8006274:	2b00      	cmp	r3, #0
 8006276:	f1a1 0404 	sub.w	r4, r1, #4
 800627a:	bfb8      	it	lt
 800627c:	18e4      	addlt	r4, r4, r3
 800627e:	f000 f8df 	bl	8006440 <__malloc_lock>
 8006282:	4a1e      	ldr	r2, [pc, #120]	; (80062fc <_free_r+0x94>)
 8006284:	9801      	ldr	r0, [sp, #4]
 8006286:	6813      	ldr	r3, [r2, #0]
 8006288:	b933      	cbnz	r3, 8006298 <_free_r+0x30>
 800628a:	6063      	str	r3, [r4, #4]
 800628c:	6014      	str	r4, [r2, #0]
 800628e:	b003      	add	sp, #12
 8006290:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006294:	f000 b8da 	b.w	800644c <__malloc_unlock>
 8006298:	42a3      	cmp	r3, r4
 800629a:	d908      	bls.n	80062ae <_free_r+0x46>
 800629c:	6825      	ldr	r5, [r4, #0]
 800629e:	1961      	adds	r1, r4, r5
 80062a0:	428b      	cmp	r3, r1
 80062a2:	bf01      	itttt	eq
 80062a4:	6819      	ldreq	r1, [r3, #0]
 80062a6:	685b      	ldreq	r3, [r3, #4]
 80062a8:	1949      	addeq	r1, r1, r5
 80062aa:	6021      	streq	r1, [r4, #0]
 80062ac:	e7ed      	b.n	800628a <_free_r+0x22>
 80062ae:	461a      	mov	r2, r3
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	b10b      	cbz	r3, 80062b8 <_free_r+0x50>
 80062b4:	42a3      	cmp	r3, r4
 80062b6:	d9fa      	bls.n	80062ae <_free_r+0x46>
 80062b8:	6811      	ldr	r1, [r2, #0]
 80062ba:	1855      	adds	r5, r2, r1
 80062bc:	42a5      	cmp	r5, r4
 80062be:	d10b      	bne.n	80062d8 <_free_r+0x70>
 80062c0:	6824      	ldr	r4, [r4, #0]
 80062c2:	4421      	add	r1, r4
 80062c4:	1854      	adds	r4, r2, r1
 80062c6:	42a3      	cmp	r3, r4
 80062c8:	6011      	str	r1, [r2, #0]
 80062ca:	d1e0      	bne.n	800628e <_free_r+0x26>
 80062cc:	681c      	ldr	r4, [r3, #0]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	6053      	str	r3, [r2, #4]
 80062d2:	440c      	add	r4, r1
 80062d4:	6014      	str	r4, [r2, #0]
 80062d6:	e7da      	b.n	800628e <_free_r+0x26>
 80062d8:	d902      	bls.n	80062e0 <_free_r+0x78>
 80062da:	230c      	movs	r3, #12
 80062dc:	6003      	str	r3, [r0, #0]
 80062de:	e7d6      	b.n	800628e <_free_r+0x26>
 80062e0:	6825      	ldr	r5, [r4, #0]
 80062e2:	1961      	adds	r1, r4, r5
 80062e4:	428b      	cmp	r3, r1
 80062e6:	bf04      	itt	eq
 80062e8:	6819      	ldreq	r1, [r3, #0]
 80062ea:	685b      	ldreq	r3, [r3, #4]
 80062ec:	6063      	str	r3, [r4, #4]
 80062ee:	bf04      	itt	eq
 80062f0:	1949      	addeq	r1, r1, r5
 80062f2:	6021      	streq	r1, [r4, #0]
 80062f4:	6054      	str	r4, [r2, #4]
 80062f6:	e7ca      	b.n	800628e <_free_r+0x26>
 80062f8:	b003      	add	sp, #12
 80062fa:	bd30      	pop	{r4, r5, pc}
 80062fc:	20000a9c 	.word	0x20000a9c

08006300 <sbrk_aligned>:
 8006300:	b570      	push	{r4, r5, r6, lr}
 8006302:	4e0e      	ldr	r6, [pc, #56]	; (800633c <sbrk_aligned+0x3c>)
 8006304:	460c      	mov	r4, r1
 8006306:	6831      	ldr	r1, [r6, #0]
 8006308:	4605      	mov	r5, r0
 800630a:	b911      	cbnz	r1, 8006312 <sbrk_aligned+0x12>
 800630c:	f000 fba6 	bl	8006a5c <_sbrk_r>
 8006310:	6030      	str	r0, [r6, #0]
 8006312:	4621      	mov	r1, r4
 8006314:	4628      	mov	r0, r5
 8006316:	f000 fba1 	bl	8006a5c <_sbrk_r>
 800631a:	1c43      	adds	r3, r0, #1
 800631c:	d00a      	beq.n	8006334 <sbrk_aligned+0x34>
 800631e:	1cc4      	adds	r4, r0, #3
 8006320:	f024 0403 	bic.w	r4, r4, #3
 8006324:	42a0      	cmp	r0, r4
 8006326:	d007      	beq.n	8006338 <sbrk_aligned+0x38>
 8006328:	1a21      	subs	r1, r4, r0
 800632a:	4628      	mov	r0, r5
 800632c:	f000 fb96 	bl	8006a5c <_sbrk_r>
 8006330:	3001      	adds	r0, #1
 8006332:	d101      	bne.n	8006338 <sbrk_aligned+0x38>
 8006334:	f04f 34ff 	mov.w	r4, #4294967295
 8006338:	4620      	mov	r0, r4
 800633a:	bd70      	pop	{r4, r5, r6, pc}
 800633c:	20000aa0 	.word	0x20000aa0

08006340 <_malloc_r>:
 8006340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006344:	1ccd      	adds	r5, r1, #3
 8006346:	f025 0503 	bic.w	r5, r5, #3
 800634a:	3508      	adds	r5, #8
 800634c:	2d0c      	cmp	r5, #12
 800634e:	bf38      	it	cc
 8006350:	250c      	movcc	r5, #12
 8006352:	2d00      	cmp	r5, #0
 8006354:	4607      	mov	r7, r0
 8006356:	db01      	blt.n	800635c <_malloc_r+0x1c>
 8006358:	42a9      	cmp	r1, r5
 800635a:	d905      	bls.n	8006368 <_malloc_r+0x28>
 800635c:	230c      	movs	r3, #12
 800635e:	603b      	str	r3, [r7, #0]
 8006360:	2600      	movs	r6, #0
 8006362:	4630      	mov	r0, r6
 8006364:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006368:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800643c <_malloc_r+0xfc>
 800636c:	f000 f868 	bl	8006440 <__malloc_lock>
 8006370:	f8d8 3000 	ldr.w	r3, [r8]
 8006374:	461c      	mov	r4, r3
 8006376:	bb5c      	cbnz	r4, 80063d0 <_malloc_r+0x90>
 8006378:	4629      	mov	r1, r5
 800637a:	4638      	mov	r0, r7
 800637c:	f7ff ffc0 	bl	8006300 <sbrk_aligned>
 8006380:	1c43      	adds	r3, r0, #1
 8006382:	4604      	mov	r4, r0
 8006384:	d155      	bne.n	8006432 <_malloc_r+0xf2>
 8006386:	f8d8 4000 	ldr.w	r4, [r8]
 800638a:	4626      	mov	r6, r4
 800638c:	2e00      	cmp	r6, #0
 800638e:	d145      	bne.n	800641c <_malloc_r+0xdc>
 8006390:	2c00      	cmp	r4, #0
 8006392:	d048      	beq.n	8006426 <_malloc_r+0xe6>
 8006394:	6823      	ldr	r3, [r4, #0]
 8006396:	4631      	mov	r1, r6
 8006398:	4638      	mov	r0, r7
 800639a:	eb04 0903 	add.w	r9, r4, r3
 800639e:	f000 fb5d 	bl	8006a5c <_sbrk_r>
 80063a2:	4581      	cmp	r9, r0
 80063a4:	d13f      	bne.n	8006426 <_malloc_r+0xe6>
 80063a6:	6821      	ldr	r1, [r4, #0]
 80063a8:	1a6d      	subs	r5, r5, r1
 80063aa:	4629      	mov	r1, r5
 80063ac:	4638      	mov	r0, r7
 80063ae:	f7ff ffa7 	bl	8006300 <sbrk_aligned>
 80063b2:	3001      	adds	r0, #1
 80063b4:	d037      	beq.n	8006426 <_malloc_r+0xe6>
 80063b6:	6823      	ldr	r3, [r4, #0]
 80063b8:	442b      	add	r3, r5
 80063ba:	6023      	str	r3, [r4, #0]
 80063bc:	f8d8 3000 	ldr.w	r3, [r8]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d038      	beq.n	8006436 <_malloc_r+0xf6>
 80063c4:	685a      	ldr	r2, [r3, #4]
 80063c6:	42a2      	cmp	r2, r4
 80063c8:	d12b      	bne.n	8006422 <_malloc_r+0xe2>
 80063ca:	2200      	movs	r2, #0
 80063cc:	605a      	str	r2, [r3, #4]
 80063ce:	e00f      	b.n	80063f0 <_malloc_r+0xb0>
 80063d0:	6822      	ldr	r2, [r4, #0]
 80063d2:	1b52      	subs	r2, r2, r5
 80063d4:	d41f      	bmi.n	8006416 <_malloc_r+0xd6>
 80063d6:	2a0b      	cmp	r2, #11
 80063d8:	d917      	bls.n	800640a <_malloc_r+0xca>
 80063da:	1961      	adds	r1, r4, r5
 80063dc:	42a3      	cmp	r3, r4
 80063de:	6025      	str	r5, [r4, #0]
 80063e0:	bf18      	it	ne
 80063e2:	6059      	strne	r1, [r3, #4]
 80063e4:	6863      	ldr	r3, [r4, #4]
 80063e6:	bf08      	it	eq
 80063e8:	f8c8 1000 	streq.w	r1, [r8]
 80063ec:	5162      	str	r2, [r4, r5]
 80063ee:	604b      	str	r3, [r1, #4]
 80063f0:	4638      	mov	r0, r7
 80063f2:	f104 060b 	add.w	r6, r4, #11
 80063f6:	f000 f829 	bl	800644c <__malloc_unlock>
 80063fa:	f026 0607 	bic.w	r6, r6, #7
 80063fe:	1d23      	adds	r3, r4, #4
 8006400:	1af2      	subs	r2, r6, r3
 8006402:	d0ae      	beq.n	8006362 <_malloc_r+0x22>
 8006404:	1b9b      	subs	r3, r3, r6
 8006406:	50a3      	str	r3, [r4, r2]
 8006408:	e7ab      	b.n	8006362 <_malloc_r+0x22>
 800640a:	42a3      	cmp	r3, r4
 800640c:	6862      	ldr	r2, [r4, #4]
 800640e:	d1dd      	bne.n	80063cc <_malloc_r+0x8c>
 8006410:	f8c8 2000 	str.w	r2, [r8]
 8006414:	e7ec      	b.n	80063f0 <_malloc_r+0xb0>
 8006416:	4623      	mov	r3, r4
 8006418:	6864      	ldr	r4, [r4, #4]
 800641a:	e7ac      	b.n	8006376 <_malloc_r+0x36>
 800641c:	4634      	mov	r4, r6
 800641e:	6876      	ldr	r6, [r6, #4]
 8006420:	e7b4      	b.n	800638c <_malloc_r+0x4c>
 8006422:	4613      	mov	r3, r2
 8006424:	e7cc      	b.n	80063c0 <_malloc_r+0x80>
 8006426:	230c      	movs	r3, #12
 8006428:	603b      	str	r3, [r7, #0]
 800642a:	4638      	mov	r0, r7
 800642c:	f000 f80e 	bl	800644c <__malloc_unlock>
 8006430:	e797      	b.n	8006362 <_malloc_r+0x22>
 8006432:	6025      	str	r5, [r4, #0]
 8006434:	e7dc      	b.n	80063f0 <_malloc_r+0xb0>
 8006436:	605b      	str	r3, [r3, #4]
 8006438:	deff      	udf	#255	; 0xff
 800643a:	bf00      	nop
 800643c:	20000a9c 	.word	0x20000a9c

08006440 <__malloc_lock>:
 8006440:	4801      	ldr	r0, [pc, #4]	; (8006448 <__malloc_lock+0x8>)
 8006442:	f7ff bf01 	b.w	8006248 <__retarget_lock_acquire_recursive>
 8006446:	bf00      	nop
 8006448:	20000a98 	.word	0x20000a98

0800644c <__malloc_unlock>:
 800644c:	4801      	ldr	r0, [pc, #4]	; (8006454 <__malloc_unlock+0x8>)
 800644e:	f7ff befc 	b.w	800624a <__retarget_lock_release_recursive>
 8006452:	bf00      	nop
 8006454:	20000a98 	.word	0x20000a98

08006458 <__ssputs_r>:
 8006458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800645c:	688e      	ldr	r6, [r1, #8]
 800645e:	461f      	mov	r7, r3
 8006460:	42be      	cmp	r6, r7
 8006462:	680b      	ldr	r3, [r1, #0]
 8006464:	4682      	mov	sl, r0
 8006466:	460c      	mov	r4, r1
 8006468:	4690      	mov	r8, r2
 800646a:	d82c      	bhi.n	80064c6 <__ssputs_r+0x6e>
 800646c:	898a      	ldrh	r2, [r1, #12]
 800646e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006472:	d026      	beq.n	80064c2 <__ssputs_r+0x6a>
 8006474:	6965      	ldr	r5, [r4, #20]
 8006476:	6909      	ldr	r1, [r1, #16]
 8006478:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800647c:	eba3 0901 	sub.w	r9, r3, r1
 8006480:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006484:	1c7b      	adds	r3, r7, #1
 8006486:	444b      	add	r3, r9
 8006488:	106d      	asrs	r5, r5, #1
 800648a:	429d      	cmp	r5, r3
 800648c:	bf38      	it	cc
 800648e:	461d      	movcc	r5, r3
 8006490:	0553      	lsls	r3, r2, #21
 8006492:	d527      	bpl.n	80064e4 <__ssputs_r+0x8c>
 8006494:	4629      	mov	r1, r5
 8006496:	f7ff ff53 	bl	8006340 <_malloc_r>
 800649a:	4606      	mov	r6, r0
 800649c:	b360      	cbz	r0, 80064f8 <__ssputs_r+0xa0>
 800649e:	6921      	ldr	r1, [r4, #16]
 80064a0:	464a      	mov	r2, r9
 80064a2:	f7ff fed3 	bl	800624c <memcpy>
 80064a6:	89a3      	ldrh	r3, [r4, #12]
 80064a8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80064ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064b0:	81a3      	strh	r3, [r4, #12]
 80064b2:	6126      	str	r6, [r4, #16]
 80064b4:	6165      	str	r5, [r4, #20]
 80064b6:	444e      	add	r6, r9
 80064b8:	eba5 0509 	sub.w	r5, r5, r9
 80064bc:	6026      	str	r6, [r4, #0]
 80064be:	60a5      	str	r5, [r4, #8]
 80064c0:	463e      	mov	r6, r7
 80064c2:	42be      	cmp	r6, r7
 80064c4:	d900      	bls.n	80064c8 <__ssputs_r+0x70>
 80064c6:	463e      	mov	r6, r7
 80064c8:	6820      	ldr	r0, [r4, #0]
 80064ca:	4632      	mov	r2, r6
 80064cc:	4641      	mov	r1, r8
 80064ce:	f000 faab 	bl	8006a28 <memmove>
 80064d2:	68a3      	ldr	r3, [r4, #8]
 80064d4:	1b9b      	subs	r3, r3, r6
 80064d6:	60a3      	str	r3, [r4, #8]
 80064d8:	6823      	ldr	r3, [r4, #0]
 80064da:	4433      	add	r3, r6
 80064dc:	6023      	str	r3, [r4, #0]
 80064de:	2000      	movs	r0, #0
 80064e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064e4:	462a      	mov	r2, r5
 80064e6:	f000 fac9 	bl	8006a7c <_realloc_r>
 80064ea:	4606      	mov	r6, r0
 80064ec:	2800      	cmp	r0, #0
 80064ee:	d1e0      	bne.n	80064b2 <__ssputs_r+0x5a>
 80064f0:	6921      	ldr	r1, [r4, #16]
 80064f2:	4650      	mov	r0, sl
 80064f4:	f7ff feb8 	bl	8006268 <_free_r>
 80064f8:	230c      	movs	r3, #12
 80064fa:	f8ca 3000 	str.w	r3, [sl]
 80064fe:	89a3      	ldrh	r3, [r4, #12]
 8006500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006504:	81a3      	strh	r3, [r4, #12]
 8006506:	f04f 30ff 	mov.w	r0, #4294967295
 800650a:	e7e9      	b.n	80064e0 <__ssputs_r+0x88>

0800650c <_svfiprintf_r>:
 800650c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006510:	4698      	mov	r8, r3
 8006512:	898b      	ldrh	r3, [r1, #12]
 8006514:	061b      	lsls	r3, r3, #24
 8006516:	b09d      	sub	sp, #116	; 0x74
 8006518:	4607      	mov	r7, r0
 800651a:	460d      	mov	r5, r1
 800651c:	4614      	mov	r4, r2
 800651e:	d50e      	bpl.n	800653e <_svfiprintf_r+0x32>
 8006520:	690b      	ldr	r3, [r1, #16]
 8006522:	b963      	cbnz	r3, 800653e <_svfiprintf_r+0x32>
 8006524:	2140      	movs	r1, #64	; 0x40
 8006526:	f7ff ff0b 	bl	8006340 <_malloc_r>
 800652a:	6028      	str	r0, [r5, #0]
 800652c:	6128      	str	r0, [r5, #16]
 800652e:	b920      	cbnz	r0, 800653a <_svfiprintf_r+0x2e>
 8006530:	230c      	movs	r3, #12
 8006532:	603b      	str	r3, [r7, #0]
 8006534:	f04f 30ff 	mov.w	r0, #4294967295
 8006538:	e0d0      	b.n	80066dc <_svfiprintf_r+0x1d0>
 800653a:	2340      	movs	r3, #64	; 0x40
 800653c:	616b      	str	r3, [r5, #20]
 800653e:	2300      	movs	r3, #0
 8006540:	9309      	str	r3, [sp, #36]	; 0x24
 8006542:	2320      	movs	r3, #32
 8006544:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006548:	f8cd 800c 	str.w	r8, [sp, #12]
 800654c:	2330      	movs	r3, #48	; 0x30
 800654e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80066f4 <_svfiprintf_r+0x1e8>
 8006552:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006556:	f04f 0901 	mov.w	r9, #1
 800655a:	4623      	mov	r3, r4
 800655c:	469a      	mov	sl, r3
 800655e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006562:	b10a      	cbz	r2, 8006568 <_svfiprintf_r+0x5c>
 8006564:	2a25      	cmp	r2, #37	; 0x25
 8006566:	d1f9      	bne.n	800655c <_svfiprintf_r+0x50>
 8006568:	ebba 0b04 	subs.w	fp, sl, r4
 800656c:	d00b      	beq.n	8006586 <_svfiprintf_r+0x7a>
 800656e:	465b      	mov	r3, fp
 8006570:	4622      	mov	r2, r4
 8006572:	4629      	mov	r1, r5
 8006574:	4638      	mov	r0, r7
 8006576:	f7ff ff6f 	bl	8006458 <__ssputs_r>
 800657a:	3001      	adds	r0, #1
 800657c:	f000 80a9 	beq.w	80066d2 <_svfiprintf_r+0x1c6>
 8006580:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006582:	445a      	add	r2, fp
 8006584:	9209      	str	r2, [sp, #36]	; 0x24
 8006586:	f89a 3000 	ldrb.w	r3, [sl]
 800658a:	2b00      	cmp	r3, #0
 800658c:	f000 80a1 	beq.w	80066d2 <_svfiprintf_r+0x1c6>
 8006590:	2300      	movs	r3, #0
 8006592:	f04f 32ff 	mov.w	r2, #4294967295
 8006596:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800659a:	f10a 0a01 	add.w	sl, sl, #1
 800659e:	9304      	str	r3, [sp, #16]
 80065a0:	9307      	str	r3, [sp, #28]
 80065a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065a6:	931a      	str	r3, [sp, #104]	; 0x68
 80065a8:	4654      	mov	r4, sl
 80065aa:	2205      	movs	r2, #5
 80065ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065b0:	4850      	ldr	r0, [pc, #320]	; (80066f4 <_svfiprintf_r+0x1e8>)
 80065b2:	f7f9 fe0d 	bl	80001d0 <memchr>
 80065b6:	9a04      	ldr	r2, [sp, #16]
 80065b8:	b9d8      	cbnz	r0, 80065f2 <_svfiprintf_r+0xe6>
 80065ba:	06d0      	lsls	r0, r2, #27
 80065bc:	bf44      	itt	mi
 80065be:	2320      	movmi	r3, #32
 80065c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065c4:	0711      	lsls	r1, r2, #28
 80065c6:	bf44      	itt	mi
 80065c8:	232b      	movmi	r3, #43	; 0x2b
 80065ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065ce:	f89a 3000 	ldrb.w	r3, [sl]
 80065d2:	2b2a      	cmp	r3, #42	; 0x2a
 80065d4:	d015      	beq.n	8006602 <_svfiprintf_r+0xf6>
 80065d6:	9a07      	ldr	r2, [sp, #28]
 80065d8:	4654      	mov	r4, sl
 80065da:	2000      	movs	r0, #0
 80065dc:	f04f 0c0a 	mov.w	ip, #10
 80065e0:	4621      	mov	r1, r4
 80065e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80065e6:	3b30      	subs	r3, #48	; 0x30
 80065e8:	2b09      	cmp	r3, #9
 80065ea:	d94d      	bls.n	8006688 <_svfiprintf_r+0x17c>
 80065ec:	b1b0      	cbz	r0, 800661c <_svfiprintf_r+0x110>
 80065ee:	9207      	str	r2, [sp, #28]
 80065f0:	e014      	b.n	800661c <_svfiprintf_r+0x110>
 80065f2:	eba0 0308 	sub.w	r3, r0, r8
 80065f6:	fa09 f303 	lsl.w	r3, r9, r3
 80065fa:	4313      	orrs	r3, r2
 80065fc:	9304      	str	r3, [sp, #16]
 80065fe:	46a2      	mov	sl, r4
 8006600:	e7d2      	b.n	80065a8 <_svfiprintf_r+0x9c>
 8006602:	9b03      	ldr	r3, [sp, #12]
 8006604:	1d19      	adds	r1, r3, #4
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	9103      	str	r1, [sp, #12]
 800660a:	2b00      	cmp	r3, #0
 800660c:	bfbb      	ittet	lt
 800660e:	425b      	neglt	r3, r3
 8006610:	f042 0202 	orrlt.w	r2, r2, #2
 8006614:	9307      	strge	r3, [sp, #28]
 8006616:	9307      	strlt	r3, [sp, #28]
 8006618:	bfb8      	it	lt
 800661a:	9204      	strlt	r2, [sp, #16]
 800661c:	7823      	ldrb	r3, [r4, #0]
 800661e:	2b2e      	cmp	r3, #46	; 0x2e
 8006620:	d10c      	bne.n	800663c <_svfiprintf_r+0x130>
 8006622:	7863      	ldrb	r3, [r4, #1]
 8006624:	2b2a      	cmp	r3, #42	; 0x2a
 8006626:	d134      	bne.n	8006692 <_svfiprintf_r+0x186>
 8006628:	9b03      	ldr	r3, [sp, #12]
 800662a:	1d1a      	adds	r2, r3, #4
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	9203      	str	r2, [sp, #12]
 8006630:	2b00      	cmp	r3, #0
 8006632:	bfb8      	it	lt
 8006634:	f04f 33ff 	movlt.w	r3, #4294967295
 8006638:	3402      	adds	r4, #2
 800663a:	9305      	str	r3, [sp, #20]
 800663c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006704 <_svfiprintf_r+0x1f8>
 8006640:	7821      	ldrb	r1, [r4, #0]
 8006642:	2203      	movs	r2, #3
 8006644:	4650      	mov	r0, sl
 8006646:	f7f9 fdc3 	bl	80001d0 <memchr>
 800664a:	b138      	cbz	r0, 800665c <_svfiprintf_r+0x150>
 800664c:	9b04      	ldr	r3, [sp, #16]
 800664e:	eba0 000a 	sub.w	r0, r0, sl
 8006652:	2240      	movs	r2, #64	; 0x40
 8006654:	4082      	lsls	r2, r0
 8006656:	4313      	orrs	r3, r2
 8006658:	3401      	adds	r4, #1
 800665a:	9304      	str	r3, [sp, #16]
 800665c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006660:	4825      	ldr	r0, [pc, #148]	; (80066f8 <_svfiprintf_r+0x1ec>)
 8006662:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006666:	2206      	movs	r2, #6
 8006668:	f7f9 fdb2 	bl	80001d0 <memchr>
 800666c:	2800      	cmp	r0, #0
 800666e:	d038      	beq.n	80066e2 <_svfiprintf_r+0x1d6>
 8006670:	4b22      	ldr	r3, [pc, #136]	; (80066fc <_svfiprintf_r+0x1f0>)
 8006672:	bb1b      	cbnz	r3, 80066bc <_svfiprintf_r+0x1b0>
 8006674:	9b03      	ldr	r3, [sp, #12]
 8006676:	3307      	adds	r3, #7
 8006678:	f023 0307 	bic.w	r3, r3, #7
 800667c:	3308      	adds	r3, #8
 800667e:	9303      	str	r3, [sp, #12]
 8006680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006682:	4433      	add	r3, r6
 8006684:	9309      	str	r3, [sp, #36]	; 0x24
 8006686:	e768      	b.n	800655a <_svfiprintf_r+0x4e>
 8006688:	fb0c 3202 	mla	r2, ip, r2, r3
 800668c:	460c      	mov	r4, r1
 800668e:	2001      	movs	r0, #1
 8006690:	e7a6      	b.n	80065e0 <_svfiprintf_r+0xd4>
 8006692:	2300      	movs	r3, #0
 8006694:	3401      	adds	r4, #1
 8006696:	9305      	str	r3, [sp, #20]
 8006698:	4619      	mov	r1, r3
 800669a:	f04f 0c0a 	mov.w	ip, #10
 800669e:	4620      	mov	r0, r4
 80066a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066a4:	3a30      	subs	r2, #48	; 0x30
 80066a6:	2a09      	cmp	r2, #9
 80066a8:	d903      	bls.n	80066b2 <_svfiprintf_r+0x1a6>
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d0c6      	beq.n	800663c <_svfiprintf_r+0x130>
 80066ae:	9105      	str	r1, [sp, #20]
 80066b0:	e7c4      	b.n	800663c <_svfiprintf_r+0x130>
 80066b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80066b6:	4604      	mov	r4, r0
 80066b8:	2301      	movs	r3, #1
 80066ba:	e7f0      	b.n	800669e <_svfiprintf_r+0x192>
 80066bc:	ab03      	add	r3, sp, #12
 80066be:	9300      	str	r3, [sp, #0]
 80066c0:	462a      	mov	r2, r5
 80066c2:	4b0f      	ldr	r3, [pc, #60]	; (8006700 <_svfiprintf_r+0x1f4>)
 80066c4:	a904      	add	r1, sp, #16
 80066c6:	4638      	mov	r0, r7
 80066c8:	f3af 8000 	nop.w
 80066cc:	1c42      	adds	r2, r0, #1
 80066ce:	4606      	mov	r6, r0
 80066d0:	d1d6      	bne.n	8006680 <_svfiprintf_r+0x174>
 80066d2:	89ab      	ldrh	r3, [r5, #12]
 80066d4:	065b      	lsls	r3, r3, #25
 80066d6:	f53f af2d 	bmi.w	8006534 <_svfiprintf_r+0x28>
 80066da:	9809      	ldr	r0, [sp, #36]	; 0x24
 80066dc:	b01d      	add	sp, #116	; 0x74
 80066de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066e2:	ab03      	add	r3, sp, #12
 80066e4:	9300      	str	r3, [sp, #0]
 80066e6:	462a      	mov	r2, r5
 80066e8:	4b05      	ldr	r3, [pc, #20]	; (8006700 <_svfiprintf_r+0x1f4>)
 80066ea:	a904      	add	r1, sp, #16
 80066ec:	4638      	mov	r0, r7
 80066ee:	f000 f879 	bl	80067e4 <_printf_i>
 80066f2:	e7eb      	b.n	80066cc <_svfiprintf_r+0x1c0>
 80066f4:	08006bf0 	.word	0x08006bf0
 80066f8:	08006bfa 	.word	0x08006bfa
 80066fc:	00000000 	.word	0x00000000
 8006700:	08006459 	.word	0x08006459
 8006704:	08006bf6 	.word	0x08006bf6

08006708 <_printf_common>:
 8006708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800670c:	4616      	mov	r6, r2
 800670e:	4699      	mov	r9, r3
 8006710:	688a      	ldr	r2, [r1, #8]
 8006712:	690b      	ldr	r3, [r1, #16]
 8006714:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006718:	4293      	cmp	r3, r2
 800671a:	bfb8      	it	lt
 800671c:	4613      	movlt	r3, r2
 800671e:	6033      	str	r3, [r6, #0]
 8006720:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006724:	4607      	mov	r7, r0
 8006726:	460c      	mov	r4, r1
 8006728:	b10a      	cbz	r2, 800672e <_printf_common+0x26>
 800672a:	3301      	adds	r3, #1
 800672c:	6033      	str	r3, [r6, #0]
 800672e:	6823      	ldr	r3, [r4, #0]
 8006730:	0699      	lsls	r1, r3, #26
 8006732:	bf42      	ittt	mi
 8006734:	6833      	ldrmi	r3, [r6, #0]
 8006736:	3302      	addmi	r3, #2
 8006738:	6033      	strmi	r3, [r6, #0]
 800673a:	6825      	ldr	r5, [r4, #0]
 800673c:	f015 0506 	ands.w	r5, r5, #6
 8006740:	d106      	bne.n	8006750 <_printf_common+0x48>
 8006742:	f104 0a19 	add.w	sl, r4, #25
 8006746:	68e3      	ldr	r3, [r4, #12]
 8006748:	6832      	ldr	r2, [r6, #0]
 800674a:	1a9b      	subs	r3, r3, r2
 800674c:	42ab      	cmp	r3, r5
 800674e:	dc26      	bgt.n	800679e <_printf_common+0x96>
 8006750:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006754:	1e13      	subs	r3, r2, #0
 8006756:	6822      	ldr	r2, [r4, #0]
 8006758:	bf18      	it	ne
 800675a:	2301      	movne	r3, #1
 800675c:	0692      	lsls	r2, r2, #26
 800675e:	d42b      	bmi.n	80067b8 <_printf_common+0xb0>
 8006760:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006764:	4649      	mov	r1, r9
 8006766:	4638      	mov	r0, r7
 8006768:	47c0      	blx	r8
 800676a:	3001      	adds	r0, #1
 800676c:	d01e      	beq.n	80067ac <_printf_common+0xa4>
 800676e:	6823      	ldr	r3, [r4, #0]
 8006770:	6922      	ldr	r2, [r4, #16]
 8006772:	f003 0306 	and.w	r3, r3, #6
 8006776:	2b04      	cmp	r3, #4
 8006778:	bf02      	ittt	eq
 800677a:	68e5      	ldreq	r5, [r4, #12]
 800677c:	6833      	ldreq	r3, [r6, #0]
 800677e:	1aed      	subeq	r5, r5, r3
 8006780:	68a3      	ldr	r3, [r4, #8]
 8006782:	bf0c      	ite	eq
 8006784:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006788:	2500      	movne	r5, #0
 800678a:	4293      	cmp	r3, r2
 800678c:	bfc4      	itt	gt
 800678e:	1a9b      	subgt	r3, r3, r2
 8006790:	18ed      	addgt	r5, r5, r3
 8006792:	2600      	movs	r6, #0
 8006794:	341a      	adds	r4, #26
 8006796:	42b5      	cmp	r5, r6
 8006798:	d11a      	bne.n	80067d0 <_printf_common+0xc8>
 800679a:	2000      	movs	r0, #0
 800679c:	e008      	b.n	80067b0 <_printf_common+0xa8>
 800679e:	2301      	movs	r3, #1
 80067a0:	4652      	mov	r2, sl
 80067a2:	4649      	mov	r1, r9
 80067a4:	4638      	mov	r0, r7
 80067a6:	47c0      	blx	r8
 80067a8:	3001      	adds	r0, #1
 80067aa:	d103      	bne.n	80067b4 <_printf_common+0xac>
 80067ac:	f04f 30ff 	mov.w	r0, #4294967295
 80067b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067b4:	3501      	adds	r5, #1
 80067b6:	e7c6      	b.n	8006746 <_printf_common+0x3e>
 80067b8:	18e1      	adds	r1, r4, r3
 80067ba:	1c5a      	adds	r2, r3, #1
 80067bc:	2030      	movs	r0, #48	; 0x30
 80067be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80067c2:	4422      	add	r2, r4
 80067c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80067c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80067cc:	3302      	adds	r3, #2
 80067ce:	e7c7      	b.n	8006760 <_printf_common+0x58>
 80067d0:	2301      	movs	r3, #1
 80067d2:	4622      	mov	r2, r4
 80067d4:	4649      	mov	r1, r9
 80067d6:	4638      	mov	r0, r7
 80067d8:	47c0      	blx	r8
 80067da:	3001      	adds	r0, #1
 80067dc:	d0e6      	beq.n	80067ac <_printf_common+0xa4>
 80067de:	3601      	adds	r6, #1
 80067e0:	e7d9      	b.n	8006796 <_printf_common+0x8e>
	...

080067e4 <_printf_i>:
 80067e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067e8:	7e0f      	ldrb	r7, [r1, #24]
 80067ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80067ec:	2f78      	cmp	r7, #120	; 0x78
 80067ee:	4691      	mov	r9, r2
 80067f0:	4680      	mov	r8, r0
 80067f2:	460c      	mov	r4, r1
 80067f4:	469a      	mov	sl, r3
 80067f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80067fa:	d807      	bhi.n	800680c <_printf_i+0x28>
 80067fc:	2f62      	cmp	r7, #98	; 0x62
 80067fe:	d80a      	bhi.n	8006816 <_printf_i+0x32>
 8006800:	2f00      	cmp	r7, #0
 8006802:	f000 80d4 	beq.w	80069ae <_printf_i+0x1ca>
 8006806:	2f58      	cmp	r7, #88	; 0x58
 8006808:	f000 80c0 	beq.w	800698c <_printf_i+0x1a8>
 800680c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006810:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006814:	e03a      	b.n	800688c <_printf_i+0xa8>
 8006816:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800681a:	2b15      	cmp	r3, #21
 800681c:	d8f6      	bhi.n	800680c <_printf_i+0x28>
 800681e:	a101      	add	r1, pc, #4	; (adr r1, 8006824 <_printf_i+0x40>)
 8006820:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006824:	0800687d 	.word	0x0800687d
 8006828:	08006891 	.word	0x08006891
 800682c:	0800680d 	.word	0x0800680d
 8006830:	0800680d 	.word	0x0800680d
 8006834:	0800680d 	.word	0x0800680d
 8006838:	0800680d 	.word	0x0800680d
 800683c:	08006891 	.word	0x08006891
 8006840:	0800680d 	.word	0x0800680d
 8006844:	0800680d 	.word	0x0800680d
 8006848:	0800680d 	.word	0x0800680d
 800684c:	0800680d 	.word	0x0800680d
 8006850:	08006995 	.word	0x08006995
 8006854:	080068bd 	.word	0x080068bd
 8006858:	0800694f 	.word	0x0800694f
 800685c:	0800680d 	.word	0x0800680d
 8006860:	0800680d 	.word	0x0800680d
 8006864:	080069b7 	.word	0x080069b7
 8006868:	0800680d 	.word	0x0800680d
 800686c:	080068bd 	.word	0x080068bd
 8006870:	0800680d 	.word	0x0800680d
 8006874:	0800680d 	.word	0x0800680d
 8006878:	08006957 	.word	0x08006957
 800687c:	682b      	ldr	r3, [r5, #0]
 800687e:	1d1a      	adds	r2, r3, #4
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	602a      	str	r2, [r5, #0]
 8006884:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006888:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800688c:	2301      	movs	r3, #1
 800688e:	e09f      	b.n	80069d0 <_printf_i+0x1ec>
 8006890:	6820      	ldr	r0, [r4, #0]
 8006892:	682b      	ldr	r3, [r5, #0]
 8006894:	0607      	lsls	r7, r0, #24
 8006896:	f103 0104 	add.w	r1, r3, #4
 800689a:	6029      	str	r1, [r5, #0]
 800689c:	d501      	bpl.n	80068a2 <_printf_i+0xbe>
 800689e:	681e      	ldr	r6, [r3, #0]
 80068a0:	e003      	b.n	80068aa <_printf_i+0xc6>
 80068a2:	0646      	lsls	r6, r0, #25
 80068a4:	d5fb      	bpl.n	800689e <_printf_i+0xba>
 80068a6:	f9b3 6000 	ldrsh.w	r6, [r3]
 80068aa:	2e00      	cmp	r6, #0
 80068ac:	da03      	bge.n	80068b6 <_printf_i+0xd2>
 80068ae:	232d      	movs	r3, #45	; 0x2d
 80068b0:	4276      	negs	r6, r6
 80068b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80068b6:	485a      	ldr	r0, [pc, #360]	; (8006a20 <_printf_i+0x23c>)
 80068b8:	230a      	movs	r3, #10
 80068ba:	e012      	b.n	80068e2 <_printf_i+0xfe>
 80068bc:	682b      	ldr	r3, [r5, #0]
 80068be:	6820      	ldr	r0, [r4, #0]
 80068c0:	1d19      	adds	r1, r3, #4
 80068c2:	6029      	str	r1, [r5, #0]
 80068c4:	0605      	lsls	r5, r0, #24
 80068c6:	d501      	bpl.n	80068cc <_printf_i+0xe8>
 80068c8:	681e      	ldr	r6, [r3, #0]
 80068ca:	e002      	b.n	80068d2 <_printf_i+0xee>
 80068cc:	0641      	lsls	r1, r0, #25
 80068ce:	d5fb      	bpl.n	80068c8 <_printf_i+0xe4>
 80068d0:	881e      	ldrh	r6, [r3, #0]
 80068d2:	4853      	ldr	r0, [pc, #332]	; (8006a20 <_printf_i+0x23c>)
 80068d4:	2f6f      	cmp	r7, #111	; 0x6f
 80068d6:	bf0c      	ite	eq
 80068d8:	2308      	moveq	r3, #8
 80068da:	230a      	movne	r3, #10
 80068dc:	2100      	movs	r1, #0
 80068de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80068e2:	6865      	ldr	r5, [r4, #4]
 80068e4:	60a5      	str	r5, [r4, #8]
 80068e6:	2d00      	cmp	r5, #0
 80068e8:	bfa2      	ittt	ge
 80068ea:	6821      	ldrge	r1, [r4, #0]
 80068ec:	f021 0104 	bicge.w	r1, r1, #4
 80068f0:	6021      	strge	r1, [r4, #0]
 80068f2:	b90e      	cbnz	r6, 80068f8 <_printf_i+0x114>
 80068f4:	2d00      	cmp	r5, #0
 80068f6:	d04b      	beq.n	8006990 <_printf_i+0x1ac>
 80068f8:	4615      	mov	r5, r2
 80068fa:	fbb6 f1f3 	udiv	r1, r6, r3
 80068fe:	fb03 6711 	mls	r7, r3, r1, r6
 8006902:	5dc7      	ldrb	r7, [r0, r7]
 8006904:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006908:	4637      	mov	r7, r6
 800690a:	42bb      	cmp	r3, r7
 800690c:	460e      	mov	r6, r1
 800690e:	d9f4      	bls.n	80068fa <_printf_i+0x116>
 8006910:	2b08      	cmp	r3, #8
 8006912:	d10b      	bne.n	800692c <_printf_i+0x148>
 8006914:	6823      	ldr	r3, [r4, #0]
 8006916:	07de      	lsls	r6, r3, #31
 8006918:	d508      	bpl.n	800692c <_printf_i+0x148>
 800691a:	6923      	ldr	r3, [r4, #16]
 800691c:	6861      	ldr	r1, [r4, #4]
 800691e:	4299      	cmp	r1, r3
 8006920:	bfde      	ittt	le
 8006922:	2330      	movle	r3, #48	; 0x30
 8006924:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006928:	f105 35ff 	addle.w	r5, r5, #4294967295
 800692c:	1b52      	subs	r2, r2, r5
 800692e:	6122      	str	r2, [r4, #16]
 8006930:	f8cd a000 	str.w	sl, [sp]
 8006934:	464b      	mov	r3, r9
 8006936:	aa03      	add	r2, sp, #12
 8006938:	4621      	mov	r1, r4
 800693a:	4640      	mov	r0, r8
 800693c:	f7ff fee4 	bl	8006708 <_printf_common>
 8006940:	3001      	adds	r0, #1
 8006942:	d14a      	bne.n	80069da <_printf_i+0x1f6>
 8006944:	f04f 30ff 	mov.w	r0, #4294967295
 8006948:	b004      	add	sp, #16
 800694a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800694e:	6823      	ldr	r3, [r4, #0]
 8006950:	f043 0320 	orr.w	r3, r3, #32
 8006954:	6023      	str	r3, [r4, #0]
 8006956:	4833      	ldr	r0, [pc, #204]	; (8006a24 <_printf_i+0x240>)
 8006958:	2778      	movs	r7, #120	; 0x78
 800695a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800695e:	6823      	ldr	r3, [r4, #0]
 8006960:	6829      	ldr	r1, [r5, #0]
 8006962:	061f      	lsls	r7, r3, #24
 8006964:	f851 6b04 	ldr.w	r6, [r1], #4
 8006968:	d402      	bmi.n	8006970 <_printf_i+0x18c>
 800696a:	065f      	lsls	r7, r3, #25
 800696c:	bf48      	it	mi
 800696e:	b2b6      	uxthmi	r6, r6
 8006970:	07df      	lsls	r7, r3, #31
 8006972:	bf48      	it	mi
 8006974:	f043 0320 	orrmi.w	r3, r3, #32
 8006978:	6029      	str	r1, [r5, #0]
 800697a:	bf48      	it	mi
 800697c:	6023      	strmi	r3, [r4, #0]
 800697e:	b91e      	cbnz	r6, 8006988 <_printf_i+0x1a4>
 8006980:	6823      	ldr	r3, [r4, #0]
 8006982:	f023 0320 	bic.w	r3, r3, #32
 8006986:	6023      	str	r3, [r4, #0]
 8006988:	2310      	movs	r3, #16
 800698a:	e7a7      	b.n	80068dc <_printf_i+0xf8>
 800698c:	4824      	ldr	r0, [pc, #144]	; (8006a20 <_printf_i+0x23c>)
 800698e:	e7e4      	b.n	800695a <_printf_i+0x176>
 8006990:	4615      	mov	r5, r2
 8006992:	e7bd      	b.n	8006910 <_printf_i+0x12c>
 8006994:	682b      	ldr	r3, [r5, #0]
 8006996:	6826      	ldr	r6, [r4, #0]
 8006998:	6961      	ldr	r1, [r4, #20]
 800699a:	1d18      	adds	r0, r3, #4
 800699c:	6028      	str	r0, [r5, #0]
 800699e:	0635      	lsls	r5, r6, #24
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	d501      	bpl.n	80069a8 <_printf_i+0x1c4>
 80069a4:	6019      	str	r1, [r3, #0]
 80069a6:	e002      	b.n	80069ae <_printf_i+0x1ca>
 80069a8:	0670      	lsls	r0, r6, #25
 80069aa:	d5fb      	bpl.n	80069a4 <_printf_i+0x1c0>
 80069ac:	8019      	strh	r1, [r3, #0]
 80069ae:	2300      	movs	r3, #0
 80069b0:	6123      	str	r3, [r4, #16]
 80069b2:	4615      	mov	r5, r2
 80069b4:	e7bc      	b.n	8006930 <_printf_i+0x14c>
 80069b6:	682b      	ldr	r3, [r5, #0]
 80069b8:	1d1a      	adds	r2, r3, #4
 80069ba:	602a      	str	r2, [r5, #0]
 80069bc:	681d      	ldr	r5, [r3, #0]
 80069be:	6862      	ldr	r2, [r4, #4]
 80069c0:	2100      	movs	r1, #0
 80069c2:	4628      	mov	r0, r5
 80069c4:	f7f9 fc04 	bl	80001d0 <memchr>
 80069c8:	b108      	cbz	r0, 80069ce <_printf_i+0x1ea>
 80069ca:	1b40      	subs	r0, r0, r5
 80069cc:	6060      	str	r0, [r4, #4]
 80069ce:	6863      	ldr	r3, [r4, #4]
 80069d0:	6123      	str	r3, [r4, #16]
 80069d2:	2300      	movs	r3, #0
 80069d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069d8:	e7aa      	b.n	8006930 <_printf_i+0x14c>
 80069da:	6923      	ldr	r3, [r4, #16]
 80069dc:	462a      	mov	r2, r5
 80069de:	4649      	mov	r1, r9
 80069e0:	4640      	mov	r0, r8
 80069e2:	47d0      	blx	sl
 80069e4:	3001      	adds	r0, #1
 80069e6:	d0ad      	beq.n	8006944 <_printf_i+0x160>
 80069e8:	6823      	ldr	r3, [r4, #0]
 80069ea:	079b      	lsls	r3, r3, #30
 80069ec:	d413      	bmi.n	8006a16 <_printf_i+0x232>
 80069ee:	68e0      	ldr	r0, [r4, #12]
 80069f0:	9b03      	ldr	r3, [sp, #12]
 80069f2:	4298      	cmp	r0, r3
 80069f4:	bfb8      	it	lt
 80069f6:	4618      	movlt	r0, r3
 80069f8:	e7a6      	b.n	8006948 <_printf_i+0x164>
 80069fa:	2301      	movs	r3, #1
 80069fc:	4632      	mov	r2, r6
 80069fe:	4649      	mov	r1, r9
 8006a00:	4640      	mov	r0, r8
 8006a02:	47d0      	blx	sl
 8006a04:	3001      	adds	r0, #1
 8006a06:	d09d      	beq.n	8006944 <_printf_i+0x160>
 8006a08:	3501      	adds	r5, #1
 8006a0a:	68e3      	ldr	r3, [r4, #12]
 8006a0c:	9903      	ldr	r1, [sp, #12]
 8006a0e:	1a5b      	subs	r3, r3, r1
 8006a10:	42ab      	cmp	r3, r5
 8006a12:	dcf2      	bgt.n	80069fa <_printf_i+0x216>
 8006a14:	e7eb      	b.n	80069ee <_printf_i+0x20a>
 8006a16:	2500      	movs	r5, #0
 8006a18:	f104 0619 	add.w	r6, r4, #25
 8006a1c:	e7f5      	b.n	8006a0a <_printf_i+0x226>
 8006a1e:	bf00      	nop
 8006a20:	08006c01 	.word	0x08006c01
 8006a24:	08006c12 	.word	0x08006c12

08006a28 <memmove>:
 8006a28:	4288      	cmp	r0, r1
 8006a2a:	b510      	push	{r4, lr}
 8006a2c:	eb01 0402 	add.w	r4, r1, r2
 8006a30:	d902      	bls.n	8006a38 <memmove+0x10>
 8006a32:	4284      	cmp	r4, r0
 8006a34:	4623      	mov	r3, r4
 8006a36:	d807      	bhi.n	8006a48 <memmove+0x20>
 8006a38:	1e43      	subs	r3, r0, #1
 8006a3a:	42a1      	cmp	r1, r4
 8006a3c:	d008      	beq.n	8006a50 <memmove+0x28>
 8006a3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006a42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006a46:	e7f8      	b.n	8006a3a <memmove+0x12>
 8006a48:	4402      	add	r2, r0
 8006a4a:	4601      	mov	r1, r0
 8006a4c:	428a      	cmp	r2, r1
 8006a4e:	d100      	bne.n	8006a52 <memmove+0x2a>
 8006a50:	bd10      	pop	{r4, pc}
 8006a52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006a56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006a5a:	e7f7      	b.n	8006a4c <memmove+0x24>

08006a5c <_sbrk_r>:
 8006a5c:	b538      	push	{r3, r4, r5, lr}
 8006a5e:	4d06      	ldr	r5, [pc, #24]	; (8006a78 <_sbrk_r+0x1c>)
 8006a60:	2300      	movs	r3, #0
 8006a62:	4604      	mov	r4, r0
 8006a64:	4608      	mov	r0, r1
 8006a66:	602b      	str	r3, [r5, #0]
 8006a68:	f7fa feae 	bl	80017c8 <_sbrk>
 8006a6c:	1c43      	adds	r3, r0, #1
 8006a6e:	d102      	bne.n	8006a76 <_sbrk_r+0x1a>
 8006a70:	682b      	ldr	r3, [r5, #0]
 8006a72:	b103      	cbz	r3, 8006a76 <_sbrk_r+0x1a>
 8006a74:	6023      	str	r3, [r4, #0]
 8006a76:	bd38      	pop	{r3, r4, r5, pc}
 8006a78:	20000a94 	.word	0x20000a94

08006a7c <_realloc_r>:
 8006a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a80:	4680      	mov	r8, r0
 8006a82:	4614      	mov	r4, r2
 8006a84:	460e      	mov	r6, r1
 8006a86:	b921      	cbnz	r1, 8006a92 <_realloc_r+0x16>
 8006a88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a8c:	4611      	mov	r1, r2
 8006a8e:	f7ff bc57 	b.w	8006340 <_malloc_r>
 8006a92:	b92a      	cbnz	r2, 8006aa0 <_realloc_r+0x24>
 8006a94:	f7ff fbe8 	bl	8006268 <_free_r>
 8006a98:	4625      	mov	r5, r4
 8006a9a:	4628      	mov	r0, r5
 8006a9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006aa0:	f000 f81b 	bl	8006ada <_malloc_usable_size_r>
 8006aa4:	4284      	cmp	r4, r0
 8006aa6:	4607      	mov	r7, r0
 8006aa8:	d802      	bhi.n	8006ab0 <_realloc_r+0x34>
 8006aaa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006aae:	d812      	bhi.n	8006ad6 <_realloc_r+0x5a>
 8006ab0:	4621      	mov	r1, r4
 8006ab2:	4640      	mov	r0, r8
 8006ab4:	f7ff fc44 	bl	8006340 <_malloc_r>
 8006ab8:	4605      	mov	r5, r0
 8006aba:	2800      	cmp	r0, #0
 8006abc:	d0ed      	beq.n	8006a9a <_realloc_r+0x1e>
 8006abe:	42bc      	cmp	r4, r7
 8006ac0:	4622      	mov	r2, r4
 8006ac2:	4631      	mov	r1, r6
 8006ac4:	bf28      	it	cs
 8006ac6:	463a      	movcs	r2, r7
 8006ac8:	f7ff fbc0 	bl	800624c <memcpy>
 8006acc:	4631      	mov	r1, r6
 8006ace:	4640      	mov	r0, r8
 8006ad0:	f7ff fbca 	bl	8006268 <_free_r>
 8006ad4:	e7e1      	b.n	8006a9a <_realloc_r+0x1e>
 8006ad6:	4635      	mov	r5, r6
 8006ad8:	e7df      	b.n	8006a9a <_realloc_r+0x1e>

08006ada <_malloc_usable_size_r>:
 8006ada:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ade:	1f18      	subs	r0, r3, #4
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	bfbc      	itt	lt
 8006ae4:	580b      	ldrlt	r3, [r1, r0]
 8006ae6:	18c0      	addlt	r0, r0, r3
 8006ae8:	4770      	bx	lr
	...

08006aec <trunc>:
 8006aec:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 8006af0:	ec5c bb10 	vmov	fp, ip, d0
 8006af4:	f3cc 500a 	ubfx	r0, ip, #20, #11
 8006af8:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 8006afc:	2913      	cmp	r1, #19
 8006afe:	4664      	mov	r4, ip
 8006b00:	dc11      	bgt.n	8006b26 <trunc+0x3a>
 8006b02:	2900      	cmp	r1, #0
 8006b04:	bfa7      	ittee	ge
 8006b06:	4b15      	ldrge	r3, [pc, #84]	; (8006b5c <trunc+0x70>)
 8006b08:	fa43 f101 	asrge.w	r1, r3, r1
 8006b0c:	2200      	movlt	r2, #0
 8006b0e:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 8006b12:	bfa4      	itt	ge
 8006b14:	2200      	movge	r2, #0
 8006b16:	ea01 030c 	andge.w	r3, r1, ip
 8006b1a:	4693      	mov	fp, r2
 8006b1c:	469c      	mov	ip, r3
 8006b1e:	ec4c bb10 	vmov	d0, fp, ip
 8006b22:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 8006b26:	2933      	cmp	r1, #51	; 0x33
 8006b28:	dd0d      	ble.n	8006b46 <trunc+0x5a>
 8006b2a:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006b2e:	d1f6      	bne.n	8006b1e <trunc+0x32>
 8006b30:	4663      	mov	r3, ip
 8006b32:	ee10 2a10 	vmov	r2, s0
 8006b36:	ee10 0a10 	vmov	r0, s0
 8006b3a:	4621      	mov	r1, r4
 8006b3c:	f7f9 fb9e 	bl	800027c <__adddf3>
 8006b40:	4683      	mov	fp, r0
 8006b42:	468c      	mov	ip, r1
 8006b44:	e7eb      	b.n	8006b1e <trunc+0x32>
 8006b46:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 8006b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8006b4e:	40c3      	lsrs	r3, r0
 8006b50:	ea2b 0603 	bic.w	r6, fp, r3
 8006b54:	46b3      	mov	fp, r6
 8006b56:	46a4      	mov	ip, r4
 8006b58:	e7e1      	b.n	8006b1e <trunc+0x32>
 8006b5a:	bf00      	nop
 8006b5c:	fff00000 	.word	0xfff00000

08006b60 <_init>:
 8006b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b62:	bf00      	nop
 8006b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b66:	bc08      	pop	{r3}
 8006b68:	469e      	mov	lr, r3
 8006b6a:	4770      	bx	lr

08006b6c <_fini>:
 8006b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b6e:	bf00      	nop
 8006b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b72:	bc08      	pop	{r3}
 8006b74:	469e      	mov	lr, r3
 8006b76:	4770      	bx	lr

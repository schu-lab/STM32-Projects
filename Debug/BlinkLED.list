
BlinkLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048d0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08004a58  08004a58  00014a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004aa0  08004aa0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004aa0  08004aa0  00014aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004aa8  08004aa8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004aa8  08004aa8  00014aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004aac  08004aac  00014aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004ab0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000798  2000000c  08004abc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007a4  08004abc  000207a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017142  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002da2  00000000  00000000  000371c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001550  00000000  00000000  00039f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001090  00000000  00000000  0003b4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027265  00000000  00000000  0003c548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018e32  00000000  00000000  000637ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ef96d  00000000  00000000  0007c5df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005b88  00000000  00000000  0016bf4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000042  00000000  00000000  00171ad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004a40 	.word	0x08004a40

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004a40 	.word	0x08004a40

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c8:	f000 fee7 	bl	800129a <HAL_Init>

  /* USER CODE BEGIN Init */

  HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_14);
 80004cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004d0:	4810      	ldr	r0, [pc, #64]	; (8000514 <main+0x50>)
 80004d2:	f001 fb5b 	bl	8001b8c <HAL_GPIO_TogglePin>
  HAL_Delay (100);
 80004d6:	2064      	movs	r0, #100	; 0x64
 80004d8:	f000 ff54 	bl	8001384 <HAL_Delay>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f81c 	bl	8000518 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 f9e6 	bl	80008b0 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80004e4:	f000 f87a 	bl	80005dc <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80004e8:	f000 f8b0 	bl	800064c <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80004ec:	f000 f8ee 	bl	80006cc <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80004f0:	f000 f912 	bl	8000718 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80004f4:	f000 f94e 	bl	8000794 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80004f8:	f000 f97c 	bl	80007f4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80004fc:	f000 f9aa 	bl	8000854 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_14);
 8000500:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000504:	4803      	ldr	r0, [pc, #12]	; (8000514 <main+0x50>)
 8000506:	f001 fb41 	bl	8001b8c <HAL_GPIO_TogglePin>
	  HAL_Delay (100); 
 800050a:	2064      	movs	r0, #100	; 0x64
 800050c:	f000 ff3a 	bl	8001384 <HAL_Delay>
	  HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_14);
 8000510:	e7f6      	b.n	8000500 <main+0x3c>
 8000512:	bf00      	nop
 8000514:	48000400 	.word	0x48000400

08000518 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b096      	sub	sp, #88	; 0x58
 800051c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051e:	f107 0314 	add.w	r3, r7, #20
 8000522:	2244      	movs	r2, #68	; 0x44
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f004 fa5e 	bl	80049e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052c:	463b      	mov	r3, r7
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	605a      	str	r2, [r3, #4]
 8000534:	609a      	str	r2, [r3, #8]
 8000536:	60da      	str	r2, [r3, #12]
 8000538:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800053a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800053e:	f001 fdfb 	bl	8002138 <HAL_PWREx_ControlVoltageScaling>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000548:	f000 fb64 	bl	8000c14 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800054c:	f001 fdd6 	bl	80020fc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000550:	4b21      	ldr	r3, [pc, #132]	; (80005d8 <SystemClock_Config+0xc0>)
 8000552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000556:	4a20      	ldr	r2, [pc, #128]	; (80005d8 <SystemClock_Config+0xc0>)
 8000558:	f023 0318 	bic.w	r3, r3, #24
 800055c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000560:	2314      	movs	r3, #20
 8000562:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000564:	2301      	movs	r3, #1
 8000566:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000568:	2301      	movs	r3, #1
 800056a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800056c:	2300      	movs	r3, #0
 800056e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000570:	2360      	movs	r3, #96	; 0x60
 8000572:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000574:	2302      	movs	r3, #2
 8000576:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000578:	2301      	movs	r3, #1
 800057a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800057c:	2301      	movs	r3, #1
 800057e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000580:	2328      	movs	r3, #40	; 0x28
 8000582:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000584:	2307      	movs	r3, #7
 8000586:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000588:	2302      	movs	r3, #2
 800058a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800058c:	2302      	movs	r3, #2
 800058e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000590:	f107 0314 	add.w	r3, r7, #20
 8000594:	4618      	mov	r0, r3
 8000596:	f001 fef1 	bl	800237c <HAL_RCC_OscConfig>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005a0:	f000 fb38 	bl	8000c14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a4:	230f      	movs	r3, #15
 80005a6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a8:	2303      	movs	r3, #3
 80005aa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b0:	2300      	movs	r3, #0
 80005b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b4:	2300      	movs	r3, #0
 80005b6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005b8:	463b      	mov	r3, r7
 80005ba:	2104      	movs	r1, #4
 80005bc:	4618      	mov	r0, r3
 80005be:	f002 fab9 	bl	8002b34 <HAL_RCC_ClockConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80005c8:	f000 fb24 	bl	8000c14 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005cc:	f002 ffc0 	bl	8003550 <HAL_RCCEx_EnableMSIPLLMode>
}
 80005d0:	bf00      	nop
 80005d2:	3758      	adds	r7, #88	; 0x58
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40021000 	.word	0x40021000

080005dc <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80005e0:	4b18      	ldr	r3, [pc, #96]	; (8000644 <MX_DFSDM1_Init+0x68>)
 80005e2:	4a19      	ldr	r2, [pc, #100]	; (8000648 <MX_DFSDM1_Init+0x6c>)
 80005e4:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80005e6:	4b17      	ldr	r3, [pc, #92]	; (8000644 <MX_DFSDM1_Init+0x68>)
 80005e8:	2201      	movs	r2, #1
 80005ea:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80005ec:	4b15      	ldr	r3, [pc, #84]	; (8000644 <MX_DFSDM1_Init+0x68>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 80005f2:	4b14      	ldr	r3, [pc, #80]	; (8000644 <MX_DFSDM1_Init+0x68>)
 80005f4:	2202      	movs	r2, #2
 80005f6:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80005f8:	4b12      	ldr	r3, [pc, #72]	; (8000644 <MX_DFSDM1_Init+0x68>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80005fe:	4b11      	ldr	r3, [pc, #68]	; (8000644 <MX_DFSDM1_Init+0x68>)
 8000600:	2200      	movs	r2, #0
 8000602:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8000604:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <MX_DFSDM1_Init+0x68>)
 8000606:	f44f 7280 	mov.w	r2, #256	; 0x100
 800060a:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800060c:	4b0d      	ldr	r3, [pc, #52]	; (8000644 <MX_DFSDM1_Init+0x68>)
 800060e:	2200      	movs	r2, #0
 8000610:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8000612:	4b0c      	ldr	r3, [pc, #48]	; (8000644 <MX_DFSDM1_Init+0x68>)
 8000614:	2204      	movs	r2, #4
 8000616:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000618:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <MX_DFSDM1_Init+0x68>)
 800061a:	2200      	movs	r2, #0
 800061c:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 800061e:	4b09      	ldr	r3, [pc, #36]	; (8000644 <MX_DFSDM1_Init+0x68>)
 8000620:	2201      	movs	r2, #1
 8000622:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 8000624:	4b07      	ldr	r3, [pc, #28]	; (8000644 <MX_DFSDM1_Init+0x68>)
 8000626:	2200      	movs	r2, #0
 8000628:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 800062a:	4b06      	ldr	r3, [pc, #24]	; (8000644 <MX_DFSDM1_Init+0x68>)
 800062c:	2200      	movs	r2, #0
 800062e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000630:	4804      	ldr	r0, [pc, #16]	; (8000644 <MX_DFSDM1_Init+0x68>)
 8000632:	f000 ffdd 	bl	80015f0 <HAL_DFSDM_ChannelInit>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 800063c:	f000 faea 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000640:	bf00      	nop
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000028 	.word	0x20000028
 8000648:	40016020 	.word	0x40016020

0800064c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000650:	4b1b      	ldr	r3, [pc, #108]	; (80006c0 <MX_I2C2_Init+0x74>)
 8000652:	4a1c      	ldr	r2, [pc, #112]	; (80006c4 <MX_I2C2_Init+0x78>)
 8000654:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8000656:	4b1a      	ldr	r3, [pc, #104]	; (80006c0 <MX_I2C2_Init+0x74>)
 8000658:	4a1b      	ldr	r2, [pc, #108]	; (80006c8 <MX_I2C2_Init+0x7c>)
 800065a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800065c:	4b18      	ldr	r3, [pc, #96]	; (80006c0 <MX_I2C2_Init+0x74>)
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000662:	4b17      	ldr	r3, [pc, #92]	; (80006c0 <MX_I2C2_Init+0x74>)
 8000664:	2201      	movs	r2, #1
 8000666:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000668:	4b15      	ldr	r3, [pc, #84]	; (80006c0 <MX_I2C2_Init+0x74>)
 800066a:	2200      	movs	r2, #0
 800066c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800066e:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <MX_I2C2_Init+0x74>)
 8000670:	2200      	movs	r2, #0
 8000672:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000674:	4b12      	ldr	r3, [pc, #72]	; (80006c0 <MX_I2C2_Init+0x74>)
 8000676:	2200      	movs	r2, #0
 8000678:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800067a:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <MX_I2C2_Init+0x74>)
 800067c:	2200      	movs	r2, #0
 800067e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000680:	4b0f      	ldr	r3, [pc, #60]	; (80006c0 <MX_I2C2_Init+0x74>)
 8000682:	2200      	movs	r2, #0
 8000684:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000686:	480e      	ldr	r0, [pc, #56]	; (80006c0 <MX_I2C2_Init+0x74>)
 8000688:	f001 fabd 	bl	8001c06 <HAL_I2C_Init>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000692:	f000 fabf 	bl	8000c14 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000696:	2100      	movs	r1, #0
 8000698:	4809      	ldr	r0, [pc, #36]	; (80006c0 <MX_I2C2_Init+0x74>)
 800069a:	f001 fb4f 	bl	8001d3c <HAL_I2CEx_ConfigAnalogFilter>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80006a4:	f000 fab6 	bl	8000c14 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80006a8:	2100      	movs	r1, #0
 80006aa:	4805      	ldr	r0, [pc, #20]	; (80006c0 <MX_I2C2_Init+0x74>)
 80006ac:	f001 fb91 	bl	8001dd2 <HAL_I2CEx_ConfigDigitalFilter>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80006b6:	f000 faad 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000060 	.word	0x20000060
 80006c4:	40005800 	.word	0x40005800
 80006c8:	10909cec 	.word	0x10909cec

080006cc <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <MX_QUADSPI_Init+0x44>)
 80006d2:	4a10      	ldr	r2, [pc, #64]	; (8000714 <MX_QUADSPI_Init+0x48>)
 80006d4:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_QUADSPI_Init+0x44>)
 80006d8:	2202      	movs	r2, #2
 80006da:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <MX_QUADSPI_Init+0x44>)
 80006de:	2204      	movs	r2, #4
 80006e0:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <MX_QUADSPI_Init+0x44>)
 80006e4:	2210      	movs	r2, #16
 80006e6:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 80006e8:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_QUADSPI_Init+0x44>)
 80006ea:	2217      	movs	r2, #23
 80006ec:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80006ee:	4b08      	ldr	r3, [pc, #32]	; (8000710 <MX_QUADSPI_Init+0x44>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_QUADSPI_Init+0x44>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <MX_QUADSPI_Init+0x44>)
 80006fc:	f001 fd82 	bl	8002204 <HAL_QSPI_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000706:	f000 fa85 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	200000b4 	.word	0x200000b4
 8000714:	a0001000 	.word	0xa0001000

08000718 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800071c:	4b1b      	ldr	r3, [pc, #108]	; (800078c <MX_SPI3_Init+0x74>)
 800071e:	4a1c      	ldr	r2, [pc, #112]	; (8000790 <MX_SPI3_Init+0x78>)
 8000720:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000722:	4b1a      	ldr	r3, [pc, #104]	; (800078c <MX_SPI3_Init+0x74>)
 8000724:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000728:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800072a:	4b18      	ldr	r3, [pc, #96]	; (800078c <MX_SPI3_Init+0x74>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000730:	4b16      	ldr	r3, [pc, #88]	; (800078c <MX_SPI3_Init+0x74>)
 8000732:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000736:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_SPI3_Init+0x74>)
 800073a:	2200      	movs	r2, #0
 800073c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800073e:	4b13      	ldr	r3, [pc, #76]	; (800078c <MX_SPI3_Init+0x74>)
 8000740:	2200      	movs	r2, #0
 8000742:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000744:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_SPI3_Init+0x74>)
 8000746:	f44f 7200 	mov.w	r2, #512	; 0x200
 800074a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_SPI3_Init+0x74>)
 800074e:	2200      	movs	r2, #0
 8000750:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000752:	4b0e      	ldr	r3, [pc, #56]	; (800078c <MX_SPI3_Init+0x74>)
 8000754:	2200      	movs	r2, #0
 8000756:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <MX_SPI3_Init+0x74>)
 800075a:	2200      	movs	r2, #0
 800075c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800075e:	4b0b      	ldr	r3, [pc, #44]	; (800078c <MX_SPI3_Init+0x74>)
 8000760:	2200      	movs	r2, #0
 8000762:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000764:	4b09      	ldr	r3, [pc, #36]	; (800078c <MX_SPI3_Init+0x74>)
 8000766:	2207      	movs	r2, #7
 8000768:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800076a:	4b08      	ldr	r3, [pc, #32]	; (800078c <MX_SPI3_Init+0x74>)
 800076c:	2200      	movs	r2, #0
 800076e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <MX_SPI3_Init+0x74>)
 8000772:	2208      	movs	r2, #8
 8000774:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_SPI3_Init+0x74>)
 8000778:	f003 f8cc 	bl	8003914 <HAL_SPI_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000782:	f000 fa47 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	200000f8 	.word	0x200000f8
 8000790:	40003c00 	.word	0x40003c00

08000794 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000798:	4b14      	ldr	r3, [pc, #80]	; (80007ec <MX_USART1_UART_Init+0x58>)
 800079a:	4a15      	ldr	r2, [pc, #84]	; (80007f0 <MX_USART1_UART_Init+0x5c>)
 800079c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800079e:	4b13      	ldr	r3, [pc, #76]	; (80007ec <MX_USART1_UART_Init+0x58>)
 80007a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007a6:	4b11      	ldr	r3, [pc, #68]	; (80007ec <MX_USART1_UART_Init+0x58>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007ac:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <MX_USART1_UART_Init+0x58>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007b2:	4b0e      	ldr	r3, [pc, #56]	; (80007ec <MX_USART1_UART_Init+0x58>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007b8:	4b0c      	ldr	r3, [pc, #48]	; (80007ec <MX_USART1_UART_Init+0x58>)
 80007ba:	220c      	movs	r2, #12
 80007bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007be:	4b0b      	ldr	r3, [pc, #44]	; (80007ec <MX_USART1_UART_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c4:	4b09      	ldr	r3, [pc, #36]	; (80007ec <MX_USART1_UART_Init+0x58>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007ca:	4b08      	ldr	r3, [pc, #32]	; (80007ec <MX_USART1_UART_Init+0x58>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007d0:	4b06      	ldr	r3, [pc, #24]	; (80007ec <MX_USART1_UART_Init+0x58>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007d6:	4805      	ldr	r0, [pc, #20]	; (80007ec <MX_USART1_UART_Init+0x58>)
 80007d8:	f003 f93f 	bl	8003a5a <HAL_UART_Init>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007e2:	f000 fa17 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007e6:	bf00      	nop
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	2000015c 	.word	0x2000015c
 80007f0:	40013800 	.word	0x40013800

080007f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007f8:	4b14      	ldr	r3, [pc, #80]	; (800084c <MX_USART3_UART_Init+0x58>)
 80007fa:	4a15      	ldr	r2, [pc, #84]	; (8000850 <MX_USART3_UART_Init+0x5c>)
 80007fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007fe:	4b13      	ldr	r3, [pc, #76]	; (800084c <MX_USART3_UART_Init+0x58>)
 8000800:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000804:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000806:	4b11      	ldr	r3, [pc, #68]	; (800084c <MX_USART3_UART_Init+0x58>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <MX_USART3_UART_Init+0x58>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <MX_USART3_UART_Init+0x58>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000818:	4b0c      	ldr	r3, [pc, #48]	; (800084c <MX_USART3_UART_Init+0x58>)
 800081a:	220c      	movs	r2, #12
 800081c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081e:	4b0b      	ldr	r3, [pc, #44]	; (800084c <MX_USART3_UART_Init+0x58>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000824:	4b09      	ldr	r3, [pc, #36]	; (800084c <MX_USART3_UART_Init+0x58>)
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800082a:	4b08      	ldr	r3, [pc, #32]	; (800084c <MX_USART3_UART_Init+0x58>)
 800082c:	2200      	movs	r2, #0
 800082e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <MX_USART3_UART_Init+0x58>)
 8000832:	2200      	movs	r2, #0
 8000834:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000836:	4805      	ldr	r0, [pc, #20]	; (800084c <MX_USART3_UART_Init+0x58>)
 8000838:	f003 f90f 	bl	8003a5a <HAL_UART_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000842:	f000 f9e7 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	200001e4 	.word	0x200001e4
 8000850:	40004800 	.word	0x40004800

08000854 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000858:	4b14      	ldr	r3, [pc, #80]	; (80008ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800085a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800085e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000860:	4b12      	ldr	r3, [pc, #72]	; (80008ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000862:	2206      	movs	r2, #6
 8000864:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000866:	4b11      	ldr	r3, [pc, #68]	; (80008ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000868:	2202      	movs	r2, #2
 800086a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800086c:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800086e:	2202      	movs	r2, #2
 8000870:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000872:	4b0e      	ldr	r3, [pc, #56]	; (80008ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000874:	2200      	movs	r2, #0
 8000876:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000878:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800087a:	2200      	movs	r2, #0
 800087c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800087e:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000880:	2200      	movs	r2, #0
 8000882:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000884:	4b09      	ldr	r3, [pc, #36]	; (80008ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000886:	2200      	movs	r2, #0
 8000888:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800088a:	4b08      	ldr	r3, [pc, #32]	; (80008ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 800088c:	2200      	movs	r2, #0
 800088e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000892:	2200      	movs	r2, #0
 8000894:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000896:	4805      	ldr	r0, [pc, #20]	; (80008ac <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000898:	f001 fae7 	bl	8001e6a <HAL_PCD_Init>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d001      	beq.n	80008a6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008a2:	f000 f9b7 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008a6:	bf00      	nop
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	2000026c 	.word	0x2000026c

080008b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08a      	sub	sp, #40	; 0x28
 80008b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
 80008c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008c6:	4bbd      	ldr	r3, [pc, #756]	; (8000bbc <MX_GPIO_Init+0x30c>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ca:	4abc      	ldr	r2, [pc, #752]	; (8000bbc <MX_GPIO_Init+0x30c>)
 80008cc:	f043 0310 	orr.w	r3, r3, #16
 80008d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d2:	4bba      	ldr	r3, [pc, #744]	; (8000bbc <MX_GPIO_Init+0x30c>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d6:	f003 0310 	and.w	r3, r3, #16
 80008da:	613b      	str	r3, [r7, #16]
 80008dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008de:	4bb7      	ldr	r3, [pc, #732]	; (8000bbc <MX_GPIO_Init+0x30c>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e2:	4ab6      	ldr	r2, [pc, #728]	; (8000bbc <MX_GPIO_Init+0x30c>)
 80008e4:	f043 0304 	orr.w	r3, r3, #4
 80008e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ea:	4bb4      	ldr	r3, [pc, #720]	; (8000bbc <MX_GPIO_Init+0x30c>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ee:	f003 0304 	and.w	r3, r3, #4
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	4bb1      	ldr	r3, [pc, #708]	; (8000bbc <MX_GPIO_Init+0x30c>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fa:	4ab0      	ldr	r2, [pc, #704]	; (8000bbc <MX_GPIO_Init+0x30c>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000902:	4bae      	ldr	r3, [pc, #696]	; (8000bbc <MX_GPIO_Init+0x30c>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	60bb      	str	r3, [r7, #8]
 800090c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090e:	4bab      	ldr	r3, [pc, #684]	; (8000bbc <MX_GPIO_Init+0x30c>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000912:	4aaa      	ldr	r2, [pc, #680]	; (8000bbc <MX_GPIO_Init+0x30c>)
 8000914:	f043 0302 	orr.w	r3, r3, #2
 8000918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091a:	4ba8      	ldr	r3, [pc, #672]	; (8000bbc <MX_GPIO_Init+0x30c>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	f003 0302 	and.w	r3, r3, #2
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000926:	4ba5      	ldr	r3, [pc, #660]	; (8000bbc <MX_GPIO_Init+0x30c>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092a:	4aa4      	ldr	r2, [pc, #656]	; (8000bbc <MX_GPIO_Init+0x30c>)
 800092c:	f043 0308 	orr.w	r3, r3, #8
 8000930:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000932:	4ba2      	ldr	r3, [pc, #648]	; (8000bbc <MX_GPIO_Init+0x30c>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000936:	f003 0308 	and.w	r3, r3, #8
 800093a:	603b      	str	r3, [r7, #0]
 800093c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000944:	489e      	ldr	r0, [pc, #632]	; (8000bc0 <MX_GPIO_Init+0x310>)
 8000946:	f001 f909 	bl	8001b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	f248 1104 	movw	r1, #33028	; 0x8104
 8000950:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000954:	f001 f902 	bl	8001b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 8000958:	2200      	movs	r2, #0
 800095a:	f24b 0114 	movw	r1, #45076	; 0xb014
 800095e:	4899      	ldr	r0, [pc, #612]	; (8000bc4 <MX_GPIO_Init+0x314>)
 8000960:	f001 f8fc 	bl	8001b5c <HAL_GPIO_WritePin>
                          |ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000964:	2201      	movs	r2, #1
 8000966:	f244 0120 	movw	r1, #16416	; 0x4020
 800096a:	4896      	ldr	r0, [pc, #600]	; (8000bc4 <MX_GPIO_Init+0x314>)
 800096c:	f001 f8f6 	bl	8001b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000970:	2200      	movs	r2, #0
 8000972:	f241 0181 	movw	r1, #4225	; 0x1081
 8000976:	4894      	ldr	r0, [pc, #592]	; (8000bc8 <MX_GPIO_Init+0x318>)
 8000978:	f001 f8f0 	bl	8001b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 800097c:	2201      	movs	r2, #1
 800097e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000982:	4891      	ldr	r0, [pc, #580]	; (8000bc8 <MX_GPIO_Init+0x318>)
 8000984:	f001 f8ea 	bl	8001b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000988:	2200      	movs	r2, #0
 800098a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800098e:	488f      	ldr	r0, [pc, #572]	; (8000bcc <MX_GPIO_Init+0x31c>)
 8000990:	f001 f8e4 	bl	8001b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000994:	2201      	movs	r2, #1
 8000996:	2101      	movs	r1, #1
 8000998:	4889      	ldr	r0, [pc, #548]	; (8000bc0 <MX_GPIO_Init+0x310>)
 800099a:	f001 f8df 	bl	8001b5c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 800099e:	f240 1315 	movw	r3, #277	; 0x115
 80009a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a4:	2301      	movs	r3, #1
 80009a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	2300      	movs	r3, #0
 80009ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	4619      	mov	r1, r3
 80009b6:	4882      	ldr	r0, [pc, #520]	; (8000bc0 <MX_GPIO_Init+0x310>)
 80009b8:	f000 ff26 	bl	8001808 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80009bc:	236a      	movs	r3, #106	; 0x6a
 80009be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009c0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009ca:	f107 0314 	add.w	r3, r7, #20
 80009ce:	4619      	mov	r1, r3
 80009d0:	487b      	ldr	r0, [pc, #492]	; (8000bc0 <MX_GPIO_Init+0x310>)
 80009d2:	f000 ff19 	bl	8001808 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80009d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009dc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	4619      	mov	r1, r3
 80009ec:	4877      	ldr	r0, [pc, #476]	; (8000bcc <MX_GPIO_Init+0x31c>)
 80009ee:	f000 ff0b 	bl	8001808 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 80009f2:	233f      	movs	r3, #63	; 0x3f
 80009f4:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80009f6:	230b      	movs	r3, #11
 80009f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009fe:	f107 0314 	add.w	r3, r7, #20
 8000a02:	4619      	mov	r1, r3
 8000a04:	4871      	ldr	r0, [pc, #452]	; (8000bcc <MX_GPIO_Init+0x31c>)
 8000a06:	f000 feff 	bl	8001808 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000a0a:	2303      	movs	r3, #3
 8000a0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a16:	2303      	movs	r3, #3
 8000a18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000a1a:	2308      	movs	r3, #8
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	4619      	mov	r1, r3
 8000a24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a28:	f000 feee 	bl	8001808 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000a2c:	f248 1304 	movw	r3, #33028	; 0x8104
 8000a30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a32:	2301      	movs	r3, #1
 8000a34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a3e:	f107 0314 	add.w	r3, r7, #20
 8000a42:	4619      	mov	r1, r3
 8000a44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a48:	f000 fede 	bl	8001808 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000a4c:	2308      	movs	r3, #8
 8000a4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a50:	2302      	movs	r3, #2
 8000a52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	4619      	mov	r1, r3
 8000a66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a6a:	f000 fecd 	bl	8001808 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000a6e:	2310      	movs	r3, #16
 8000a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a72:	230b      	movs	r3, #11
 8000a74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000a7a:	f107 0314 	add.w	r3, r7, #20
 8000a7e:	4619      	mov	r1, r3
 8000a80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a84:	f000 fec0 	bl	8001808 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000a88:	23e0      	movs	r3, #224	; 0xe0
 8000a8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	2300      	movs	r3, #0
 8000a92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a94:	2303      	movs	r3, #3
 8000a96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000a98:	2305      	movs	r3, #5
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aa6:	f000 feaf 	bl	8001808 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000ab2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000ab8:	f107 0314 	add.w	r3, r7, #20
 8000abc:	4619      	mov	r1, r3
 8000abe:	4841      	ldr	r0, [pc, #260]	; (8000bc4 <MX_GPIO_Init+0x314>)
 8000ac0:	f000 fea2 	bl	8001808 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000ac4:	2302      	movs	r3, #2
 8000ac6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ac8:	230b      	movs	r3, #11
 8000aca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	483b      	ldr	r0, [pc, #236]	; (8000bc4 <MX_GPIO_Init+0x314>)
 8000ad8:	f000 fe96 	bl	8001808 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000adc:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000ae0:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aea:	2300      	movs	r3, #0
 8000aec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aee:	f107 0314 	add.w	r3, r7, #20
 8000af2:	4619      	mov	r1, r3
 8000af4:	4833      	ldr	r0, [pc, #204]	; (8000bc4 <MX_GPIO_Init+0x314>)
 8000af6:	f000 fe87 	bl	8001808 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000afa:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000afe:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b00:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	4619      	mov	r1, r3
 8000b10:	482d      	ldr	r0, [pc, #180]	; (8000bc8 <MX_GPIO_Init+0x318>)
 8000b12:	f000 fe79 	bl	8001808 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000b16:	f243 0381 	movw	r3, #12417	; 0x3081
 8000b1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b24:	2300      	movs	r3, #0
 8000b26:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4826      	ldr	r0, [pc, #152]	; (8000bc8 <MX_GPIO_Init+0x318>)
 8000b30:	f000 fe6a 	bl	8001808 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000b34:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b42:	2300      	movs	r3, #0
 8000b44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	481f      	ldr	r0, [pc, #124]	; (8000bcc <MX_GPIO_Init+0x31c>)
 8000b4e:	f000 fe5b 	bl	8001808 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000b52:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000b56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b58:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4619      	mov	r1, r3
 8000b68:	4818      	ldr	r0, [pc, #96]	; (8000bcc <MX_GPIO_Init+0x31c>)
 8000b6a:	f000 fe4d 	bl	8001808 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b72:	2302      	movs	r3, #2
 8000b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b7e:	2305      	movs	r3, #5
 8000b80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	4619      	mov	r1, r3
 8000b88:	480f      	ldr	r0, [pc, #60]	; (8000bc8 <MX_GPIO_Init+0x318>)
 8000b8a:	f000 fe3d 	bl	8001808 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000b8e:	2378      	movs	r3, #120	; 0x78
 8000b90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b92:	2302      	movs	r3, #2
 8000b94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9a:	2303      	movs	r3, #3
 8000b9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b9e:	2307      	movs	r3, #7
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ba2:	f107 0314 	add.w	r3, r7, #20
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4807      	ldr	r0, [pc, #28]	; (8000bc8 <MX_GPIO_Init+0x318>)
 8000baa:	f000 fe2d 	bl	8001808 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000bae:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bb4:	2312      	movs	r3, #18
 8000bb6:	61bb      	str	r3, [r7, #24]
 8000bb8:	e00a      	b.n	8000bd0 <MX_GPIO_Init+0x320>
 8000bba:	bf00      	nop
 8000bbc:	40021000 	.word	0x40021000
 8000bc0:	48001000 	.word	0x48001000
 8000bc4:	48000400 	.word	0x48000400
 8000bc8:	48000c00 	.word	0x48000c00
 8000bcc:	48000800 	.word	0x48000800
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bd8:	2304      	movs	r3, #4
 8000bda:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	4619      	mov	r1, r3
 8000be2:	480b      	ldr	r0, [pc, #44]	; (8000c10 <MX_GPIO_Init+0x360>)
 8000be4:	f000 fe10 	bl	8001808 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000be8:	2200      	movs	r2, #0
 8000bea:	2100      	movs	r1, #0
 8000bec:	2017      	movs	r0, #23
 8000bee:	f000 fcc8 	bl	8001582 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000bf2:	2017      	movs	r0, #23
 8000bf4:	f000 fce1 	bl	80015ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2100      	movs	r1, #0
 8000bfc:	2028      	movs	r0, #40	; 0x28
 8000bfe:	f000 fcc0 	bl	8001582 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c02:	2028      	movs	r0, #40	; 0x28
 8000c04:	f000 fcd9 	bl	80015ba <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c08:	bf00      	nop
 8000c0a:	3728      	adds	r7, #40	; 0x28
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	48000400 	.word	0x48000400

08000c14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c18:	b672      	cpsid	i
}
 8000c1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <Error_Handler+0x8>
	...

08000c20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c26:	4b0f      	ldr	r3, [pc, #60]	; (8000c64 <HAL_MspInit+0x44>)
 8000c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c2a:	4a0e      	ldr	r2, [pc, #56]	; (8000c64 <HAL_MspInit+0x44>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	6613      	str	r3, [r2, #96]	; 0x60
 8000c32:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <HAL_MspInit+0x44>)
 8000c34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3e:	4b09      	ldr	r3, [pc, #36]	; (8000c64 <HAL_MspInit+0x44>)
 8000c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c42:	4a08      	ldr	r2, [pc, #32]	; (8000c64 <HAL_MspInit+0x44>)
 8000c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c48:	6593      	str	r3, [r2, #88]	; 0x58
 8000c4a:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <HAL_MspInit+0x44>)
 8000c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c52:	603b      	str	r3, [r7, #0]
 8000c54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c56:	bf00      	nop
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	40021000 	.word	0x40021000

08000c68 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b0ac      	sub	sp, #176	; 0xb0
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c80:	f107 0314 	add.w	r3, r7, #20
 8000c84:	2288      	movs	r2, #136	; 0x88
 8000c86:	2100      	movs	r1, #0
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f003 fead 	bl	80049e8 <memset>
  if(DFSDM1_Init == 0)
 8000c8e:	4b25      	ldr	r3, [pc, #148]	; (8000d24 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d142      	bne.n	8000d1c <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000c96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c9a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f002 f968 	bl	8002f7c <HAL_RCCEx_PeriphCLKConfig>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000cb2:	f7ff ffaf 	bl	8000c14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000cb6:	4b1c      	ldr	r3, [pc, #112]	; (8000d28 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cba:	4a1b      	ldr	r2, [pc, #108]	; (8000d28 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000cbc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000cc0:	6613      	str	r3, [r2, #96]	; 0x60
 8000cc2:	4b19      	ldr	r3, [pc, #100]	; (8000d28 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000cca:	613b      	str	r3, [r7, #16]
 8000ccc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cce:	4b16      	ldr	r3, [pc, #88]	; (8000d28 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd2:	4a15      	ldr	r2, [pc, #84]	; (8000d28 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000cd4:	f043 0310 	orr.w	r3, r3, #16
 8000cd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cda:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cde:	f003 0310 	and.w	r3, r3, #16
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000ce6:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000cea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000d00:	2306      	movs	r3, #6
 8000d02:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d06:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4807      	ldr	r0, [pc, #28]	; (8000d2c <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000d0e:	f000 fd7b 	bl	8001808 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000d12:	4b04      	ldr	r3, [pc, #16]	; (8000d24 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	3301      	adds	r3, #1
 8000d18:	4a02      	ldr	r2, [pc, #8]	; (8000d24 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000d1a:	6013      	str	r3, [r2, #0]
  }

}
 8000d1c:	bf00      	nop
 8000d1e:	37b0      	adds	r7, #176	; 0xb0
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000778 	.word	0x20000778
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	48001000 	.word	0x48001000

08000d30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b0ac      	sub	sp, #176	; 0xb0
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	2288      	movs	r2, #136	; 0x88
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4618      	mov	r0, r3
 8000d52:	f003 fe49 	bl	80049e8 <memset>
  if(hi2c->Instance==I2C2)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a21      	ldr	r2, [pc, #132]	; (8000de0 <HAL_I2C_MspInit+0xb0>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d13b      	bne.n	8000dd8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000d60:	2380      	movs	r3, #128	; 0x80
 8000d62:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000d64:	2300      	movs	r3, #0
 8000d66:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f002 f905 	bl	8002f7c <HAL_RCCEx_PeriphCLKConfig>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000d78:	f7ff ff4c 	bl	8000c14 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7c:	4b19      	ldr	r3, [pc, #100]	; (8000de4 <HAL_I2C_MspInit+0xb4>)
 8000d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d80:	4a18      	ldr	r2, [pc, #96]	; (8000de4 <HAL_I2C_MspInit+0xb4>)
 8000d82:	f043 0302 	orr.w	r3, r3, #2
 8000d86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d88:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <HAL_I2C_MspInit+0xb4>)
 8000d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8c:	f003 0302 	and.w	r3, r3, #2
 8000d90:	613b      	str	r3, [r7, #16]
 8000d92:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000d94:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d9c:	2312      	movs	r3, #18
 8000d9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000da2:	2301      	movs	r3, #1
 8000da4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da8:	2303      	movs	r3, #3
 8000daa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000dae:	2304      	movs	r3, #4
 8000db0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000db8:	4619      	mov	r1, r3
 8000dba:	480b      	ldr	r0, [pc, #44]	; (8000de8 <HAL_I2C_MspInit+0xb8>)
 8000dbc:	f000 fd24 	bl	8001808 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000dc0:	4b08      	ldr	r3, [pc, #32]	; (8000de4 <HAL_I2C_MspInit+0xb4>)
 8000dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc4:	4a07      	ldr	r2, [pc, #28]	; (8000de4 <HAL_I2C_MspInit+0xb4>)
 8000dc6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000dca:	6593      	str	r3, [r2, #88]	; 0x58
 8000dcc:	4b05      	ldr	r3, [pc, #20]	; (8000de4 <HAL_I2C_MspInit+0xb4>)
 8000dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dd4:	60fb      	str	r3, [r7, #12]
 8000dd6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000dd8:	bf00      	nop
 8000dda:	37b0      	adds	r7, #176	; 0xb0
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40005800 	.word	0x40005800
 8000de4:	40021000 	.word	0x40021000
 8000de8:	48000400 	.word	0x48000400

08000dec <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b08a      	sub	sp, #40	; 0x28
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df4:	f107 0314 	add.w	r3, r7, #20
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a17      	ldr	r2, [pc, #92]	; (8000e68 <HAL_QSPI_MspInit+0x7c>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d128      	bne.n	8000e60 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000e0e:	4b17      	ldr	r3, [pc, #92]	; (8000e6c <HAL_QSPI_MspInit+0x80>)
 8000e10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e12:	4a16      	ldr	r2, [pc, #88]	; (8000e6c <HAL_QSPI_MspInit+0x80>)
 8000e14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e18:	6513      	str	r3, [r2, #80]	; 0x50
 8000e1a:	4b14      	ldr	r3, [pc, #80]	; (8000e6c <HAL_QSPI_MspInit+0x80>)
 8000e1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e22:	613b      	str	r3, [r7, #16]
 8000e24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e26:	4b11      	ldr	r3, [pc, #68]	; (8000e6c <HAL_QSPI_MspInit+0x80>)
 8000e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2a:	4a10      	ldr	r2, [pc, #64]	; (8000e6c <HAL_QSPI_MspInit+0x80>)
 8000e2c:	f043 0310 	orr.w	r3, r3, #16
 8000e30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e32:	4b0e      	ldr	r3, [pc, #56]	; (8000e6c <HAL_QSPI_MspInit+0x80>)
 8000e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e36:	f003 0310 	and.w	r3, r3, #16
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000e3e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000e42:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e44:	2302      	movs	r3, #2
 8000e46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000e50:	230a      	movs	r3, #10
 8000e52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4805      	ldr	r0, [pc, #20]	; (8000e70 <HAL_QSPI_MspInit+0x84>)
 8000e5c:	f000 fcd4 	bl	8001808 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000e60:	bf00      	nop
 8000e62:	3728      	adds	r7, #40	; 0x28
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	a0001000 	.word	0xa0001000
 8000e6c:	40021000 	.word	0x40021000
 8000e70:	48001000 	.word	0x48001000

08000e74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b08a      	sub	sp, #40	; 0x28
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7c:	f107 0314 	add.w	r3, r7, #20
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a17      	ldr	r2, [pc, #92]	; (8000ef0 <HAL_SPI_MspInit+0x7c>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d128      	bne.n	8000ee8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000e96:	4b17      	ldr	r3, [pc, #92]	; (8000ef4 <HAL_SPI_MspInit+0x80>)
 8000e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e9a:	4a16      	ldr	r2, [pc, #88]	; (8000ef4 <HAL_SPI_MspInit+0x80>)
 8000e9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ea0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ea2:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <HAL_SPI_MspInit+0x80>)
 8000ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eae:	4b11      	ldr	r3, [pc, #68]	; (8000ef4 <HAL_SPI_MspInit+0x80>)
 8000eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb2:	4a10      	ldr	r2, [pc, #64]	; (8000ef4 <HAL_SPI_MspInit+0x80>)
 8000eb4:	f043 0304 	orr.w	r3, r3, #4
 8000eb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eba:	4b0e      	ldr	r3, [pc, #56]	; (8000ef4 <HAL_SPI_MspInit+0x80>)
 8000ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ebe:	f003 0304 	and.w	r3, r3, #4
 8000ec2:	60fb      	str	r3, [r7, #12]
 8000ec4:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000ec6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000eca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ed8:	2306      	movs	r3, #6
 8000eda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4805      	ldr	r0, [pc, #20]	; (8000ef8 <HAL_SPI_MspInit+0x84>)
 8000ee4:	f000 fc90 	bl	8001808 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000ee8:	bf00      	nop
 8000eea:	3728      	adds	r7, #40	; 0x28
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40003c00 	.word	0x40003c00
 8000ef4:	40021000 	.word	0x40021000
 8000ef8:	48000800 	.word	0x48000800

08000efc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b0ae      	sub	sp, #184	; 0xb8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f04:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	605a      	str	r2, [r3, #4]
 8000f0e:	609a      	str	r2, [r3, #8]
 8000f10:	60da      	str	r2, [r3, #12]
 8000f12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f14:	f107 031c 	add.w	r3, r7, #28
 8000f18:	2288      	movs	r2, #136	; 0x88
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f003 fd63 	bl	80049e8 <memset>
  if(huart->Instance==USART1)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a42      	ldr	r2, [pc, #264]	; (8001030 <HAL_UART_MspInit+0x134>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d13b      	bne.n	8000fa4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f2c:	2301      	movs	r3, #1
 8000f2e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f30:	2300      	movs	r3, #0
 8000f32:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f34:	f107 031c 	add.w	r3, r7, #28
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f002 f81f 	bl	8002f7c <HAL_RCCEx_PeriphCLKConfig>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f44:	f7ff fe66 	bl	8000c14 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f48:	4b3a      	ldr	r3, [pc, #232]	; (8001034 <HAL_UART_MspInit+0x138>)
 8000f4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f4c:	4a39      	ldr	r2, [pc, #228]	; (8001034 <HAL_UART_MspInit+0x138>)
 8000f4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f52:	6613      	str	r3, [r2, #96]	; 0x60
 8000f54:	4b37      	ldr	r3, [pc, #220]	; (8001034 <HAL_UART_MspInit+0x138>)
 8000f56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f5c:	61bb      	str	r3, [r7, #24]
 8000f5e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f60:	4b34      	ldr	r3, [pc, #208]	; (8001034 <HAL_UART_MspInit+0x138>)
 8000f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f64:	4a33      	ldr	r2, [pc, #204]	; (8001034 <HAL_UART_MspInit+0x138>)
 8000f66:	f043 0302 	orr.w	r3, r3, #2
 8000f6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f6c:	4b31      	ldr	r3, [pc, #196]	; (8001034 <HAL_UART_MspInit+0x138>)
 8000f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f70:	f003 0302 	and.w	r3, r3, #2
 8000f74:	617b      	str	r3, [r7, #20]
 8000f76:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8000f78:	23c0      	movs	r3, #192	; 0xc0
 8000f7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f90:	2307      	movs	r3, #7
 8000f92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f96:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4826      	ldr	r0, [pc, #152]	; (8001038 <HAL_UART_MspInit+0x13c>)
 8000f9e:	f000 fc33 	bl	8001808 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fa2:	e040      	b.n	8001026 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a24      	ldr	r2, [pc, #144]	; (800103c <HAL_UART_MspInit+0x140>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d13b      	bne.n	8001026 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fae:	2304      	movs	r3, #4
 8000fb0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fb6:	f107 031c 	add.w	r3, r7, #28
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f001 ffde 	bl	8002f7c <HAL_RCCEx_PeriphCLKConfig>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <HAL_UART_MspInit+0xce>
      Error_Handler();
 8000fc6:	f7ff fe25 	bl	8000c14 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fca:	4b1a      	ldr	r3, [pc, #104]	; (8001034 <HAL_UART_MspInit+0x138>)
 8000fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fce:	4a19      	ldr	r2, [pc, #100]	; (8001034 <HAL_UART_MspInit+0x138>)
 8000fd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fd4:	6593      	str	r3, [r2, #88]	; 0x58
 8000fd6:	4b17      	ldr	r3, [pc, #92]	; (8001034 <HAL_UART_MspInit+0x138>)
 8000fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fde:	613b      	str	r3, [r7, #16]
 8000fe0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fe2:	4b14      	ldr	r3, [pc, #80]	; (8001034 <HAL_UART_MspInit+0x138>)
 8000fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe6:	4a13      	ldr	r2, [pc, #76]	; (8001034 <HAL_UART_MspInit+0x138>)
 8000fe8:	f043 0308 	orr.w	r3, r3, #8
 8000fec:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fee:	4b11      	ldr	r3, [pc, #68]	; (8001034 <HAL_UART_MspInit+0x138>)
 8000ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff2:	f003 0308 	and.w	r3, r3, #8
 8000ff6:	60fb      	str	r3, [r7, #12]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8000ffa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ffe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001002:	2302      	movs	r3, #2
 8001004:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001008:	2300      	movs	r3, #0
 800100a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800100e:	2303      	movs	r3, #3
 8001010:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001014:	2307      	movs	r3, #7
 8001016:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800101a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800101e:	4619      	mov	r1, r3
 8001020:	4807      	ldr	r0, [pc, #28]	; (8001040 <HAL_UART_MspInit+0x144>)
 8001022:	f000 fbf1 	bl	8001808 <HAL_GPIO_Init>
}
 8001026:	bf00      	nop
 8001028:	37b8      	adds	r7, #184	; 0xb8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40013800 	.word	0x40013800
 8001034:	40021000 	.word	0x40021000
 8001038:	48000400 	.word	0x48000400
 800103c:	40004800 	.word	0x40004800
 8001040:	48000c00 	.word	0x48000c00

08001044 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b0ac      	sub	sp, #176	; 0xb0
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	2288      	movs	r2, #136	; 0x88
 8001062:	2100      	movs	r1, #0
 8001064:	4618      	mov	r0, r3
 8001066:	f003 fcbf 	bl	80049e8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001072:	d17c      	bne.n	800116e <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001074:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001078:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 800107a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800107e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001082:	2301      	movs	r3, #1
 8001084:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001086:	2301      	movs	r3, #1
 8001088:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 800108a:	2318      	movs	r3, #24
 800108c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800108e:	2307      	movs	r3, #7
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001092:	2302      	movs	r3, #2
 8001094:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001096:	2302      	movs	r3, #2
 8001098:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 800109a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800109e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	4618      	mov	r0, r3
 80010a6:	f001 ff69 	bl	8002f7c <HAL_RCCEx_PeriphCLKConfig>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80010b0:	f7ff fdb0 	bl	8000c14 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b4:	4b30      	ldr	r3, [pc, #192]	; (8001178 <HAL_PCD_MspInit+0x134>)
 80010b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b8:	4a2f      	ldr	r2, [pc, #188]	; (8001178 <HAL_PCD_MspInit+0x134>)
 80010ba:	f043 0301 	orr.w	r3, r3, #1
 80010be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c0:	4b2d      	ldr	r3, [pc, #180]	; (8001178 <HAL_PCD_MspInit+0x134>)
 80010c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c4:	f003 0301 	and.w	r3, r3, #1
 80010c8:	613b      	str	r3, [r7, #16]
 80010ca:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80010cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d4:	2300      	movs	r3, #0
 80010d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80010e0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010e4:	4619      	mov	r1, r3
 80010e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ea:	f000 fb8d 	bl	8001808 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 80010ee:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80010f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f6:	2302      	movs	r3, #2
 80010f8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fc:	2300      	movs	r3, #0
 80010fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001102:	2303      	movs	r3, #3
 8001104:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001108:	230a      	movs	r3, #10
 800110a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001112:	4619      	mov	r1, r3
 8001114:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001118:	f000 fb76 	bl	8001808 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800111c:	4b16      	ldr	r3, [pc, #88]	; (8001178 <HAL_PCD_MspInit+0x134>)
 800111e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001120:	4a15      	ldr	r2, [pc, #84]	; (8001178 <HAL_PCD_MspInit+0x134>)
 8001122:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001126:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001128:	4b13      	ldr	r3, [pc, #76]	; (8001178 <HAL_PCD_MspInit+0x134>)
 800112a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001130:	60fb      	str	r3, [r7, #12]
 8001132:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001134:	4b10      	ldr	r3, [pc, #64]	; (8001178 <HAL_PCD_MspInit+0x134>)
 8001136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001138:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800113c:	2b00      	cmp	r3, #0
 800113e:	d114      	bne.n	800116a <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001140:	4b0d      	ldr	r3, [pc, #52]	; (8001178 <HAL_PCD_MspInit+0x134>)
 8001142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001144:	4a0c      	ldr	r2, [pc, #48]	; (8001178 <HAL_PCD_MspInit+0x134>)
 8001146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800114a:	6593      	str	r3, [r2, #88]	; 0x58
 800114c:	4b0a      	ldr	r3, [pc, #40]	; (8001178 <HAL_PCD_MspInit+0x134>)
 800114e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001158:	f001 f844 	bl	80021e4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <HAL_PCD_MspInit+0x134>)
 800115e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001160:	4a05      	ldr	r2, [pc, #20]	; (8001178 <HAL_PCD_MspInit+0x134>)
 8001162:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001166:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001168:	e001      	b.n	800116e <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 800116a:	f001 f83b 	bl	80021e4 <HAL_PWREx_EnableVddUSB>
}
 800116e:	bf00      	nop
 8001170:	37b0      	adds	r7, #176	; 0xb0
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40021000 	.word	0x40021000

0800117c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001180:	e7fe      	b.n	8001180 <NMI_Handler+0x4>

08001182 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001182:	b480      	push	{r7}
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001186:	e7fe      	b.n	8001186 <HardFault_Handler+0x4>

08001188 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800118c:	e7fe      	b.n	800118c <MemManage_Handler+0x4>

0800118e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001192:	e7fe      	b.n	8001192 <BusFault_Handler+0x4>

08001194 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001198:	e7fe      	b.n	8001198 <UsageFault_Handler+0x4>

0800119a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011b6:	b480      	push	{r7}
 80011b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ba:	bf00      	nop
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr

080011c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011c8:	f000 f8bc 	bl	8001344 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011cc:	bf00      	nop
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80011d4:	2020      	movs	r0, #32
 80011d6:	f000 fcf3 	bl	8001bc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80011da:	2040      	movs	r0, #64	; 0x40
 80011dc:	f000 fcf0 	bl	8001bc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80011e0:	2080      	movs	r0, #128	; 0x80
 80011e2:	f000 fced 	bl	8001bc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80011e6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80011ea:	f000 fce9 	bl	8001bc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}

080011f2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011f2:	b580      	push	{r7, lr}
 80011f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 80011f6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80011fa:	f000 fce1 	bl	8001bc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 80011fe:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001202:	f000 fcdd 	bl	8001bc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8001206:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800120a:	f000 fcd9 	bl	8001bc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 800120e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001212:	f000 fcd5 	bl	8001bc0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8001216:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800121a:	f000 fcd1 	bl	8001bc0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <SystemInit+0x20>)
 800122a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800122e:	4a05      	ldr	r2, [pc, #20]	; (8001244 <SystemInit+0x20>)
 8001230:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001234:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001248:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001280 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800124c:	f7ff ffea 	bl	8001224 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001250:	480c      	ldr	r0, [pc, #48]	; (8001284 <LoopForever+0x6>)
  ldr r1, =_edata
 8001252:	490d      	ldr	r1, [pc, #52]	; (8001288 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001254:	4a0d      	ldr	r2, [pc, #52]	; (800128c <LoopForever+0xe>)
  movs r3, #0
 8001256:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001258:	e002      	b.n	8001260 <LoopCopyDataInit>

0800125a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800125a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800125c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800125e:	3304      	adds	r3, #4

08001260 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001260:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001262:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001264:	d3f9      	bcc.n	800125a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001266:	4a0a      	ldr	r2, [pc, #40]	; (8001290 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001268:	4c0a      	ldr	r4, [pc, #40]	; (8001294 <LoopForever+0x16>)
  movs r3, #0
 800126a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800126c:	e001      	b.n	8001272 <LoopFillZerobss>

0800126e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800126e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001270:	3204      	adds	r2, #4

08001272 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001272:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001274:	d3fb      	bcc.n	800126e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001276:	f003 fbbf 	bl	80049f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800127a:	f7ff f923 	bl	80004c4 <main>

0800127e <LoopForever>:

LoopForever:
    b LoopForever
 800127e:	e7fe      	b.n	800127e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001280:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001288:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800128c:	08004ab0 	.word	0x08004ab0
  ldr r2, =_sbss
 8001290:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001294:	200007a4 	.word	0x200007a4

08001298 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001298:	e7fe      	b.n	8001298 <ADC1_2_IRQHandler>

0800129a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012a0:	2300      	movs	r3, #0
 80012a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012a4:	2003      	movs	r0, #3
 80012a6:	f000 f961 	bl	800156c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012aa:	2000      	movs	r0, #0
 80012ac:	f000 f80e 	bl	80012cc <HAL_InitTick>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d002      	beq.n	80012bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	71fb      	strb	r3, [r7, #7]
 80012ba:	e001      	b.n	80012c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012bc:	f7ff fcb0 	bl	8000c20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012c0:	79fb      	ldrb	r3, [r7, #7]
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
	...

080012cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012d4:	2300      	movs	r3, #0
 80012d6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80012d8:	4b17      	ldr	r3, [pc, #92]	; (8001338 <HAL_InitTick+0x6c>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d023      	beq.n	8001328 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80012e0:	4b16      	ldr	r3, [pc, #88]	; (800133c <HAL_InitTick+0x70>)
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	4b14      	ldr	r3, [pc, #80]	; (8001338 <HAL_InitTick+0x6c>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	4619      	mov	r1, r3
 80012ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80012f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 f96d 	bl	80015d6 <HAL_SYSTICK_Config>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d10f      	bne.n	8001322 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2b0f      	cmp	r3, #15
 8001306:	d809      	bhi.n	800131c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001308:	2200      	movs	r2, #0
 800130a:	6879      	ldr	r1, [r7, #4]
 800130c:	f04f 30ff 	mov.w	r0, #4294967295
 8001310:	f000 f937 	bl	8001582 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001314:	4a0a      	ldr	r2, [pc, #40]	; (8001340 <HAL_InitTick+0x74>)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6013      	str	r3, [r2, #0]
 800131a:	e007      	b.n	800132c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	73fb      	strb	r3, [r7, #15]
 8001320:	e004      	b.n	800132c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	73fb      	strb	r3, [r7, #15]
 8001326:	e001      	b.n	800132c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001328:	2301      	movs	r3, #1
 800132a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800132c:	7bfb      	ldrb	r3, [r7, #15]
}
 800132e:	4618      	mov	r0, r3
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	20000008 	.word	0x20000008
 800133c:	20000000 	.word	0x20000000
 8001340:	20000004 	.word	0x20000004

08001344 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001348:	4b06      	ldr	r3, [pc, #24]	; (8001364 <HAL_IncTick+0x20>)
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	461a      	mov	r2, r3
 800134e:	4b06      	ldr	r3, [pc, #24]	; (8001368 <HAL_IncTick+0x24>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4413      	add	r3, r2
 8001354:	4a04      	ldr	r2, [pc, #16]	; (8001368 <HAL_IncTick+0x24>)
 8001356:	6013      	str	r3, [r2, #0]
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	20000008 	.word	0x20000008
 8001368:	2000077c 	.word	0x2000077c

0800136c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  return uwTick;
 8001370:	4b03      	ldr	r3, [pc, #12]	; (8001380 <HAL_GetTick+0x14>)
 8001372:	681b      	ldr	r3, [r3, #0]
}
 8001374:	4618      	mov	r0, r3
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	2000077c 	.word	0x2000077c

08001384 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800138c:	f7ff ffee 	bl	800136c <HAL_GetTick>
 8001390:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800139c:	d005      	beq.n	80013aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800139e:	4b0a      	ldr	r3, [pc, #40]	; (80013c8 <HAL_Delay+0x44>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	461a      	mov	r2, r3
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	4413      	add	r3, r2
 80013a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013aa:	bf00      	nop
 80013ac:	f7ff ffde 	bl	800136c <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	68fa      	ldr	r2, [r7, #12]
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d8f7      	bhi.n	80013ac <HAL_Delay+0x28>
  {
  }
}
 80013bc:	bf00      	nop
 80013be:	bf00      	nop
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000008 	.word	0x20000008

080013cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b085      	sub	sp, #20
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013dc:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <__NVIC_SetPriorityGrouping+0x44>)
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013e2:	68ba      	ldr	r2, [r7, #8]
 80013e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013e8:	4013      	ands	r3, r2
 80013ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013fe:	4a04      	ldr	r2, [pc, #16]	; (8001410 <__NVIC_SetPriorityGrouping+0x44>)
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	60d3      	str	r3, [r2, #12]
}
 8001404:	bf00      	nop
 8001406:	3714      	adds	r7, #20
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	e000ed00 	.word	0xe000ed00

08001414 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001418:	4b04      	ldr	r3, [pc, #16]	; (800142c <__NVIC_GetPriorityGrouping+0x18>)
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	0a1b      	lsrs	r3, r3, #8
 800141e:	f003 0307 	and.w	r3, r3, #7
}
 8001422:	4618      	mov	r0, r3
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	e000ed00 	.word	0xe000ed00

08001430 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800143a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143e:	2b00      	cmp	r3, #0
 8001440:	db0b      	blt.n	800145a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	f003 021f 	and.w	r2, r3, #31
 8001448:	4907      	ldr	r1, [pc, #28]	; (8001468 <__NVIC_EnableIRQ+0x38>)
 800144a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144e:	095b      	lsrs	r3, r3, #5
 8001450:	2001      	movs	r0, #1
 8001452:	fa00 f202 	lsl.w	r2, r0, r2
 8001456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	e000e100 	.word	0xe000e100

0800146c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	6039      	str	r1, [r7, #0]
 8001476:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147c:	2b00      	cmp	r3, #0
 800147e:	db0a      	blt.n	8001496 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	b2da      	uxtb	r2, r3
 8001484:	490c      	ldr	r1, [pc, #48]	; (80014b8 <__NVIC_SetPriority+0x4c>)
 8001486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148a:	0112      	lsls	r2, r2, #4
 800148c:	b2d2      	uxtb	r2, r2
 800148e:	440b      	add	r3, r1
 8001490:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001494:	e00a      	b.n	80014ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	b2da      	uxtb	r2, r3
 800149a:	4908      	ldr	r1, [pc, #32]	; (80014bc <__NVIC_SetPriority+0x50>)
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	f003 030f 	and.w	r3, r3, #15
 80014a2:	3b04      	subs	r3, #4
 80014a4:	0112      	lsls	r2, r2, #4
 80014a6:	b2d2      	uxtb	r2, r2
 80014a8:	440b      	add	r3, r1
 80014aa:	761a      	strb	r2, [r3, #24]
}
 80014ac:	bf00      	nop
 80014ae:	370c      	adds	r7, #12
 80014b0:	46bd      	mov	sp, r7
 80014b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b6:	4770      	bx	lr
 80014b8:	e000e100 	.word	0xe000e100
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b089      	sub	sp, #36	; 0x24
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	60f8      	str	r0, [r7, #12]
 80014c8:	60b9      	str	r1, [r7, #8]
 80014ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f003 0307 	and.w	r3, r3, #7
 80014d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	f1c3 0307 	rsb	r3, r3, #7
 80014da:	2b04      	cmp	r3, #4
 80014dc:	bf28      	it	cs
 80014de:	2304      	movcs	r3, #4
 80014e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	3304      	adds	r3, #4
 80014e6:	2b06      	cmp	r3, #6
 80014e8:	d902      	bls.n	80014f0 <NVIC_EncodePriority+0x30>
 80014ea:	69fb      	ldr	r3, [r7, #28]
 80014ec:	3b03      	subs	r3, #3
 80014ee:	e000      	b.n	80014f2 <NVIC_EncodePriority+0x32>
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f4:	f04f 32ff 	mov.w	r2, #4294967295
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	43da      	mvns	r2, r3
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	401a      	ands	r2, r3
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001508:	f04f 31ff 	mov.w	r1, #4294967295
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	fa01 f303 	lsl.w	r3, r1, r3
 8001512:	43d9      	mvns	r1, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001518:	4313      	orrs	r3, r2
         );
}
 800151a:	4618      	mov	r0, r3
 800151c:	3724      	adds	r7, #36	; 0x24
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
	...

08001528 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	3b01      	subs	r3, #1
 8001534:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001538:	d301      	bcc.n	800153e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800153a:	2301      	movs	r3, #1
 800153c:	e00f      	b.n	800155e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800153e:	4a0a      	ldr	r2, [pc, #40]	; (8001568 <SysTick_Config+0x40>)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	3b01      	subs	r3, #1
 8001544:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001546:	210f      	movs	r1, #15
 8001548:	f04f 30ff 	mov.w	r0, #4294967295
 800154c:	f7ff ff8e 	bl	800146c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001550:	4b05      	ldr	r3, [pc, #20]	; (8001568 <SysTick_Config+0x40>)
 8001552:	2200      	movs	r2, #0
 8001554:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001556:	4b04      	ldr	r3, [pc, #16]	; (8001568 <SysTick_Config+0x40>)
 8001558:	2207      	movs	r2, #7
 800155a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	e000e010 	.word	0xe000e010

0800156c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	f7ff ff29 	bl	80013cc <__NVIC_SetPriorityGrouping>
}
 800157a:	bf00      	nop
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b086      	sub	sp, #24
 8001586:	af00      	add	r7, sp, #0
 8001588:	4603      	mov	r3, r0
 800158a:	60b9      	str	r1, [r7, #8]
 800158c:	607a      	str	r2, [r7, #4]
 800158e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001590:	2300      	movs	r3, #0
 8001592:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001594:	f7ff ff3e 	bl	8001414 <__NVIC_GetPriorityGrouping>
 8001598:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800159a:	687a      	ldr	r2, [r7, #4]
 800159c:	68b9      	ldr	r1, [r7, #8]
 800159e:	6978      	ldr	r0, [r7, #20]
 80015a0:	f7ff ff8e 	bl	80014c0 <NVIC_EncodePriority>
 80015a4:	4602      	mov	r2, r0
 80015a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015aa:	4611      	mov	r1, r2
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7ff ff5d 	bl	800146c <__NVIC_SetPriority>
}
 80015b2:	bf00      	nop
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	4603      	mov	r3, r0
 80015c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff ff31 	bl	8001430 <__NVIC_EnableIRQ>
}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b082      	sub	sp, #8
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff ffa2 	bl	8001528 <SysTick_Config>
 80015e4:	4603      	mov	r3, r0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
	...

080015f0 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e0ac      	b.n	800175c <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f000 f8b2 	bl	8001770 <DFSDM_GetChannelFromInstance>
 800160c:	4603      	mov	r3, r0
 800160e:	4a55      	ldr	r2, [pc, #340]	; (8001764 <HAL_DFSDM_ChannelInit+0x174>)
 8001610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001618:	2301      	movs	r3, #1
 800161a:	e09f      	b.n	800175c <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff fb23 	bl	8000c68 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8001622:	4b51      	ldr	r3, [pc, #324]	; (8001768 <HAL_DFSDM_ChannelInit+0x178>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	3301      	adds	r3, #1
 8001628:	4a4f      	ldr	r2, [pc, #316]	; (8001768 <HAL_DFSDM_ChannelInit+0x178>)
 800162a:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 800162c:	4b4e      	ldr	r3, [pc, #312]	; (8001768 <HAL_DFSDM_ChannelInit+0x178>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d125      	bne.n	8001680 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8001634:	4b4d      	ldr	r3, [pc, #308]	; (800176c <HAL_DFSDM_ChannelInit+0x17c>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a4c      	ldr	r2, [pc, #304]	; (800176c <HAL_DFSDM_ChannelInit+0x17c>)
 800163a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800163e:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001640:	4b4a      	ldr	r3, [pc, #296]	; (800176c <HAL_DFSDM_ChannelInit+0x17c>)
 8001642:	681a      	ldr	r2, [r3, #0]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	4948      	ldr	r1, [pc, #288]	; (800176c <HAL_DFSDM_ChannelInit+0x17c>)
 800164a:	4313      	orrs	r3, r2
 800164c:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 800164e:	4b47      	ldr	r3, [pc, #284]	; (800176c <HAL_DFSDM_ChannelInit+0x17c>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4a46      	ldr	r2, [pc, #280]	; (800176c <HAL_DFSDM_ChannelInit+0x17c>)
 8001654:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001658:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	791b      	ldrb	r3, [r3, #4]
 800165e:	2b01      	cmp	r3, #1
 8001660:	d108      	bne.n	8001674 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8001662:	4b42      	ldr	r3, [pc, #264]	; (800176c <HAL_DFSDM_ChannelInit+0x17c>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	68db      	ldr	r3, [r3, #12]
 800166a:	3b01      	subs	r3, #1
 800166c:	041b      	lsls	r3, r3, #16
 800166e:	493f      	ldr	r1, [pc, #252]	; (800176c <HAL_DFSDM_ChannelInit+0x17c>)
 8001670:	4313      	orrs	r3, r2
 8001672:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8001674:	4b3d      	ldr	r3, [pc, #244]	; (800176c <HAL_DFSDM_ChannelInit+0x17c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a3c      	ldr	r2, [pc, #240]	; (800176c <HAL_DFSDM_ChannelInit+0x17c>)
 800167a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800167e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 800168e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6819      	ldr	r1, [r3, #0]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800169e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80016a4:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	430a      	orrs	r2, r1
 80016ac:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f022 020f 	bic.w	r2, r2, #15
 80016bc:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6819      	ldr	r1, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80016cc:	431a      	orrs	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	430a      	orrs	r2, r1
 80016d4:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80016e4:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6899      	ldr	r1, [r3, #8]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016f4:	3b01      	subs	r3, #1
 80016f6:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80016f8:	431a      	orrs	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	430a      	orrs	r2, r1
 8001700:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	685a      	ldr	r2, [r3, #4]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f002 0207 	and.w	r2, r2, #7
 8001710:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	6859      	ldr	r1, [r3, #4]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171c:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001724:	431a      	orrs	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	430a      	orrs	r2, r1
 800172c:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800173c:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2201      	movs	r2, #1
 8001742:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f000 f810 	bl	8001770 <DFSDM_GetChannelFromInstance>
 8001750:	4602      	mov	r2, r0
 8001752:	4904      	ldr	r1, [pc, #16]	; (8001764 <HAL_DFSDM_ChannelInit+0x174>)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20000784 	.word	0x20000784
 8001768:	20000780 	.word	0x20000780
 800176c:	40016000 	.word	0x40016000

08001770 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	4a1c      	ldr	r2, [pc, #112]	; (80017ec <DFSDM_GetChannelFromInstance+0x7c>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d102      	bne.n	8001786 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001780:	2300      	movs	r3, #0
 8001782:	60fb      	str	r3, [r7, #12]
 8001784:	e02b      	b.n	80017de <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a19      	ldr	r2, [pc, #100]	; (80017f0 <DFSDM_GetChannelFromInstance+0x80>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d102      	bne.n	8001794 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800178e:	2301      	movs	r3, #1
 8001790:	60fb      	str	r3, [r7, #12]
 8001792:	e024      	b.n	80017de <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	4a17      	ldr	r2, [pc, #92]	; (80017f4 <DFSDM_GetChannelFromInstance+0x84>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d102      	bne.n	80017a2 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800179c:	2302      	movs	r3, #2
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	e01d      	b.n	80017de <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a14      	ldr	r2, [pc, #80]	; (80017f8 <DFSDM_GetChannelFromInstance+0x88>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d102      	bne.n	80017b0 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80017aa:	2304      	movs	r3, #4
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	e016      	b.n	80017de <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	4a12      	ldr	r2, [pc, #72]	; (80017fc <DFSDM_GetChannelFromInstance+0x8c>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d102      	bne.n	80017be <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80017b8:	2305      	movs	r3, #5
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	e00f      	b.n	80017de <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4a0f      	ldr	r2, [pc, #60]	; (8001800 <DFSDM_GetChannelFromInstance+0x90>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d102      	bne.n	80017cc <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80017c6:	2306      	movs	r3, #6
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	e008      	b.n	80017de <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	4a0d      	ldr	r2, [pc, #52]	; (8001804 <DFSDM_GetChannelFromInstance+0x94>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d102      	bne.n	80017da <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80017d4:	2307      	movs	r3, #7
 80017d6:	60fb      	str	r3, [r7, #12]
 80017d8:	e001      	b.n	80017de <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80017da:	2303      	movs	r3, #3
 80017dc:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80017de:	68fb      	ldr	r3, [r7, #12]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	40016000 	.word	0x40016000
 80017f0:	40016020 	.word	0x40016020
 80017f4:	40016040 	.word	0x40016040
 80017f8:	40016080 	.word	0x40016080
 80017fc:	400160a0 	.word	0x400160a0
 8001800:	400160c0 	.word	0x400160c0
 8001804:	400160e0 	.word	0x400160e0

08001808 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001808:	b480      	push	{r7}
 800180a:	b087      	sub	sp, #28
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001816:	e17f      	b.n	8001b18 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	2101      	movs	r1, #1
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	fa01 f303 	lsl.w	r3, r1, r3
 8001824:	4013      	ands	r3, r2
 8001826:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	2b00      	cmp	r3, #0
 800182c:	f000 8171 	beq.w	8001b12 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	f003 0303 	and.w	r3, r3, #3
 8001838:	2b01      	cmp	r3, #1
 800183a:	d005      	beq.n	8001848 <HAL_GPIO_Init+0x40>
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f003 0303 	and.w	r3, r3, #3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d130      	bne.n	80018aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	2203      	movs	r2, #3
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	4013      	ands	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	68da      	ldr	r2, [r3, #12]
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	4313      	orrs	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800187e:	2201      	movs	r2, #1
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	fa02 f303 	lsl.w	r3, r2, r3
 8001886:	43db      	mvns	r3, r3
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	4013      	ands	r3, r2
 800188c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	091b      	lsrs	r3, r3, #4
 8001894:	f003 0201 	and.w	r2, r3, #1
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	693a      	ldr	r2, [r7, #16]
 80018a8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f003 0303 	and.w	r3, r3, #3
 80018b2:	2b03      	cmp	r3, #3
 80018b4:	d118      	bne.n	80018e8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80018bc:	2201      	movs	r2, #1
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	43db      	mvns	r3, r3
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	4013      	ands	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	08db      	lsrs	r3, r3, #3
 80018d2:	f003 0201 	and.w	r2, r3, #1
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	4313      	orrs	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f003 0303 	and.w	r3, r3, #3
 80018f0:	2b03      	cmp	r3, #3
 80018f2:	d017      	beq.n	8001924 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	68db      	ldr	r3, [r3, #12]
 80018f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	2203      	movs	r2, #3
 8001900:	fa02 f303 	lsl.w	r3, r2, r3
 8001904:	43db      	mvns	r3, r3
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	4013      	ands	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	4313      	orrs	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f003 0303 	and.w	r3, r3, #3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d123      	bne.n	8001978 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	08da      	lsrs	r2, r3, #3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3208      	adds	r2, #8
 8001938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800193c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	220f      	movs	r2, #15
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	43db      	mvns	r3, r3
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	4013      	ands	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	691a      	ldr	r2, [r3, #16]
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	f003 0307 	and.w	r3, r3, #7
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	693a      	ldr	r2, [r7, #16]
 8001966:	4313      	orrs	r3, r2
 8001968:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	08da      	lsrs	r2, r3, #3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	3208      	adds	r2, #8
 8001972:	6939      	ldr	r1, [r7, #16]
 8001974:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	2203      	movs	r2, #3
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	4013      	ands	r3, r2
 800198e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 0203 	and.w	r2, r3, #3
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	005b      	lsls	r3, r3, #1
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f000 80ac 	beq.w	8001b12 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ba:	4b5f      	ldr	r3, [pc, #380]	; (8001b38 <HAL_GPIO_Init+0x330>)
 80019bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019be:	4a5e      	ldr	r2, [pc, #376]	; (8001b38 <HAL_GPIO_Init+0x330>)
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	6613      	str	r3, [r2, #96]	; 0x60
 80019c6:	4b5c      	ldr	r3, [pc, #368]	; (8001b38 <HAL_GPIO_Init+0x330>)
 80019c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	60bb      	str	r3, [r7, #8]
 80019d0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019d2:	4a5a      	ldr	r2, [pc, #360]	; (8001b3c <HAL_GPIO_Init+0x334>)
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	089b      	lsrs	r3, r3, #2
 80019d8:	3302      	adds	r3, #2
 80019da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019de:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	f003 0303 	and.w	r3, r3, #3
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	220f      	movs	r2, #15
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43db      	mvns	r3, r3
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	4013      	ands	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019fc:	d025      	beq.n	8001a4a <HAL_GPIO_Init+0x242>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a4f      	ldr	r2, [pc, #316]	; (8001b40 <HAL_GPIO_Init+0x338>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d01f      	beq.n	8001a46 <HAL_GPIO_Init+0x23e>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a4e      	ldr	r2, [pc, #312]	; (8001b44 <HAL_GPIO_Init+0x33c>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d019      	beq.n	8001a42 <HAL_GPIO_Init+0x23a>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a4d      	ldr	r2, [pc, #308]	; (8001b48 <HAL_GPIO_Init+0x340>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d013      	beq.n	8001a3e <HAL_GPIO_Init+0x236>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a4c      	ldr	r2, [pc, #304]	; (8001b4c <HAL_GPIO_Init+0x344>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d00d      	beq.n	8001a3a <HAL_GPIO_Init+0x232>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a4b      	ldr	r2, [pc, #300]	; (8001b50 <HAL_GPIO_Init+0x348>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d007      	beq.n	8001a36 <HAL_GPIO_Init+0x22e>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a4a      	ldr	r2, [pc, #296]	; (8001b54 <HAL_GPIO_Init+0x34c>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d101      	bne.n	8001a32 <HAL_GPIO_Init+0x22a>
 8001a2e:	2306      	movs	r3, #6
 8001a30:	e00c      	b.n	8001a4c <HAL_GPIO_Init+0x244>
 8001a32:	2307      	movs	r3, #7
 8001a34:	e00a      	b.n	8001a4c <HAL_GPIO_Init+0x244>
 8001a36:	2305      	movs	r3, #5
 8001a38:	e008      	b.n	8001a4c <HAL_GPIO_Init+0x244>
 8001a3a:	2304      	movs	r3, #4
 8001a3c:	e006      	b.n	8001a4c <HAL_GPIO_Init+0x244>
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e004      	b.n	8001a4c <HAL_GPIO_Init+0x244>
 8001a42:	2302      	movs	r3, #2
 8001a44:	e002      	b.n	8001a4c <HAL_GPIO_Init+0x244>
 8001a46:	2301      	movs	r3, #1
 8001a48:	e000      	b.n	8001a4c <HAL_GPIO_Init+0x244>
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	697a      	ldr	r2, [r7, #20]
 8001a4e:	f002 0203 	and.w	r2, r2, #3
 8001a52:	0092      	lsls	r2, r2, #2
 8001a54:	4093      	lsls	r3, r2
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a5c:	4937      	ldr	r1, [pc, #220]	; (8001b3c <HAL_GPIO_Init+0x334>)
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	089b      	lsrs	r3, r3, #2
 8001a62:	3302      	adds	r3, #2
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a6a:	4b3b      	ldr	r3, [pc, #236]	; (8001b58 <HAL_GPIO_Init+0x350>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	43db      	mvns	r3, r3
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	4013      	ands	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d003      	beq.n	8001a8e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a8e:	4a32      	ldr	r2, [pc, #200]	; (8001b58 <HAL_GPIO_Init+0x350>)
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a94:	4b30      	ldr	r3, [pc, #192]	; (8001b58 <HAL_GPIO_Init+0x350>)
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d003      	beq.n	8001ab8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ab8:	4a27      	ldr	r2, [pc, #156]	; (8001b58 <HAL_GPIO_Init+0x350>)
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001abe:	4b26      	ldr	r3, [pc, #152]	; (8001b58 <HAL_GPIO_Init+0x350>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	4013      	ands	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d003      	beq.n	8001ae2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ae2:	4a1d      	ldr	r2, [pc, #116]	; (8001b58 <HAL_GPIO_Init+0x350>)
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ae8:	4b1b      	ldr	r3, [pc, #108]	; (8001b58 <HAL_GPIO_Init+0x350>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	43db      	mvns	r3, r3
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	4013      	ands	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d003      	beq.n	8001b0c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b0c:	4a12      	ldr	r2, [pc, #72]	; (8001b58 <HAL_GPIO_Init+0x350>)
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	3301      	adds	r3, #1
 8001b16:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f47f ae78 	bne.w	8001818 <HAL_GPIO_Init+0x10>
  }
}
 8001b28:	bf00      	nop
 8001b2a:	bf00      	nop
 8001b2c:	371c      	adds	r7, #28
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	40010000 	.word	0x40010000
 8001b40:	48000400 	.word	0x48000400
 8001b44:	48000800 	.word	0x48000800
 8001b48:	48000c00 	.word	0x48000c00
 8001b4c:	48001000 	.word	0x48001000
 8001b50:	48001400 	.word	0x48001400
 8001b54:	48001800 	.word	0x48001800
 8001b58:	40010400 	.word	0x40010400

08001b5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	460b      	mov	r3, r1
 8001b66:	807b      	strh	r3, [r7, #2]
 8001b68:	4613      	mov	r3, r2
 8001b6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b6c:	787b      	ldrb	r3, [r7, #1]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d003      	beq.n	8001b7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b72:	887a      	ldrh	r2, [r7, #2]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b78:	e002      	b.n	8001b80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b7a:	887a      	ldrh	r2, [r7, #2]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	460b      	mov	r3, r1
 8001b96:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	695b      	ldr	r3, [r3, #20]
 8001b9c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b9e:	887a      	ldrh	r2, [r7, #2]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	041a      	lsls	r2, r3, #16
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	43d9      	mvns	r1, r3
 8001baa:	887b      	ldrh	r3, [r7, #2]
 8001bac:	400b      	ands	r3, r1
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	619a      	str	r2, [r3, #24]
}
 8001bb4:	bf00      	nop
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001bca:	4b08      	ldr	r3, [pc, #32]	; (8001bec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bcc:	695a      	ldr	r2, [r3, #20]
 8001bce:	88fb      	ldrh	r3, [r7, #6]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d006      	beq.n	8001be4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bd6:	4a05      	ldr	r2, [pc, #20]	; (8001bec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bd8:	88fb      	ldrh	r3, [r7, #6]
 8001bda:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bdc:	88fb      	ldrh	r3, [r7, #6]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f000 f806 	bl	8001bf0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001be4:	bf00      	nop
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	40010400 	.word	0x40010400

08001bf0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b082      	sub	sp, #8
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d101      	bne.n	8001c18 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e08d      	b.n	8001d34 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d106      	bne.n	8001c32 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2200      	movs	r2, #0
 8001c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f7ff f87f 	bl	8000d30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2224      	movs	r2, #36	; 0x24
 8001c36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f022 0201 	bic.w	r2, r2, #1
 8001c48:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685a      	ldr	r2, [r3, #4]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c56:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	689a      	ldr	r2, [r3, #8]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c66:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d107      	bne.n	8001c80 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c7c:	609a      	str	r2, [r3, #8]
 8001c7e:	e006      	b.n	8001c8e <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001c8c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d108      	bne.n	8001ca8 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	e007      	b.n	8001cb8 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	685a      	ldr	r2, [r3, #4]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cb6:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	6812      	ldr	r2, [r2, #0]
 8001cc2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cca:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68da      	ldr	r2, [r3, #12]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cda:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	691a      	ldr	r2, [r3, #16]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	695b      	ldr	r3, [r3, #20]
 8001ce4:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	699b      	ldr	r3, [r3, #24]
 8001cec:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	69d9      	ldr	r1, [r3, #28]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a1a      	ldr	r2, [r3, #32]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	430a      	orrs	r2, r1
 8001d04:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f042 0201 	orr.w	r2, r2, #1
 8001d14:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2220      	movs	r2, #32
 8001d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3708      	adds	r7, #8
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	2b20      	cmp	r3, #32
 8001d50:	d138      	bne.n	8001dc4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d101      	bne.n	8001d60 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	e032      	b.n	8001dc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2224      	movs	r2, #36	; 0x24
 8001d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f022 0201 	bic.w	r2, r2, #1
 8001d7e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d8e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	6819      	ldr	r1, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	430a      	orrs	r2, r1
 8001d9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f042 0201 	orr.w	r2, r2, #1
 8001dae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2220      	movs	r2, #32
 8001db4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	e000      	b.n	8001dc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001dc4:	2302      	movs	r3, #2
  }
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b085      	sub	sp, #20
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
 8001dda:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001de2:	b2db      	uxtb	r3, r3
 8001de4:	2b20      	cmp	r3, #32
 8001de6:	d139      	bne.n	8001e5c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d101      	bne.n	8001df6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001df2:	2302      	movs	r3, #2
 8001df4:	e033      	b.n	8001e5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2224      	movs	r2, #36	; 0x24
 8001e02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f022 0201 	bic.w	r2, r2, #1
 8001e14:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e24:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	021b      	lsls	r3, r3, #8
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f042 0201 	orr.w	r2, r2, #1
 8001e46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2220      	movs	r2, #32
 8001e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	e000      	b.n	8001e5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001e5c:	2302      	movs	r3, #2
  }
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3714      	adds	r7, #20
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr

08001e6a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e6c:	b08f      	sub	sp, #60	; 0x3c
 8001e6e:	af0a      	add	r7, sp, #40	; 0x28
 8001e70:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d101      	bne.n	8001e7c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e116      	b.n	80020aa <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d106      	bne.n	8001e9c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7ff f8d4 	bl	8001044 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2203      	movs	r2, #3
 8001ea0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d102      	bne.n	8001eb6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f002 fb15 	bl	80044ea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	603b      	str	r3, [r7, #0]
 8001ec6:	687e      	ldr	r6, [r7, #4]
 8001ec8:	466d      	mov	r5, sp
 8001eca:	f106 0410 	add.w	r4, r6, #16
 8001ece:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ed0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ed2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ed4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ed6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001eda:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ede:	1d33      	adds	r3, r6, #4
 8001ee0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ee2:	6838      	ldr	r0, [r7, #0]
 8001ee4:	f002 fad5 	bl	8004492 <USB_CoreInit>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d005      	beq.n	8001efa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2202      	movs	r2, #2
 8001ef2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e0d7      	b.n	80020aa <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2100      	movs	r1, #0
 8001f00:	4618      	mov	r0, r3
 8001f02:	f002 fb03 	bl	800450c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f06:	2300      	movs	r3, #0
 8001f08:	73fb      	strb	r3, [r7, #15]
 8001f0a:	e04a      	b.n	8001fa2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f0c:	7bfa      	ldrb	r2, [r7, #15]
 8001f0e:	6879      	ldr	r1, [r7, #4]
 8001f10:	4613      	mov	r3, r2
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	4413      	add	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	440b      	add	r3, r1
 8001f1a:	333d      	adds	r3, #61	; 0x3d
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f20:	7bfa      	ldrb	r2, [r7, #15]
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	4613      	mov	r3, r2
 8001f26:	00db      	lsls	r3, r3, #3
 8001f28:	4413      	add	r3, r2
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	440b      	add	r3, r1
 8001f2e:	333c      	adds	r3, #60	; 0x3c
 8001f30:	7bfa      	ldrb	r2, [r7, #15]
 8001f32:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f34:	7bfa      	ldrb	r2, [r7, #15]
 8001f36:	7bfb      	ldrb	r3, [r7, #15]
 8001f38:	b298      	uxth	r0, r3
 8001f3a:	6879      	ldr	r1, [r7, #4]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	4413      	add	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	440b      	add	r3, r1
 8001f46:	3356      	adds	r3, #86	; 0x56
 8001f48:	4602      	mov	r2, r0
 8001f4a:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f4c:	7bfa      	ldrb	r2, [r7, #15]
 8001f4e:	6879      	ldr	r1, [r7, #4]
 8001f50:	4613      	mov	r3, r2
 8001f52:	00db      	lsls	r3, r3, #3
 8001f54:	4413      	add	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	440b      	add	r3, r1
 8001f5a:	3340      	adds	r3, #64	; 0x40
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f60:	7bfa      	ldrb	r2, [r7, #15]
 8001f62:	6879      	ldr	r1, [r7, #4]
 8001f64:	4613      	mov	r3, r2
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	4413      	add	r3, r2
 8001f6a:	009b      	lsls	r3, r3, #2
 8001f6c:	440b      	add	r3, r1
 8001f6e:	3344      	adds	r3, #68	; 0x44
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f74:	7bfa      	ldrb	r2, [r7, #15]
 8001f76:	6879      	ldr	r1, [r7, #4]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	4413      	add	r3, r2
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	440b      	add	r3, r1
 8001f82:	3348      	adds	r3, #72	; 0x48
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f88:	7bfa      	ldrb	r2, [r7, #15]
 8001f8a:	6879      	ldr	r1, [r7, #4]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	4413      	add	r3, r2
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	440b      	add	r3, r1
 8001f96:	334c      	adds	r3, #76	; 0x4c
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f9c:	7bfb      	ldrb	r3, [r7, #15]
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	73fb      	strb	r3, [r7, #15]
 8001fa2:	7bfa      	ldrb	r2, [r7, #15]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d3af      	bcc.n	8001f0c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fac:	2300      	movs	r3, #0
 8001fae:	73fb      	strb	r3, [r7, #15]
 8001fb0:	e044      	b.n	800203c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001fb2:	7bfa      	ldrb	r2, [r7, #15]
 8001fb4:	6879      	ldr	r1, [r7, #4]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	00db      	lsls	r3, r3, #3
 8001fba:	4413      	add	r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	440b      	add	r3, r1
 8001fc0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001fc8:	7bfa      	ldrb	r2, [r7, #15]
 8001fca:	6879      	ldr	r1, [r7, #4]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	4413      	add	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	440b      	add	r3, r1
 8001fd6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001fda:	7bfa      	ldrb	r2, [r7, #15]
 8001fdc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001fde:	7bfa      	ldrb	r2, [r7, #15]
 8001fe0:	6879      	ldr	r1, [r7, #4]
 8001fe2:	4613      	mov	r3, r2
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	4413      	add	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	440b      	add	r3, r1
 8001fec:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ff4:	7bfa      	ldrb	r2, [r7, #15]
 8001ff6:	6879      	ldr	r1, [r7, #4]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	4413      	add	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	440b      	add	r3, r1
 8002002:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800200a:	7bfa      	ldrb	r2, [r7, #15]
 800200c:	6879      	ldr	r1, [r7, #4]
 800200e:	4613      	mov	r3, r2
 8002010:	00db      	lsls	r3, r3, #3
 8002012:	4413      	add	r3, r2
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	440b      	add	r3, r1
 8002018:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002020:	7bfa      	ldrb	r2, [r7, #15]
 8002022:	6879      	ldr	r1, [r7, #4]
 8002024:	4613      	mov	r3, r2
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	4413      	add	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	440b      	add	r3, r1
 800202e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002032:	2200      	movs	r2, #0
 8002034:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002036:	7bfb      	ldrb	r3, [r7, #15]
 8002038:	3301      	adds	r3, #1
 800203a:	73fb      	strb	r3, [r7, #15]
 800203c:	7bfa      	ldrb	r2, [r7, #15]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	429a      	cmp	r2, r3
 8002044:	d3b5      	bcc.n	8001fb2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	603b      	str	r3, [r7, #0]
 800204c:	687e      	ldr	r6, [r7, #4]
 800204e:	466d      	mov	r5, sp
 8002050:	f106 0410 	add.w	r4, r6, #16
 8002054:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002056:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002058:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800205a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800205c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002060:	e885 0003 	stmia.w	r5, {r0, r1}
 8002064:	1d33      	adds	r3, r6, #4
 8002066:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002068:	6838      	ldr	r0, [r7, #0]
 800206a:	f002 fa9b 	bl	80045a4 <USB_DevInit>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d005      	beq.n	8002080 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2202      	movs	r2, #2
 8002078:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e014      	b.n	80020aa <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2201      	movs	r2, #1
 800208c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002094:	2b01      	cmp	r3, #1
 8002096:	d102      	bne.n	800209e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f000 f80a 	bl	80020b2 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f002 fc3d 	bl	8004922 <USB_DevDisconnect>

  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3714      	adds	r7, #20
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020b2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b085      	sub	sp, #20
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020e4:	f043 0303 	orr.w	r3, r3, #3
 80020e8:	68fa      	ldr	r2, [r7, #12]
 80020ea:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3714      	adds	r7, #20
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
	...

080020fc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002100:	4b05      	ldr	r3, [pc, #20]	; (8002118 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a04      	ldr	r2, [pc, #16]	; (8002118 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800210a:	6013      	str	r3, [r2, #0]
}
 800210c:	bf00      	nop
 800210e:	46bd      	mov	sp, r7
 8002110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002114:	4770      	bx	lr
 8002116:	bf00      	nop
 8002118:	40007000 	.word	0x40007000

0800211c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002120:	4b04      	ldr	r3, [pc, #16]	; (8002134 <HAL_PWREx_GetVoltageRange+0x18>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002128:	4618      	mov	r0, r3
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr
 8002132:	bf00      	nop
 8002134:	40007000 	.word	0x40007000

08002138 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002138:	b480      	push	{r7}
 800213a:	b085      	sub	sp, #20
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002146:	d130      	bne.n	80021aa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002148:	4b23      	ldr	r3, [pc, #140]	; (80021d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002150:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002154:	d038      	beq.n	80021c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002156:	4b20      	ldr	r3, [pc, #128]	; (80021d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800215e:	4a1e      	ldr	r2, [pc, #120]	; (80021d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002160:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002164:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002166:	4b1d      	ldr	r3, [pc, #116]	; (80021dc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2232      	movs	r2, #50	; 0x32
 800216c:	fb02 f303 	mul.w	r3, r2, r3
 8002170:	4a1b      	ldr	r2, [pc, #108]	; (80021e0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002172:	fba2 2303 	umull	r2, r3, r2, r3
 8002176:	0c9b      	lsrs	r3, r3, #18
 8002178:	3301      	adds	r3, #1
 800217a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800217c:	e002      	b.n	8002184 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	3b01      	subs	r3, #1
 8002182:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002184:	4b14      	ldr	r3, [pc, #80]	; (80021d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002186:	695b      	ldr	r3, [r3, #20]
 8002188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800218c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002190:	d102      	bne.n	8002198 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1f2      	bne.n	800217e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002198:	4b0f      	ldr	r3, [pc, #60]	; (80021d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800219a:	695b      	ldr	r3, [r3, #20]
 800219c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021a4:	d110      	bne.n	80021c8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e00f      	b.n	80021ca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80021aa:	4b0b      	ldr	r3, [pc, #44]	; (80021d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021b6:	d007      	beq.n	80021c8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021b8:	4b07      	ldr	r3, [pc, #28]	; (80021d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021c0:	4a05      	ldr	r2, [pc, #20]	; (80021d8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021c6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
 80021d6:	bf00      	nop
 80021d8:	40007000 	.word	0x40007000
 80021dc:	20000000 	.word	0x20000000
 80021e0:	431bde83 	.word	0x431bde83

080021e4 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80021e8:	4b05      	ldr	r3, [pc, #20]	; (8002200 <HAL_PWREx_EnableVddUSB+0x1c>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	4a04      	ldr	r2, [pc, #16]	; (8002200 <HAL_PWREx_EnableVddUSB+0x1c>)
 80021ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021f2:	6053      	str	r3, [r2, #4]
}
 80021f4:	bf00      	nop
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	40007000 	.word	0x40007000

08002204 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af02      	add	r7, sp, #8
 800220a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800220c:	f7ff f8ae 	bl	800136c <HAL_GetTick>
 8002210:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e063      	b.n	80022e4 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002222:	b2db      	uxtb	r3, r3
 8002224:	2b00      	cmp	r3, #0
 8002226:	d10b      	bne.n	8002240 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f7fe fddb 	bl	8000dec <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8002236:	f241 3188 	movw	r1, #5000	; 0x1388
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f000 f858 	bl	80022f0 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	3b01      	subs	r3, #1
 8002250:	021a      	lsls	r2, r3, #8
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	430a      	orrs	r2, r1
 8002258:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2200      	movs	r2, #0
 8002264:	2120      	movs	r1, #32
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f000 f850 	bl	800230c <QSPI_WaitFlagStateUntilTimeout>
 800226c:	4603      	mov	r3, r0
 800226e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002270:	7afb      	ldrb	r3, [r7, #11]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d131      	bne.n	80022da <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002280:	f023 0310 	bic.w	r3, r3, #16
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	6852      	ldr	r2, [r2, #4]
 8002288:	0611      	lsls	r1, r2, #24
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	68d2      	ldr	r2, [r2, #12]
 800228e:	4311      	orrs	r1, r2
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	6812      	ldr	r2, [r2, #0]
 8002294:	430b      	orrs	r3, r1
 8002296:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	4b13      	ldr	r3, [pc, #76]	; (80022ec <HAL_QSPI_Init+0xe8>)
 80022a0:	4013      	ands	r3, r2
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	6912      	ldr	r2, [r2, #16]
 80022a6:	0411      	lsls	r1, r2, #16
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	6952      	ldr	r2, [r2, #20]
 80022ac:	4311      	orrs	r1, r2
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6992      	ldr	r2, [r2, #24]
 80022b2:	4311      	orrs	r1, r2
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	6812      	ldr	r2, [r2, #0]
 80022b8:	430b      	orrs	r3, r1
 80022ba:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f042 0201 	orr.w	r2, r2, #1
 80022ca:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	2201      	movs	r2, #1
 80022d6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80022e2:	7afb      	ldrb	r3, [r7, #11]
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	ffe0f8fe 	.word	0xffe0f8fe

080022f0 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002300:	bf00      	nop
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	603b      	str	r3, [r7, #0]
 8002318:	4613      	mov	r3, r2
 800231a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800231c:	e01a      	b.n	8002354 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002324:	d016      	beq.n	8002354 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002326:	f7ff f821 	bl	800136c <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	429a      	cmp	r2, r3
 8002334:	d302      	bcc.n	800233c <QSPI_WaitFlagStateUntilTimeout+0x30>
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d10b      	bne.n	8002354 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2204      	movs	r2, #4
 8002340:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002348:	f043 0201 	orr.w	r2, r3, #1
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e00e      	b.n	8002372 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	689a      	ldr	r2, [r3, #8]
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	4013      	ands	r3, r2
 800235e:	2b00      	cmp	r3, #0
 8002360:	bf14      	ite	ne
 8002362:	2301      	movne	r3, #1
 8002364:	2300      	moveq	r3, #0
 8002366:	b2db      	uxtb	r3, r3
 8002368:	461a      	mov	r2, r3
 800236a:	79fb      	ldrb	r3, [r7, #7]
 800236c:	429a      	cmp	r2, r3
 800236e:	d1d6      	bne.n	800231e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002370:	2300      	movs	r3, #0
}
 8002372:	4618      	mov	r0, r3
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
	...

0800237c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b088      	sub	sp, #32
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e3ca      	b.n	8002b24 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800238e:	4b97      	ldr	r3, [pc, #604]	; (80025ec <HAL_RCC_OscConfig+0x270>)
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	f003 030c 	and.w	r3, r3, #12
 8002396:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002398:	4b94      	ldr	r3, [pc, #592]	; (80025ec <HAL_RCC_OscConfig+0x270>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	f003 0303 	and.w	r3, r3, #3
 80023a0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0310 	and.w	r3, r3, #16
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	f000 80e4 	beq.w	8002578 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d007      	beq.n	80023c6 <HAL_RCC_OscConfig+0x4a>
 80023b6:	69bb      	ldr	r3, [r7, #24]
 80023b8:	2b0c      	cmp	r3, #12
 80023ba:	f040 808b 	bne.w	80024d4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	f040 8087 	bne.w	80024d4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023c6:	4b89      	ldr	r3, [pc, #548]	; (80025ec <HAL_RCC_OscConfig+0x270>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d005      	beq.n	80023de <HAL_RCC_OscConfig+0x62>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e3a2      	b.n	8002b24 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a1a      	ldr	r2, [r3, #32]
 80023e2:	4b82      	ldr	r3, [pc, #520]	; (80025ec <HAL_RCC_OscConfig+0x270>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0308 	and.w	r3, r3, #8
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d004      	beq.n	80023f8 <HAL_RCC_OscConfig+0x7c>
 80023ee:	4b7f      	ldr	r3, [pc, #508]	; (80025ec <HAL_RCC_OscConfig+0x270>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023f6:	e005      	b.n	8002404 <HAL_RCC_OscConfig+0x88>
 80023f8:	4b7c      	ldr	r3, [pc, #496]	; (80025ec <HAL_RCC_OscConfig+0x270>)
 80023fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023fe:	091b      	lsrs	r3, r3, #4
 8002400:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002404:	4293      	cmp	r3, r2
 8002406:	d223      	bcs.n	8002450 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	4618      	mov	r0, r3
 800240e:	f000 fd55 	bl	8002ebc <RCC_SetFlashLatencyFromMSIRange>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d001      	beq.n	800241c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e383      	b.n	8002b24 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800241c:	4b73      	ldr	r3, [pc, #460]	; (80025ec <HAL_RCC_OscConfig+0x270>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a72      	ldr	r2, [pc, #456]	; (80025ec <HAL_RCC_OscConfig+0x270>)
 8002422:	f043 0308 	orr.w	r3, r3, #8
 8002426:	6013      	str	r3, [r2, #0]
 8002428:	4b70      	ldr	r3, [pc, #448]	; (80025ec <HAL_RCC_OscConfig+0x270>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	496d      	ldr	r1, [pc, #436]	; (80025ec <HAL_RCC_OscConfig+0x270>)
 8002436:	4313      	orrs	r3, r2
 8002438:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800243a:	4b6c      	ldr	r3, [pc, #432]	; (80025ec <HAL_RCC_OscConfig+0x270>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	021b      	lsls	r3, r3, #8
 8002448:	4968      	ldr	r1, [pc, #416]	; (80025ec <HAL_RCC_OscConfig+0x270>)
 800244a:	4313      	orrs	r3, r2
 800244c:	604b      	str	r3, [r1, #4]
 800244e:	e025      	b.n	800249c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002450:	4b66      	ldr	r3, [pc, #408]	; (80025ec <HAL_RCC_OscConfig+0x270>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a65      	ldr	r2, [pc, #404]	; (80025ec <HAL_RCC_OscConfig+0x270>)
 8002456:	f043 0308 	orr.w	r3, r3, #8
 800245a:	6013      	str	r3, [r2, #0]
 800245c:	4b63      	ldr	r3, [pc, #396]	; (80025ec <HAL_RCC_OscConfig+0x270>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a1b      	ldr	r3, [r3, #32]
 8002468:	4960      	ldr	r1, [pc, #384]	; (80025ec <HAL_RCC_OscConfig+0x270>)
 800246a:	4313      	orrs	r3, r2
 800246c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800246e:	4b5f      	ldr	r3, [pc, #380]	; (80025ec <HAL_RCC_OscConfig+0x270>)
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	69db      	ldr	r3, [r3, #28]
 800247a:	021b      	lsls	r3, r3, #8
 800247c:	495b      	ldr	r1, [pc, #364]	; (80025ec <HAL_RCC_OscConfig+0x270>)
 800247e:	4313      	orrs	r3, r2
 8002480:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002482:	69bb      	ldr	r3, [r7, #24]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d109      	bne.n	800249c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	4618      	mov	r0, r3
 800248e:	f000 fd15 	bl	8002ebc <RCC_SetFlashLatencyFromMSIRange>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e343      	b.n	8002b24 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800249c:	f000 fc4a 	bl	8002d34 <HAL_RCC_GetSysClockFreq>
 80024a0:	4602      	mov	r2, r0
 80024a2:	4b52      	ldr	r3, [pc, #328]	; (80025ec <HAL_RCC_OscConfig+0x270>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	091b      	lsrs	r3, r3, #4
 80024a8:	f003 030f 	and.w	r3, r3, #15
 80024ac:	4950      	ldr	r1, [pc, #320]	; (80025f0 <HAL_RCC_OscConfig+0x274>)
 80024ae:	5ccb      	ldrb	r3, [r1, r3]
 80024b0:	f003 031f 	and.w	r3, r3, #31
 80024b4:	fa22 f303 	lsr.w	r3, r2, r3
 80024b8:	4a4e      	ldr	r2, [pc, #312]	; (80025f4 <HAL_RCC_OscConfig+0x278>)
 80024ba:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80024bc:	4b4e      	ldr	r3, [pc, #312]	; (80025f8 <HAL_RCC_OscConfig+0x27c>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7fe ff03 	bl	80012cc <HAL_InitTick>
 80024c6:	4603      	mov	r3, r0
 80024c8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d052      	beq.n	8002576 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80024d0:	7bfb      	ldrb	r3, [r7, #15]
 80024d2:	e327      	b.n	8002b24 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	699b      	ldr	r3, [r3, #24]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d032      	beq.n	8002542 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80024dc:	4b43      	ldr	r3, [pc, #268]	; (80025ec <HAL_RCC_OscConfig+0x270>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a42      	ldr	r2, [pc, #264]	; (80025ec <HAL_RCC_OscConfig+0x270>)
 80024e2:	f043 0301 	orr.w	r3, r3, #1
 80024e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80024e8:	f7fe ff40 	bl	800136c <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024f0:	f7fe ff3c 	bl	800136c <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e310      	b.n	8002b24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002502:	4b3a      	ldr	r3, [pc, #232]	; (80025ec <HAL_RCC_OscConfig+0x270>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d0f0      	beq.n	80024f0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800250e:	4b37      	ldr	r3, [pc, #220]	; (80025ec <HAL_RCC_OscConfig+0x270>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a36      	ldr	r2, [pc, #216]	; (80025ec <HAL_RCC_OscConfig+0x270>)
 8002514:	f043 0308 	orr.w	r3, r3, #8
 8002518:	6013      	str	r3, [r2, #0]
 800251a:	4b34      	ldr	r3, [pc, #208]	; (80025ec <HAL_RCC_OscConfig+0x270>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a1b      	ldr	r3, [r3, #32]
 8002526:	4931      	ldr	r1, [pc, #196]	; (80025ec <HAL_RCC_OscConfig+0x270>)
 8002528:	4313      	orrs	r3, r2
 800252a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800252c:	4b2f      	ldr	r3, [pc, #188]	; (80025ec <HAL_RCC_OscConfig+0x270>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	69db      	ldr	r3, [r3, #28]
 8002538:	021b      	lsls	r3, r3, #8
 800253a:	492c      	ldr	r1, [pc, #176]	; (80025ec <HAL_RCC_OscConfig+0x270>)
 800253c:	4313      	orrs	r3, r2
 800253e:	604b      	str	r3, [r1, #4]
 8002540:	e01a      	b.n	8002578 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002542:	4b2a      	ldr	r3, [pc, #168]	; (80025ec <HAL_RCC_OscConfig+0x270>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a29      	ldr	r2, [pc, #164]	; (80025ec <HAL_RCC_OscConfig+0x270>)
 8002548:	f023 0301 	bic.w	r3, r3, #1
 800254c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800254e:	f7fe ff0d 	bl	800136c <HAL_GetTick>
 8002552:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002554:	e008      	b.n	8002568 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002556:	f7fe ff09 	bl	800136c <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e2dd      	b.n	8002b24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002568:	4b20      	ldr	r3, [pc, #128]	; (80025ec <HAL_RCC_OscConfig+0x270>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0302 	and.w	r3, r3, #2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d1f0      	bne.n	8002556 <HAL_RCC_OscConfig+0x1da>
 8002574:	e000      	b.n	8002578 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002576:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0301 	and.w	r3, r3, #1
 8002580:	2b00      	cmp	r3, #0
 8002582:	d074      	beq.n	800266e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	2b08      	cmp	r3, #8
 8002588:	d005      	beq.n	8002596 <HAL_RCC_OscConfig+0x21a>
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	2b0c      	cmp	r3, #12
 800258e:	d10e      	bne.n	80025ae <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	2b03      	cmp	r3, #3
 8002594:	d10b      	bne.n	80025ae <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002596:	4b15      	ldr	r3, [pc, #84]	; (80025ec <HAL_RCC_OscConfig+0x270>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d064      	beq.n	800266c <HAL_RCC_OscConfig+0x2f0>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d160      	bne.n	800266c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e2ba      	b.n	8002b24 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025b6:	d106      	bne.n	80025c6 <HAL_RCC_OscConfig+0x24a>
 80025b8:	4b0c      	ldr	r3, [pc, #48]	; (80025ec <HAL_RCC_OscConfig+0x270>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a0b      	ldr	r2, [pc, #44]	; (80025ec <HAL_RCC_OscConfig+0x270>)
 80025be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c2:	6013      	str	r3, [r2, #0]
 80025c4:	e026      	b.n	8002614 <HAL_RCC_OscConfig+0x298>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025ce:	d115      	bne.n	80025fc <HAL_RCC_OscConfig+0x280>
 80025d0:	4b06      	ldr	r3, [pc, #24]	; (80025ec <HAL_RCC_OscConfig+0x270>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a05      	ldr	r2, [pc, #20]	; (80025ec <HAL_RCC_OscConfig+0x270>)
 80025d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025da:	6013      	str	r3, [r2, #0]
 80025dc:	4b03      	ldr	r3, [pc, #12]	; (80025ec <HAL_RCC_OscConfig+0x270>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a02      	ldr	r2, [pc, #8]	; (80025ec <HAL_RCC_OscConfig+0x270>)
 80025e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025e6:	6013      	str	r3, [r2, #0]
 80025e8:	e014      	b.n	8002614 <HAL_RCC_OscConfig+0x298>
 80025ea:	bf00      	nop
 80025ec:	40021000 	.word	0x40021000
 80025f0:	08004a58 	.word	0x08004a58
 80025f4:	20000000 	.word	0x20000000
 80025f8:	20000004 	.word	0x20000004
 80025fc:	4ba0      	ldr	r3, [pc, #640]	; (8002880 <HAL_RCC_OscConfig+0x504>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a9f      	ldr	r2, [pc, #636]	; (8002880 <HAL_RCC_OscConfig+0x504>)
 8002602:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002606:	6013      	str	r3, [r2, #0]
 8002608:	4b9d      	ldr	r3, [pc, #628]	; (8002880 <HAL_RCC_OscConfig+0x504>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a9c      	ldr	r2, [pc, #624]	; (8002880 <HAL_RCC_OscConfig+0x504>)
 800260e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002612:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d013      	beq.n	8002644 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261c:	f7fe fea6 	bl	800136c <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002624:	f7fe fea2 	bl	800136c <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b64      	cmp	r3, #100	; 0x64
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e276      	b.n	8002b24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002636:	4b92      	ldr	r3, [pc, #584]	; (8002880 <HAL_RCC_OscConfig+0x504>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d0f0      	beq.n	8002624 <HAL_RCC_OscConfig+0x2a8>
 8002642:	e014      	b.n	800266e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002644:	f7fe fe92 	bl	800136c <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800264c:	f7fe fe8e 	bl	800136c <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b64      	cmp	r3, #100	; 0x64
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e262      	b.n	8002b24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800265e:	4b88      	ldr	r3, [pc, #544]	; (8002880 <HAL_RCC_OscConfig+0x504>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1f0      	bne.n	800264c <HAL_RCC_OscConfig+0x2d0>
 800266a:	e000      	b.n	800266e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800266c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d060      	beq.n	800273c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800267a:	69bb      	ldr	r3, [r7, #24]
 800267c:	2b04      	cmp	r3, #4
 800267e:	d005      	beq.n	800268c <HAL_RCC_OscConfig+0x310>
 8002680:	69bb      	ldr	r3, [r7, #24]
 8002682:	2b0c      	cmp	r3, #12
 8002684:	d119      	bne.n	80026ba <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	2b02      	cmp	r3, #2
 800268a:	d116      	bne.n	80026ba <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800268c:	4b7c      	ldr	r3, [pc, #496]	; (8002880 <HAL_RCC_OscConfig+0x504>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002694:	2b00      	cmp	r3, #0
 8002696:	d005      	beq.n	80026a4 <HAL_RCC_OscConfig+0x328>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	68db      	ldr	r3, [r3, #12]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d101      	bne.n	80026a4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80026a0:	2301      	movs	r3, #1
 80026a2:	e23f      	b.n	8002b24 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a4:	4b76      	ldr	r3, [pc, #472]	; (8002880 <HAL_RCC_OscConfig+0x504>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	691b      	ldr	r3, [r3, #16]
 80026b0:	061b      	lsls	r3, r3, #24
 80026b2:	4973      	ldr	r1, [pc, #460]	; (8002880 <HAL_RCC_OscConfig+0x504>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026b8:	e040      	b.n	800273c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d023      	beq.n	800270a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026c2:	4b6f      	ldr	r3, [pc, #444]	; (8002880 <HAL_RCC_OscConfig+0x504>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a6e      	ldr	r2, [pc, #440]	; (8002880 <HAL_RCC_OscConfig+0x504>)
 80026c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ce:	f7fe fe4d 	bl	800136c <HAL_GetTick>
 80026d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026d4:	e008      	b.n	80026e8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026d6:	f7fe fe49 	bl	800136c <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e21d      	b.n	8002b24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026e8:	4b65      	ldr	r3, [pc, #404]	; (8002880 <HAL_RCC_OscConfig+0x504>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0f0      	beq.n	80026d6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f4:	4b62      	ldr	r3, [pc, #392]	; (8002880 <HAL_RCC_OscConfig+0x504>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	061b      	lsls	r3, r3, #24
 8002702:	495f      	ldr	r1, [pc, #380]	; (8002880 <HAL_RCC_OscConfig+0x504>)
 8002704:	4313      	orrs	r3, r2
 8002706:	604b      	str	r3, [r1, #4]
 8002708:	e018      	b.n	800273c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800270a:	4b5d      	ldr	r3, [pc, #372]	; (8002880 <HAL_RCC_OscConfig+0x504>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a5c      	ldr	r2, [pc, #368]	; (8002880 <HAL_RCC_OscConfig+0x504>)
 8002710:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002714:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002716:	f7fe fe29 	bl	800136c <HAL_GetTick>
 800271a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800271c:	e008      	b.n	8002730 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800271e:	f7fe fe25 	bl	800136c <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e1f9      	b.n	8002b24 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002730:	4b53      	ldr	r3, [pc, #332]	; (8002880 <HAL_RCC_OscConfig+0x504>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1f0      	bne.n	800271e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0308 	and.w	r3, r3, #8
 8002744:	2b00      	cmp	r3, #0
 8002746:	d03c      	beq.n	80027c2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d01c      	beq.n	800278a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002750:	4b4b      	ldr	r3, [pc, #300]	; (8002880 <HAL_RCC_OscConfig+0x504>)
 8002752:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002756:	4a4a      	ldr	r2, [pc, #296]	; (8002880 <HAL_RCC_OscConfig+0x504>)
 8002758:	f043 0301 	orr.w	r3, r3, #1
 800275c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002760:	f7fe fe04 	bl	800136c <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002768:	f7fe fe00 	bl	800136c <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e1d4      	b.n	8002b24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800277a:	4b41      	ldr	r3, [pc, #260]	; (8002880 <HAL_RCC_OscConfig+0x504>)
 800277c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d0ef      	beq.n	8002768 <HAL_RCC_OscConfig+0x3ec>
 8002788:	e01b      	b.n	80027c2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800278a:	4b3d      	ldr	r3, [pc, #244]	; (8002880 <HAL_RCC_OscConfig+0x504>)
 800278c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002790:	4a3b      	ldr	r2, [pc, #236]	; (8002880 <HAL_RCC_OscConfig+0x504>)
 8002792:	f023 0301 	bic.w	r3, r3, #1
 8002796:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800279a:	f7fe fde7 	bl	800136c <HAL_GetTick>
 800279e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027a0:	e008      	b.n	80027b4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027a2:	f7fe fde3 	bl	800136c <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e1b7      	b.n	8002b24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027b4:	4b32      	ldr	r3, [pc, #200]	; (8002880 <HAL_RCC_OscConfig+0x504>)
 80027b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d1ef      	bne.n	80027a2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0304 	and.w	r3, r3, #4
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	f000 80a6 	beq.w	800291c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027d0:	2300      	movs	r3, #0
 80027d2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80027d4:	4b2a      	ldr	r3, [pc, #168]	; (8002880 <HAL_RCC_OscConfig+0x504>)
 80027d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d10d      	bne.n	80027fc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027e0:	4b27      	ldr	r3, [pc, #156]	; (8002880 <HAL_RCC_OscConfig+0x504>)
 80027e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e4:	4a26      	ldr	r2, [pc, #152]	; (8002880 <HAL_RCC_OscConfig+0x504>)
 80027e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ea:	6593      	str	r3, [r2, #88]	; 0x58
 80027ec:	4b24      	ldr	r3, [pc, #144]	; (8002880 <HAL_RCC_OscConfig+0x504>)
 80027ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f4:	60bb      	str	r3, [r7, #8]
 80027f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027f8:	2301      	movs	r3, #1
 80027fa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027fc:	4b21      	ldr	r3, [pc, #132]	; (8002884 <HAL_RCC_OscConfig+0x508>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002804:	2b00      	cmp	r3, #0
 8002806:	d118      	bne.n	800283a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002808:	4b1e      	ldr	r3, [pc, #120]	; (8002884 <HAL_RCC_OscConfig+0x508>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a1d      	ldr	r2, [pc, #116]	; (8002884 <HAL_RCC_OscConfig+0x508>)
 800280e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002812:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002814:	f7fe fdaa 	bl	800136c <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800281c:	f7fe fda6 	bl	800136c <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e17a      	b.n	8002b24 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800282e:	4b15      	ldr	r3, [pc, #84]	; (8002884 <HAL_RCC_OscConfig+0x508>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002836:	2b00      	cmp	r3, #0
 8002838:	d0f0      	beq.n	800281c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d108      	bne.n	8002854 <HAL_RCC_OscConfig+0x4d8>
 8002842:	4b0f      	ldr	r3, [pc, #60]	; (8002880 <HAL_RCC_OscConfig+0x504>)
 8002844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002848:	4a0d      	ldr	r2, [pc, #52]	; (8002880 <HAL_RCC_OscConfig+0x504>)
 800284a:	f043 0301 	orr.w	r3, r3, #1
 800284e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002852:	e029      	b.n	80028a8 <HAL_RCC_OscConfig+0x52c>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	2b05      	cmp	r3, #5
 800285a:	d115      	bne.n	8002888 <HAL_RCC_OscConfig+0x50c>
 800285c:	4b08      	ldr	r3, [pc, #32]	; (8002880 <HAL_RCC_OscConfig+0x504>)
 800285e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002862:	4a07      	ldr	r2, [pc, #28]	; (8002880 <HAL_RCC_OscConfig+0x504>)
 8002864:	f043 0304 	orr.w	r3, r3, #4
 8002868:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800286c:	4b04      	ldr	r3, [pc, #16]	; (8002880 <HAL_RCC_OscConfig+0x504>)
 800286e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002872:	4a03      	ldr	r2, [pc, #12]	; (8002880 <HAL_RCC_OscConfig+0x504>)
 8002874:	f043 0301 	orr.w	r3, r3, #1
 8002878:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800287c:	e014      	b.n	80028a8 <HAL_RCC_OscConfig+0x52c>
 800287e:	bf00      	nop
 8002880:	40021000 	.word	0x40021000
 8002884:	40007000 	.word	0x40007000
 8002888:	4b9c      	ldr	r3, [pc, #624]	; (8002afc <HAL_RCC_OscConfig+0x780>)
 800288a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800288e:	4a9b      	ldr	r2, [pc, #620]	; (8002afc <HAL_RCC_OscConfig+0x780>)
 8002890:	f023 0301 	bic.w	r3, r3, #1
 8002894:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002898:	4b98      	ldr	r3, [pc, #608]	; (8002afc <HAL_RCC_OscConfig+0x780>)
 800289a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800289e:	4a97      	ldr	r2, [pc, #604]	; (8002afc <HAL_RCC_OscConfig+0x780>)
 80028a0:	f023 0304 	bic.w	r3, r3, #4
 80028a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d016      	beq.n	80028de <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b0:	f7fe fd5c 	bl	800136c <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028b6:	e00a      	b.n	80028ce <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028b8:	f7fe fd58 	bl	800136c <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e12a      	b.n	8002b24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028ce:	4b8b      	ldr	r3, [pc, #556]	; (8002afc <HAL_RCC_OscConfig+0x780>)
 80028d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d0ed      	beq.n	80028b8 <HAL_RCC_OscConfig+0x53c>
 80028dc:	e015      	b.n	800290a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028de:	f7fe fd45 	bl	800136c <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028e4:	e00a      	b.n	80028fc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028e6:	f7fe fd41 	bl	800136c <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e113      	b.n	8002b24 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028fc:	4b7f      	ldr	r3, [pc, #508]	; (8002afc <HAL_RCC_OscConfig+0x780>)
 80028fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1ed      	bne.n	80028e6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800290a:	7ffb      	ldrb	r3, [r7, #31]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d105      	bne.n	800291c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002910:	4b7a      	ldr	r3, [pc, #488]	; (8002afc <HAL_RCC_OscConfig+0x780>)
 8002912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002914:	4a79      	ldr	r2, [pc, #484]	; (8002afc <HAL_RCC_OscConfig+0x780>)
 8002916:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800291a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 80fe 	beq.w	8002b22 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292a:	2b02      	cmp	r3, #2
 800292c:	f040 80d0 	bne.w	8002ad0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002930:	4b72      	ldr	r3, [pc, #456]	; (8002afc <HAL_RCC_OscConfig+0x780>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	f003 0203 	and.w	r2, r3, #3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002940:	429a      	cmp	r2, r3
 8002942:	d130      	bne.n	80029a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294e:	3b01      	subs	r3, #1
 8002950:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002952:	429a      	cmp	r2, r3
 8002954:	d127      	bne.n	80029a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002960:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002962:	429a      	cmp	r2, r3
 8002964:	d11f      	bne.n	80029a6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002970:	2a07      	cmp	r2, #7
 8002972:	bf14      	ite	ne
 8002974:	2201      	movne	r2, #1
 8002976:	2200      	moveq	r2, #0
 8002978:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800297a:	4293      	cmp	r3, r2
 800297c:	d113      	bne.n	80029a6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002988:	085b      	lsrs	r3, r3, #1
 800298a:	3b01      	subs	r3, #1
 800298c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800298e:	429a      	cmp	r2, r3
 8002990:	d109      	bne.n	80029a6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299c:	085b      	lsrs	r3, r3, #1
 800299e:	3b01      	subs	r3, #1
 80029a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d06e      	beq.n	8002a84 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	2b0c      	cmp	r3, #12
 80029aa:	d069      	beq.n	8002a80 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80029ac:	4b53      	ldr	r3, [pc, #332]	; (8002afc <HAL_RCC_OscConfig+0x780>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d105      	bne.n	80029c4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80029b8:	4b50      	ldr	r3, [pc, #320]	; (8002afc <HAL_RCC_OscConfig+0x780>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e0ad      	b.n	8002b24 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80029c8:	4b4c      	ldr	r3, [pc, #304]	; (8002afc <HAL_RCC_OscConfig+0x780>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a4b      	ldr	r2, [pc, #300]	; (8002afc <HAL_RCC_OscConfig+0x780>)
 80029ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029d2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029d4:	f7fe fcca 	bl	800136c <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029dc:	f7fe fcc6 	bl	800136c <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e09a      	b.n	8002b24 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029ee:	4b43      	ldr	r3, [pc, #268]	; (8002afc <HAL_RCC_OscConfig+0x780>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1f0      	bne.n	80029dc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029fa:	4b40      	ldr	r3, [pc, #256]	; (8002afc <HAL_RCC_OscConfig+0x780>)
 80029fc:	68da      	ldr	r2, [r3, #12]
 80029fe:	4b40      	ldr	r3, [pc, #256]	; (8002b00 <HAL_RCC_OscConfig+0x784>)
 8002a00:	4013      	ands	r3, r2
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a0a:	3a01      	subs	r2, #1
 8002a0c:	0112      	lsls	r2, r2, #4
 8002a0e:	4311      	orrs	r1, r2
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a14:	0212      	lsls	r2, r2, #8
 8002a16:	4311      	orrs	r1, r2
 8002a18:	687a      	ldr	r2, [r7, #4]
 8002a1a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a1c:	0852      	lsrs	r2, r2, #1
 8002a1e:	3a01      	subs	r2, #1
 8002a20:	0552      	lsls	r2, r2, #21
 8002a22:	4311      	orrs	r1, r2
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a28:	0852      	lsrs	r2, r2, #1
 8002a2a:	3a01      	subs	r2, #1
 8002a2c:	0652      	lsls	r2, r2, #25
 8002a2e:	4311      	orrs	r1, r2
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a34:	0912      	lsrs	r2, r2, #4
 8002a36:	0452      	lsls	r2, r2, #17
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	4930      	ldr	r1, [pc, #192]	; (8002afc <HAL_RCC_OscConfig+0x780>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a40:	4b2e      	ldr	r3, [pc, #184]	; (8002afc <HAL_RCC_OscConfig+0x780>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a2d      	ldr	r2, [pc, #180]	; (8002afc <HAL_RCC_OscConfig+0x780>)
 8002a46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a4a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a4c:	4b2b      	ldr	r3, [pc, #172]	; (8002afc <HAL_RCC_OscConfig+0x780>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	4a2a      	ldr	r2, [pc, #168]	; (8002afc <HAL_RCC_OscConfig+0x780>)
 8002a52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a56:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a58:	f7fe fc88 	bl	800136c <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a60:	f7fe fc84 	bl	800136c <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e058      	b.n	8002b24 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a72:	4b22      	ldr	r3, [pc, #136]	; (8002afc <HAL_RCC_OscConfig+0x780>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d0f0      	beq.n	8002a60 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a7e:	e050      	b.n	8002b22 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e04f      	b.n	8002b24 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a84:	4b1d      	ldr	r3, [pc, #116]	; (8002afc <HAL_RCC_OscConfig+0x780>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d148      	bne.n	8002b22 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002a90:	4b1a      	ldr	r3, [pc, #104]	; (8002afc <HAL_RCC_OscConfig+0x780>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a19      	ldr	r2, [pc, #100]	; (8002afc <HAL_RCC_OscConfig+0x780>)
 8002a96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a9a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a9c:	4b17      	ldr	r3, [pc, #92]	; (8002afc <HAL_RCC_OscConfig+0x780>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	4a16      	ldr	r2, [pc, #88]	; (8002afc <HAL_RCC_OscConfig+0x780>)
 8002aa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002aa6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002aa8:	f7fe fc60 	bl	800136c <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab0:	f7fe fc5c 	bl	800136c <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e030      	b.n	8002b24 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ac2:	4b0e      	ldr	r3, [pc, #56]	; (8002afc <HAL_RCC_OscConfig+0x780>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0f0      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x734>
 8002ace:	e028      	b.n	8002b22 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ad0:	69bb      	ldr	r3, [r7, #24]
 8002ad2:	2b0c      	cmp	r3, #12
 8002ad4:	d023      	beq.n	8002b1e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad6:	4b09      	ldr	r3, [pc, #36]	; (8002afc <HAL_RCC_OscConfig+0x780>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a08      	ldr	r2, [pc, #32]	; (8002afc <HAL_RCC_OscConfig+0x780>)
 8002adc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ae0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae2:	f7fe fc43 	bl	800136c <HAL_GetTick>
 8002ae6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ae8:	e00c      	b.n	8002b04 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aea:	f7fe fc3f 	bl	800136c <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d905      	bls.n	8002b04 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e013      	b.n	8002b24 <HAL_RCC_OscConfig+0x7a8>
 8002afc:	40021000 	.word	0x40021000
 8002b00:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b04:	4b09      	ldr	r3, [pc, #36]	; (8002b2c <HAL_RCC_OscConfig+0x7b0>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d1ec      	bne.n	8002aea <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b10:	4b06      	ldr	r3, [pc, #24]	; (8002b2c <HAL_RCC_OscConfig+0x7b0>)
 8002b12:	68da      	ldr	r2, [r3, #12]
 8002b14:	4905      	ldr	r1, [pc, #20]	; (8002b2c <HAL_RCC_OscConfig+0x7b0>)
 8002b16:	4b06      	ldr	r3, [pc, #24]	; (8002b30 <HAL_RCC_OscConfig+0x7b4>)
 8002b18:	4013      	ands	r3, r2
 8002b1a:	60cb      	str	r3, [r1, #12]
 8002b1c:	e001      	b.n	8002b22 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e000      	b.n	8002b24 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3720      	adds	r7, #32
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	40021000 	.word	0x40021000
 8002b30:	feeefffc 	.word	0xfeeefffc

08002b34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d101      	bne.n	8002b48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e0e7      	b.n	8002d18 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b48:	4b75      	ldr	r3, [pc, #468]	; (8002d20 <HAL_RCC_ClockConfig+0x1ec>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0307 	and.w	r3, r3, #7
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d910      	bls.n	8002b78 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b56:	4b72      	ldr	r3, [pc, #456]	; (8002d20 <HAL_RCC_ClockConfig+0x1ec>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f023 0207 	bic.w	r2, r3, #7
 8002b5e:	4970      	ldr	r1, [pc, #448]	; (8002d20 <HAL_RCC_ClockConfig+0x1ec>)
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b66:	4b6e      	ldr	r3, [pc, #440]	; (8002d20 <HAL_RCC_ClockConfig+0x1ec>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0307 	and.w	r3, r3, #7
 8002b6e:	683a      	ldr	r2, [r7, #0]
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d001      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e0cf      	b.n	8002d18 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d010      	beq.n	8002ba6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689a      	ldr	r2, [r3, #8]
 8002b88:	4b66      	ldr	r3, [pc, #408]	; (8002d24 <HAL_RCC_ClockConfig+0x1f0>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d908      	bls.n	8002ba6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b94:	4b63      	ldr	r3, [pc, #396]	; (8002d24 <HAL_RCC_ClockConfig+0x1f0>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	4960      	ldr	r1, [pc, #384]	; (8002d24 <HAL_RCC_ClockConfig+0x1f0>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d04c      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2b03      	cmp	r3, #3
 8002bb8:	d107      	bne.n	8002bca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bba:	4b5a      	ldr	r3, [pc, #360]	; (8002d24 <HAL_RCC_ClockConfig+0x1f0>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d121      	bne.n	8002c0a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e0a6      	b.n	8002d18 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d107      	bne.n	8002be2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bd2:	4b54      	ldr	r3, [pc, #336]	; (8002d24 <HAL_RCC_ClockConfig+0x1f0>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d115      	bne.n	8002c0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e09a      	b.n	8002d18 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d107      	bne.n	8002bfa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002bea:	4b4e      	ldr	r3, [pc, #312]	; (8002d24 <HAL_RCC_ClockConfig+0x1f0>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d109      	bne.n	8002c0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e08e      	b.n	8002d18 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bfa:	4b4a      	ldr	r3, [pc, #296]	; (8002d24 <HAL_RCC_ClockConfig+0x1f0>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e086      	b.n	8002d18 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c0a:	4b46      	ldr	r3, [pc, #280]	; (8002d24 <HAL_RCC_ClockConfig+0x1f0>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f023 0203 	bic.w	r2, r3, #3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	4943      	ldr	r1, [pc, #268]	; (8002d24 <HAL_RCC_ClockConfig+0x1f0>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c1c:	f7fe fba6 	bl	800136c <HAL_GetTick>
 8002c20:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c22:	e00a      	b.n	8002c3a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c24:	f7fe fba2 	bl	800136c <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e06e      	b.n	8002d18 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c3a:	4b3a      	ldr	r3, [pc, #232]	; (8002d24 <HAL_RCC_ClockConfig+0x1f0>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 020c 	and.w	r2, r3, #12
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d1eb      	bne.n	8002c24 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0302 	and.w	r3, r3, #2
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d010      	beq.n	8002c7a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	4b31      	ldr	r3, [pc, #196]	; (8002d24 <HAL_RCC_ClockConfig+0x1f0>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d208      	bcs.n	8002c7a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c68:	4b2e      	ldr	r3, [pc, #184]	; (8002d24 <HAL_RCC_ClockConfig+0x1f0>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	492b      	ldr	r1, [pc, #172]	; (8002d24 <HAL_RCC_ClockConfig+0x1f0>)
 8002c76:	4313      	orrs	r3, r2
 8002c78:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c7a:	4b29      	ldr	r3, [pc, #164]	; (8002d20 <HAL_RCC_ClockConfig+0x1ec>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0307 	and.w	r3, r3, #7
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d210      	bcs.n	8002caa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c88:	4b25      	ldr	r3, [pc, #148]	; (8002d20 <HAL_RCC_ClockConfig+0x1ec>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f023 0207 	bic.w	r2, r3, #7
 8002c90:	4923      	ldr	r1, [pc, #140]	; (8002d20 <HAL_RCC_ClockConfig+0x1ec>)
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c98:	4b21      	ldr	r3, [pc, #132]	; (8002d20 <HAL_RCC_ClockConfig+0x1ec>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0307 	and.w	r3, r3, #7
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d001      	beq.n	8002caa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e036      	b.n	8002d18 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0304 	and.w	r3, r3, #4
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d008      	beq.n	8002cc8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cb6:	4b1b      	ldr	r3, [pc, #108]	; (8002d24 <HAL_RCC_ClockConfig+0x1f0>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	4918      	ldr	r1, [pc, #96]	; (8002d24 <HAL_RCC_ClockConfig+0x1f0>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0308 	and.w	r3, r3, #8
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d009      	beq.n	8002ce8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cd4:	4b13      	ldr	r3, [pc, #76]	; (8002d24 <HAL_RCC_ClockConfig+0x1f0>)
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	00db      	lsls	r3, r3, #3
 8002ce2:	4910      	ldr	r1, [pc, #64]	; (8002d24 <HAL_RCC_ClockConfig+0x1f0>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ce8:	f000 f824 	bl	8002d34 <HAL_RCC_GetSysClockFreq>
 8002cec:	4602      	mov	r2, r0
 8002cee:	4b0d      	ldr	r3, [pc, #52]	; (8002d24 <HAL_RCC_ClockConfig+0x1f0>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	091b      	lsrs	r3, r3, #4
 8002cf4:	f003 030f 	and.w	r3, r3, #15
 8002cf8:	490b      	ldr	r1, [pc, #44]	; (8002d28 <HAL_RCC_ClockConfig+0x1f4>)
 8002cfa:	5ccb      	ldrb	r3, [r1, r3]
 8002cfc:	f003 031f 	and.w	r3, r3, #31
 8002d00:	fa22 f303 	lsr.w	r3, r2, r3
 8002d04:	4a09      	ldr	r2, [pc, #36]	; (8002d2c <HAL_RCC_ClockConfig+0x1f8>)
 8002d06:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d08:	4b09      	ldr	r3, [pc, #36]	; (8002d30 <HAL_RCC_ClockConfig+0x1fc>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	f7fe fadd 	bl	80012cc <HAL_InitTick>
 8002d12:	4603      	mov	r3, r0
 8002d14:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d16:	7afb      	ldrb	r3, [r7, #11]
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3710      	adds	r7, #16
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40022000 	.word	0x40022000
 8002d24:	40021000 	.word	0x40021000
 8002d28:	08004a58 	.word	0x08004a58
 8002d2c:	20000000 	.word	0x20000000
 8002d30:	20000004 	.word	0x20000004

08002d34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b089      	sub	sp, #36	; 0x24
 8002d38:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	61fb      	str	r3, [r7, #28]
 8002d3e:	2300      	movs	r3, #0
 8002d40:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d42:	4b3e      	ldr	r3, [pc, #248]	; (8002e3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 030c 	and.w	r3, r3, #12
 8002d4a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d4c:	4b3b      	ldr	r3, [pc, #236]	; (8002e3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	f003 0303 	and.w	r3, r3, #3
 8002d54:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d005      	beq.n	8002d68 <HAL_RCC_GetSysClockFreq+0x34>
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	2b0c      	cmp	r3, #12
 8002d60:	d121      	bne.n	8002da6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d11e      	bne.n	8002da6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d68:	4b34      	ldr	r3, [pc, #208]	; (8002e3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0308 	and.w	r3, r3, #8
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d107      	bne.n	8002d84 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d74:	4b31      	ldr	r3, [pc, #196]	; (8002e3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d7a:	0a1b      	lsrs	r3, r3, #8
 8002d7c:	f003 030f 	and.w	r3, r3, #15
 8002d80:	61fb      	str	r3, [r7, #28]
 8002d82:	e005      	b.n	8002d90 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d84:	4b2d      	ldr	r3, [pc, #180]	; (8002e3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	091b      	lsrs	r3, r3, #4
 8002d8a:	f003 030f 	and.w	r3, r3, #15
 8002d8e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002d90:	4a2b      	ldr	r2, [pc, #172]	; (8002e40 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d98:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d10d      	bne.n	8002dbc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002da4:	e00a      	b.n	8002dbc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	2b04      	cmp	r3, #4
 8002daa:	d102      	bne.n	8002db2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002dac:	4b25      	ldr	r3, [pc, #148]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x110>)
 8002dae:	61bb      	str	r3, [r7, #24]
 8002db0:	e004      	b.n	8002dbc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	2b08      	cmp	r3, #8
 8002db6:	d101      	bne.n	8002dbc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002db8:	4b23      	ldr	r3, [pc, #140]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x114>)
 8002dba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002dbc:	693b      	ldr	r3, [r7, #16]
 8002dbe:	2b0c      	cmp	r3, #12
 8002dc0:	d134      	bne.n	8002e2c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002dc2:	4b1e      	ldr	r3, [pc, #120]	; (8002e3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	f003 0303 	and.w	r3, r3, #3
 8002dca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d003      	beq.n	8002dda <HAL_RCC_GetSysClockFreq+0xa6>
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	2b03      	cmp	r3, #3
 8002dd6:	d003      	beq.n	8002de0 <HAL_RCC_GetSysClockFreq+0xac>
 8002dd8:	e005      	b.n	8002de6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002dda:	4b1a      	ldr	r3, [pc, #104]	; (8002e44 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ddc:	617b      	str	r3, [r7, #20]
      break;
 8002dde:	e005      	b.n	8002dec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002de0:	4b19      	ldr	r3, [pc, #100]	; (8002e48 <HAL_RCC_GetSysClockFreq+0x114>)
 8002de2:	617b      	str	r3, [r7, #20]
      break;
 8002de4:	e002      	b.n	8002dec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	617b      	str	r3, [r7, #20]
      break;
 8002dea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002dec:	4b13      	ldr	r3, [pc, #76]	; (8002e3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	091b      	lsrs	r3, r3, #4
 8002df2:	f003 0307 	and.w	r3, r3, #7
 8002df6:	3301      	adds	r3, #1
 8002df8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002dfa:	4b10      	ldr	r3, [pc, #64]	; (8002e3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	0a1b      	lsrs	r3, r3, #8
 8002e00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e04:	697a      	ldr	r2, [r7, #20]
 8002e06:	fb03 f202 	mul.w	r2, r3, r2
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e10:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e12:	4b0a      	ldr	r3, [pc, #40]	; (8002e3c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	0e5b      	lsrs	r3, r3, #25
 8002e18:	f003 0303 	and.w	r3, r3, #3
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e2a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e2c:	69bb      	ldr	r3, [r7, #24]
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3724      	adds	r7, #36	; 0x24
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	40021000 	.word	0x40021000
 8002e40:	08004a70 	.word	0x08004a70
 8002e44:	00f42400 	.word	0x00f42400
 8002e48:	007a1200 	.word	0x007a1200

08002e4c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e50:	4b03      	ldr	r3, [pc, #12]	; (8002e60 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e52:	681b      	ldr	r3, [r3, #0]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	20000000 	.word	0x20000000

08002e64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e68:	f7ff fff0 	bl	8002e4c <HAL_RCC_GetHCLKFreq>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	4b06      	ldr	r3, [pc, #24]	; (8002e88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	0a1b      	lsrs	r3, r3, #8
 8002e74:	f003 0307 	and.w	r3, r3, #7
 8002e78:	4904      	ldr	r1, [pc, #16]	; (8002e8c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e7a:	5ccb      	ldrb	r3, [r1, r3]
 8002e7c:	f003 031f 	and.w	r3, r3, #31
 8002e80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	08004a68 	.word	0x08004a68

08002e90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e94:	f7ff ffda 	bl	8002e4c <HAL_RCC_GetHCLKFreq>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	4b06      	ldr	r3, [pc, #24]	; (8002eb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	0adb      	lsrs	r3, r3, #11
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	4904      	ldr	r1, [pc, #16]	; (8002eb8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ea6:	5ccb      	ldrb	r3, [r1, r3]
 8002ea8:	f003 031f 	and.w	r3, r3, #31
 8002eac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	08004a68 	.word	0x08004a68

08002ebc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ec8:	4b2a      	ldr	r3, [pc, #168]	; (8002f74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ecc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d003      	beq.n	8002edc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ed4:	f7ff f922 	bl	800211c <HAL_PWREx_GetVoltageRange>
 8002ed8:	6178      	str	r0, [r7, #20]
 8002eda:	e014      	b.n	8002f06 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002edc:	4b25      	ldr	r3, [pc, #148]	; (8002f74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee0:	4a24      	ldr	r2, [pc, #144]	; (8002f74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ee2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ee6:	6593      	str	r3, [r2, #88]	; 0x58
 8002ee8:	4b22      	ldr	r3, [pc, #136]	; (8002f74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef0:	60fb      	str	r3, [r7, #12]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ef4:	f7ff f912 	bl	800211c <HAL_PWREx_GetVoltageRange>
 8002ef8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002efa:	4b1e      	ldr	r3, [pc, #120]	; (8002f74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002efc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002efe:	4a1d      	ldr	r2, [pc, #116]	; (8002f74 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f04:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f0c:	d10b      	bne.n	8002f26 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2b80      	cmp	r3, #128	; 0x80
 8002f12:	d919      	bls.n	8002f48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2ba0      	cmp	r3, #160	; 0xa0
 8002f18:	d902      	bls.n	8002f20 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	613b      	str	r3, [r7, #16]
 8002f1e:	e013      	b.n	8002f48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f20:	2301      	movs	r3, #1
 8002f22:	613b      	str	r3, [r7, #16]
 8002f24:	e010      	b.n	8002f48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b80      	cmp	r3, #128	; 0x80
 8002f2a:	d902      	bls.n	8002f32 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	613b      	str	r3, [r7, #16]
 8002f30:	e00a      	b.n	8002f48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2b80      	cmp	r3, #128	; 0x80
 8002f36:	d102      	bne.n	8002f3e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f38:	2302      	movs	r3, #2
 8002f3a:	613b      	str	r3, [r7, #16]
 8002f3c:	e004      	b.n	8002f48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2b70      	cmp	r3, #112	; 0x70
 8002f42:	d101      	bne.n	8002f48 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f44:	2301      	movs	r3, #1
 8002f46:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f48:	4b0b      	ldr	r3, [pc, #44]	; (8002f78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f023 0207 	bic.w	r2, r3, #7
 8002f50:	4909      	ldr	r1, [pc, #36]	; (8002f78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f58:	4b07      	ldr	r3, [pc, #28]	; (8002f78 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0307 	and.w	r3, r3, #7
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d001      	beq.n	8002f6a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e000      	b.n	8002f6c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002f6a:	2300      	movs	r3, #0
}
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3718      	adds	r7, #24
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	40021000 	.word	0x40021000
 8002f78:	40022000 	.word	0x40022000

08002f7c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f84:	2300      	movs	r3, #0
 8002f86:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f88:	2300      	movs	r3, #0
 8002f8a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d041      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f9c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002fa0:	d02a      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002fa2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002fa6:	d824      	bhi.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002fa8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002fac:	d008      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002fae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002fb2:	d81e      	bhi.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00a      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002fb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fbc:	d010      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002fbe:	e018      	b.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002fc0:	4b86      	ldr	r3, [pc, #536]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fc2:	68db      	ldr	r3, [r3, #12]
 8002fc4:	4a85      	ldr	r2, [pc, #532]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fca:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fcc:	e015      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	3304      	adds	r3, #4
 8002fd2:	2100      	movs	r1, #0
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f000 facb 	bl	8003570 <RCCEx_PLLSAI1_Config>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fde:	e00c      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	3320      	adds	r3, #32
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 fbb6 	bl	8003758 <RCCEx_PLLSAI2_Config>
 8002fec:	4603      	mov	r3, r0
 8002fee:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ff0:	e003      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	74fb      	strb	r3, [r7, #19]
      break;
 8002ff6:	e000      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002ff8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ffa:	7cfb      	ldrb	r3, [r7, #19]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10b      	bne.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003000:	4b76      	ldr	r3, [pc, #472]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003006:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800300e:	4973      	ldr	r1, [pc, #460]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003010:	4313      	orrs	r3, r2
 8003012:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003016:	e001      	b.n	800301c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003018:	7cfb      	ldrb	r3, [r7, #19]
 800301a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d041      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800302c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003030:	d02a      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003032:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003036:	d824      	bhi.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003038:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800303c:	d008      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800303e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003042:	d81e      	bhi.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00a      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003048:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800304c:	d010      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800304e:	e018      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003050:	4b62      	ldr	r3, [pc, #392]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	4a61      	ldr	r2, [pc, #388]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003056:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800305a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800305c:	e015      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	3304      	adds	r3, #4
 8003062:	2100      	movs	r1, #0
 8003064:	4618      	mov	r0, r3
 8003066:	f000 fa83 	bl	8003570 <RCCEx_PLLSAI1_Config>
 800306a:	4603      	mov	r3, r0
 800306c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800306e:	e00c      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	3320      	adds	r3, #32
 8003074:	2100      	movs	r1, #0
 8003076:	4618      	mov	r0, r3
 8003078:	f000 fb6e 	bl	8003758 <RCCEx_PLLSAI2_Config>
 800307c:	4603      	mov	r3, r0
 800307e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003080:	e003      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	74fb      	strb	r3, [r7, #19]
      break;
 8003086:	e000      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003088:	bf00      	nop
    }

    if(ret == HAL_OK)
 800308a:	7cfb      	ldrb	r3, [r7, #19]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d10b      	bne.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003090:	4b52      	ldr	r3, [pc, #328]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003096:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800309e:	494f      	ldr	r1, [pc, #316]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030a0:	4313      	orrs	r3, r2
 80030a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80030a6:	e001      	b.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030a8:	7cfb      	ldrb	r3, [r7, #19]
 80030aa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	f000 80a0 	beq.w	80031fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030ba:	2300      	movs	r3, #0
 80030bc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80030be:	4b47      	ldr	r3, [pc, #284]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x152>
 80030ca:	2301      	movs	r3, #1
 80030cc:	e000      	b.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80030ce:	2300      	movs	r3, #0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00d      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030d4:	4b41      	ldr	r3, [pc, #260]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d8:	4a40      	ldr	r2, [pc, #256]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030de:	6593      	str	r3, [r2, #88]	; 0x58
 80030e0:	4b3e      	ldr	r3, [pc, #248]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e8:	60bb      	str	r3, [r7, #8]
 80030ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030ec:	2301      	movs	r3, #1
 80030ee:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030f0:	4b3b      	ldr	r3, [pc, #236]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a3a      	ldr	r2, [pc, #232]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80030f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80030fc:	f7fe f936 	bl	800136c <HAL_GetTick>
 8003100:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003102:	e009      	b.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003104:	f7fe f932 	bl	800136c <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d902      	bls.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	74fb      	strb	r3, [r7, #19]
        break;
 8003116:	e005      	b.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003118:	4b31      	ldr	r3, [pc, #196]	; (80031e0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003120:	2b00      	cmp	r3, #0
 8003122:	d0ef      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003124:	7cfb      	ldrb	r3, [r7, #19]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d15c      	bne.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800312a:	4b2c      	ldr	r3, [pc, #176]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800312c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003130:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003134:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d01f      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	429a      	cmp	r2, r3
 8003146:	d019      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003148:	4b24      	ldr	r3, [pc, #144]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800314a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800314e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003152:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003154:	4b21      	ldr	r3, [pc, #132]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800315a:	4a20      	ldr	r2, [pc, #128]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800315c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003160:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003164:	4b1d      	ldr	r3, [pc, #116]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800316a:	4a1c      	ldr	r2, [pc, #112]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800316c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003170:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003174:	4a19      	ldr	r2, [pc, #100]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	f003 0301 	and.w	r3, r3, #1
 8003182:	2b00      	cmp	r3, #0
 8003184:	d016      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003186:	f7fe f8f1 	bl	800136c <HAL_GetTick>
 800318a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800318c:	e00b      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800318e:	f7fe f8ed 	bl	800136c <HAL_GetTick>
 8003192:	4602      	mov	r2, r0
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	1ad3      	subs	r3, r2, r3
 8003198:	f241 3288 	movw	r2, #5000	; 0x1388
 800319c:	4293      	cmp	r3, r2
 800319e:	d902      	bls.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	74fb      	strb	r3, [r7, #19]
            break;
 80031a4:	e006      	b.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031a6:	4b0d      	ldr	r3, [pc, #52]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d0ec      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80031b4:	7cfb      	ldrb	r3, [r7, #19]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d10c      	bne.n	80031d4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031ba:	4b08      	ldr	r3, [pc, #32]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031ca:	4904      	ldr	r1, [pc, #16]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80031d2:	e009      	b.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031d4:	7cfb      	ldrb	r3, [r7, #19]
 80031d6:	74bb      	strb	r3, [r7, #18]
 80031d8:	e006      	b.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80031da:	bf00      	nop
 80031dc:	40021000 	.word	0x40021000
 80031e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031e4:	7cfb      	ldrb	r3, [r7, #19]
 80031e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031e8:	7c7b      	ldrb	r3, [r7, #17]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d105      	bne.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ee:	4b9e      	ldr	r3, [pc, #632]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031f2:	4a9d      	ldr	r2, [pc, #628]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80031f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00a      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003206:	4b98      	ldr	r3, [pc, #608]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800320c:	f023 0203 	bic.w	r2, r3, #3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003214:	4994      	ldr	r1, [pc, #592]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003216:	4313      	orrs	r3, r2
 8003218:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00a      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003228:	4b8f      	ldr	r3, [pc, #572]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800322a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800322e:	f023 020c 	bic.w	r2, r3, #12
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003236:	498c      	ldr	r1, [pc, #560]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003238:	4313      	orrs	r3, r2
 800323a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0304 	and.w	r3, r3, #4
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00a      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800324a:	4b87      	ldr	r3, [pc, #540]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800324c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003250:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003258:	4983      	ldr	r1, [pc, #524]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800325a:	4313      	orrs	r3, r2
 800325c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0308 	and.w	r3, r3, #8
 8003268:	2b00      	cmp	r3, #0
 800326a:	d00a      	beq.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800326c:	4b7e      	ldr	r3, [pc, #504]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800326e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003272:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327a:	497b      	ldr	r1, [pc, #492]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800327c:	4313      	orrs	r3, r2
 800327e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0310 	and.w	r3, r3, #16
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00a      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800328e:	4b76      	ldr	r3, [pc, #472]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003294:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800329c:	4972      	ldr	r1, [pc, #456]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0320 	and.w	r3, r3, #32
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d00a      	beq.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032b0:	4b6d      	ldr	r3, [pc, #436]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032be:	496a      	ldr	r1, [pc, #424]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c0:	4313      	orrs	r3, r2
 80032c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d00a      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032d2:	4b65      	ldr	r3, [pc, #404]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e0:	4961      	ldr	r1, [pc, #388]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00a      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80032f4:	4b5c      	ldr	r3, [pc, #368]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003302:	4959      	ldr	r1, [pc, #356]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003304:	4313      	orrs	r3, r2
 8003306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00a      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003316:	4b54      	ldr	r3, [pc, #336]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800331c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003324:	4950      	ldr	r1, [pc, #320]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003326:	4313      	orrs	r3, r2
 8003328:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00a      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003338:	4b4b      	ldr	r3, [pc, #300]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800333a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800333e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003346:	4948      	ldr	r1, [pc, #288]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003348:	4313      	orrs	r3, r2
 800334a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00a      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800335a:	4b43      	ldr	r3, [pc, #268]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800335c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003360:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003368:	493f      	ldr	r1, [pc, #252]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800336a:	4313      	orrs	r3, r2
 800336c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d028      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800337c:	4b3a      	ldr	r3, [pc, #232]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800337e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003382:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800338a:	4937      	ldr	r1, [pc, #220]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800338c:	4313      	orrs	r3, r2
 800338e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003396:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800339a:	d106      	bne.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800339c:	4b32      	ldr	r3, [pc, #200]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	4a31      	ldr	r2, [pc, #196]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033a6:	60d3      	str	r3, [r2, #12]
 80033a8:	e011      	b.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033b2:	d10c      	bne.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	3304      	adds	r3, #4
 80033b8:	2101      	movs	r1, #1
 80033ba:	4618      	mov	r0, r3
 80033bc:	f000 f8d8 	bl	8003570 <RCCEx_PLLSAI1_Config>
 80033c0:	4603      	mov	r3, r0
 80033c2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80033c4:	7cfb      	ldrb	r3, [r7, #19]
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80033ca:	7cfb      	ldrb	r3, [r7, #19]
 80033cc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d028      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80033da:	4b23      	ldr	r3, [pc, #140]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e8:	491f      	ldr	r1, [pc, #124]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ea:	4313      	orrs	r3, r2
 80033ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033f8:	d106      	bne.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033fa:	4b1b      	ldr	r3, [pc, #108]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	4a1a      	ldr	r2, [pc, #104]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003400:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003404:	60d3      	str	r3, [r2, #12]
 8003406:	e011      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003410:	d10c      	bne.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	3304      	adds	r3, #4
 8003416:	2101      	movs	r1, #1
 8003418:	4618      	mov	r0, r3
 800341a:	f000 f8a9 	bl	8003570 <RCCEx_PLLSAI1_Config>
 800341e:	4603      	mov	r3, r0
 8003420:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003422:	7cfb      	ldrb	r3, [r7, #19]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d001      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003428:	7cfb      	ldrb	r3, [r7, #19]
 800342a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d02b      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003438:	4b0b      	ldr	r3, [pc, #44]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800343a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800343e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003446:	4908      	ldr	r1, [pc, #32]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003448:	4313      	orrs	r3, r2
 800344a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003452:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003456:	d109      	bne.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003458:	4b03      	ldr	r3, [pc, #12]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	4a02      	ldr	r2, [pc, #8]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800345e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003462:	60d3      	str	r3, [r2, #12]
 8003464:	e014      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003466:	bf00      	nop
 8003468:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003470:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003474:	d10c      	bne.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	3304      	adds	r3, #4
 800347a:	2101      	movs	r1, #1
 800347c:	4618      	mov	r0, r3
 800347e:	f000 f877 	bl	8003570 <RCCEx_PLLSAI1_Config>
 8003482:	4603      	mov	r3, r0
 8003484:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003486:	7cfb      	ldrb	r3, [r7, #19]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800348c:	7cfb      	ldrb	r3, [r7, #19]
 800348e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003498:	2b00      	cmp	r3, #0
 800349a:	d02f      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800349c:	4b2b      	ldr	r3, [pc, #172]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800349e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034aa:	4928      	ldr	r1, [pc, #160]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034ac:	4313      	orrs	r3, r2
 80034ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034ba:	d10d      	bne.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	3304      	adds	r3, #4
 80034c0:	2102      	movs	r1, #2
 80034c2:	4618      	mov	r0, r3
 80034c4:	f000 f854 	bl	8003570 <RCCEx_PLLSAI1_Config>
 80034c8:	4603      	mov	r3, r0
 80034ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034cc:	7cfb      	ldrb	r3, [r7, #19]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d014      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80034d2:	7cfb      	ldrb	r3, [r7, #19]
 80034d4:	74bb      	strb	r3, [r7, #18]
 80034d6:	e011      	b.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034e0:	d10c      	bne.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	3320      	adds	r3, #32
 80034e6:	2102      	movs	r1, #2
 80034e8:	4618      	mov	r0, r3
 80034ea:	f000 f935 	bl	8003758 <RCCEx_PLLSAI2_Config>
 80034ee:	4603      	mov	r3, r0
 80034f0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034f2:	7cfb      	ldrb	r3, [r7, #19]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d001      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80034f8:	7cfb      	ldrb	r3, [r7, #19]
 80034fa:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00a      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003508:	4b10      	ldr	r3, [pc, #64]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800350a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800350e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003516:	490d      	ldr	r1, [pc, #52]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003518:	4313      	orrs	r3, r2
 800351a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00b      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800352a:	4b08      	ldr	r3, [pc, #32]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800352c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003530:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800353a:	4904      	ldr	r1, [pc, #16]	; (800354c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800353c:	4313      	orrs	r3, r2
 800353e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003542:	7cbb      	ldrb	r3, [r7, #18]
}
 8003544:	4618      	mov	r0, r3
 8003546:	3718      	adds	r7, #24
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}
 800354c:	40021000 	.word	0x40021000

08003550 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003554:	4b05      	ldr	r3, [pc, #20]	; (800356c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a04      	ldr	r2, [pc, #16]	; (800356c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800355a:	f043 0304 	orr.w	r3, r3, #4
 800355e:	6013      	str	r3, [r2, #0]
}
 8003560:	bf00      	nop
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	40021000 	.word	0x40021000

08003570 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800357a:	2300      	movs	r3, #0
 800357c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800357e:	4b75      	ldr	r3, [pc, #468]	; (8003754 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	f003 0303 	and.w	r3, r3, #3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d018      	beq.n	80035bc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800358a:	4b72      	ldr	r3, [pc, #456]	; (8003754 <RCCEx_PLLSAI1_Config+0x1e4>)
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	f003 0203 	and.w	r2, r3, #3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	429a      	cmp	r2, r3
 8003598:	d10d      	bne.n	80035b6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
       ||
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d009      	beq.n	80035b6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80035a2:	4b6c      	ldr	r3, [pc, #432]	; (8003754 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	091b      	lsrs	r3, r3, #4
 80035a8:	f003 0307 	and.w	r3, r3, #7
 80035ac:	1c5a      	adds	r2, r3, #1
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
       ||
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d047      	beq.n	8003646 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	73fb      	strb	r3, [r7, #15]
 80035ba:	e044      	b.n	8003646 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2b03      	cmp	r3, #3
 80035c2:	d018      	beq.n	80035f6 <RCCEx_PLLSAI1_Config+0x86>
 80035c4:	2b03      	cmp	r3, #3
 80035c6:	d825      	bhi.n	8003614 <RCCEx_PLLSAI1_Config+0xa4>
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d002      	beq.n	80035d2 <RCCEx_PLLSAI1_Config+0x62>
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d009      	beq.n	80035e4 <RCCEx_PLLSAI1_Config+0x74>
 80035d0:	e020      	b.n	8003614 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035d2:	4b60      	ldr	r3, [pc, #384]	; (8003754 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d11d      	bne.n	800361a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035e2:	e01a      	b.n	800361a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80035e4:	4b5b      	ldr	r3, [pc, #364]	; (8003754 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d116      	bne.n	800361e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80035f0:	2301      	movs	r3, #1
 80035f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035f4:	e013      	b.n	800361e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80035f6:	4b57      	ldr	r3, [pc, #348]	; (8003754 <RCCEx_PLLSAI1_Config+0x1e4>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10f      	bne.n	8003622 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003602:	4b54      	ldr	r3, [pc, #336]	; (8003754 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d109      	bne.n	8003622 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003612:	e006      	b.n	8003622 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	73fb      	strb	r3, [r7, #15]
      break;
 8003618:	e004      	b.n	8003624 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800361a:	bf00      	nop
 800361c:	e002      	b.n	8003624 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800361e:	bf00      	nop
 8003620:	e000      	b.n	8003624 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003622:	bf00      	nop
    }

    if(status == HAL_OK)
 8003624:	7bfb      	ldrb	r3, [r7, #15]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10d      	bne.n	8003646 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800362a:	4b4a      	ldr	r3, [pc, #296]	; (8003754 <RCCEx_PLLSAI1_Config+0x1e4>)
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6819      	ldr	r1, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	3b01      	subs	r3, #1
 800363c:	011b      	lsls	r3, r3, #4
 800363e:	430b      	orrs	r3, r1
 8003640:	4944      	ldr	r1, [pc, #272]	; (8003754 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003642:	4313      	orrs	r3, r2
 8003644:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003646:	7bfb      	ldrb	r3, [r7, #15]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d17d      	bne.n	8003748 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800364c:	4b41      	ldr	r3, [pc, #260]	; (8003754 <RCCEx_PLLSAI1_Config+0x1e4>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a40      	ldr	r2, [pc, #256]	; (8003754 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003652:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003656:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003658:	f7fd fe88 	bl	800136c <HAL_GetTick>
 800365c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800365e:	e009      	b.n	8003674 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003660:	f7fd fe84 	bl	800136c <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b02      	cmp	r3, #2
 800366c:	d902      	bls.n	8003674 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	73fb      	strb	r3, [r7, #15]
        break;
 8003672:	e005      	b.n	8003680 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003674:	4b37      	ldr	r3, [pc, #220]	; (8003754 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1ef      	bne.n	8003660 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003680:	7bfb      	ldrb	r3, [r7, #15]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d160      	bne.n	8003748 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d111      	bne.n	80036b0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800368c:	4b31      	ldr	r3, [pc, #196]	; (8003754 <RCCEx_PLLSAI1_Config+0x1e4>)
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003694:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	6892      	ldr	r2, [r2, #8]
 800369c:	0211      	lsls	r1, r2, #8
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	68d2      	ldr	r2, [r2, #12]
 80036a2:	0912      	lsrs	r2, r2, #4
 80036a4:	0452      	lsls	r2, r2, #17
 80036a6:	430a      	orrs	r2, r1
 80036a8:	492a      	ldr	r1, [pc, #168]	; (8003754 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036aa:	4313      	orrs	r3, r2
 80036ac:	610b      	str	r3, [r1, #16]
 80036ae:	e027      	b.n	8003700 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d112      	bne.n	80036dc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036b6:	4b27      	ldr	r3, [pc, #156]	; (8003754 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80036be:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	6892      	ldr	r2, [r2, #8]
 80036c6:	0211      	lsls	r1, r2, #8
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	6912      	ldr	r2, [r2, #16]
 80036cc:	0852      	lsrs	r2, r2, #1
 80036ce:	3a01      	subs	r2, #1
 80036d0:	0552      	lsls	r2, r2, #21
 80036d2:	430a      	orrs	r2, r1
 80036d4:	491f      	ldr	r1, [pc, #124]	; (8003754 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	610b      	str	r3, [r1, #16]
 80036da:	e011      	b.n	8003700 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036dc:	4b1d      	ldr	r3, [pc, #116]	; (8003754 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80036e4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	6892      	ldr	r2, [r2, #8]
 80036ec:	0211      	lsls	r1, r2, #8
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	6952      	ldr	r2, [r2, #20]
 80036f2:	0852      	lsrs	r2, r2, #1
 80036f4:	3a01      	subs	r2, #1
 80036f6:	0652      	lsls	r2, r2, #25
 80036f8:	430a      	orrs	r2, r1
 80036fa:	4916      	ldr	r1, [pc, #88]	; (8003754 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003700:	4b14      	ldr	r3, [pc, #80]	; (8003754 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a13      	ldr	r2, [pc, #76]	; (8003754 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003706:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800370a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800370c:	f7fd fe2e 	bl	800136c <HAL_GetTick>
 8003710:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003712:	e009      	b.n	8003728 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003714:	f7fd fe2a 	bl	800136c <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d902      	bls.n	8003728 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	73fb      	strb	r3, [r7, #15]
          break;
 8003726:	e005      	b.n	8003734 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003728:	4b0a      	ldr	r3, [pc, #40]	; (8003754 <RCCEx_PLLSAI1_Config+0x1e4>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d0ef      	beq.n	8003714 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003734:	7bfb      	ldrb	r3, [r7, #15]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d106      	bne.n	8003748 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800373a:	4b06      	ldr	r3, [pc, #24]	; (8003754 <RCCEx_PLLSAI1_Config+0x1e4>)
 800373c:	691a      	ldr	r2, [r3, #16]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	699b      	ldr	r3, [r3, #24]
 8003742:	4904      	ldr	r1, [pc, #16]	; (8003754 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003744:	4313      	orrs	r3, r2
 8003746:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003748:	7bfb      	ldrb	r3, [r7, #15]
}
 800374a:	4618      	mov	r0, r3
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	40021000 	.word	0x40021000

08003758 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003762:	2300      	movs	r3, #0
 8003764:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003766:	4b6a      	ldr	r3, [pc, #424]	; (8003910 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	f003 0303 	and.w	r3, r3, #3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d018      	beq.n	80037a4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003772:	4b67      	ldr	r3, [pc, #412]	; (8003910 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003774:	68db      	ldr	r3, [r3, #12]
 8003776:	f003 0203 	and.w	r2, r3, #3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	429a      	cmp	r2, r3
 8003780:	d10d      	bne.n	800379e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
       ||
 8003786:	2b00      	cmp	r3, #0
 8003788:	d009      	beq.n	800379e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800378a:	4b61      	ldr	r3, [pc, #388]	; (8003910 <RCCEx_PLLSAI2_Config+0x1b8>)
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	091b      	lsrs	r3, r3, #4
 8003790:	f003 0307 	and.w	r3, r3, #7
 8003794:	1c5a      	adds	r2, r3, #1
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
       ||
 800379a:	429a      	cmp	r2, r3
 800379c:	d047      	beq.n	800382e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	73fb      	strb	r3, [r7, #15]
 80037a2:	e044      	b.n	800382e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2b03      	cmp	r3, #3
 80037aa:	d018      	beq.n	80037de <RCCEx_PLLSAI2_Config+0x86>
 80037ac:	2b03      	cmp	r3, #3
 80037ae:	d825      	bhi.n	80037fc <RCCEx_PLLSAI2_Config+0xa4>
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	d002      	beq.n	80037ba <RCCEx_PLLSAI2_Config+0x62>
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d009      	beq.n	80037cc <RCCEx_PLLSAI2_Config+0x74>
 80037b8:	e020      	b.n	80037fc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037ba:	4b55      	ldr	r3, [pc, #340]	; (8003910 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d11d      	bne.n	8003802 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037ca:	e01a      	b.n	8003802 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037cc:	4b50      	ldr	r3, [pc, #320]	; (8003910 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d116      	bne.n	8003806 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037dc:	e013      	b.n	8003806 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037de:	4b4c      	ldr	r3, [pc, #304]	; (8003910 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d10f      	bne.n	800380a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037ea:	4b49      	ldr	r3, [pc, #292]	; (8003910 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d109      	bne.n	800380a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80037f6:	2301      	movs	r3, #1
 80037f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037fa:	e006      	b.n	800380a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003800:	e004      	b.n	800380c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003802:	bf00      	nop
 8003804:	e002      	b.n	800380c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003806:	bf00      	nop
 8003808:	e000      	b.n	800380c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800380a:	bf00      	nop
    }

    if(status == HAL_OK)
 800380c:	7bfb      	ldrb	r3, [r7, #15]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10d      	bne.n	800382e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003812:	4b3f      	ldr	r3, [pc, #252]	; (8003910 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003814:	68db      	ldr	r3, [r3, #12]
 8003816:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6819      	ldr	r1, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	3b01      	subs	r3, #1
 8003824:	011b      	lsls	r3, r3, #4
 8003826:	430b      	orrs	r3, r1
 8003828:	4939      	ldr	r1, [pc, #228]	; (8003910 <RCCEx_PLLSAI2_Config+0x1b8>)
 800382a:	4313      	orrs	r3, r2
 800382c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800382e:	7bfb      	ldrb	r3, [r7, #15]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d167      	bne.n	8003904 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003834:	4b36      	ldr	r3, [pc, #216]	; (8003910 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a35      	ldr	r2, [pc, #212]	; (8003910 <RCCEx_PLLSAI2_Config+0x1b8>)
 800383a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800383e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003840:	f7fd fd94 	bl	800136c <HAL_GetTick>
 8003844:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003846:	e009      	b.n	800385c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003848:	f7fd fd90 	bl	800136c <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d902      	bls.n	800385c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	73fb      	strb	r3, [r7, #15]
        break;
 800385a:	e005      	b.n	8003868 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800385c:	4b2c      	ldr	r3, [pc, #176]	; (8003910 <RCCEx_PLLSAI2_Config+0x1b8>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d1ef      	bne.n	8003848 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003868:	7bfb      	ldrb	r3, [r7, #15]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d14a      	bne.n	8003904 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d111      	bne.n	8003898 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003874:	4b26      	ldr	r3, [pc, #152]	; (8003910 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003876:	695b      	ldr	r3, [r3, #20]
 8003878:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800387c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	6892      	ldr	r2, [r2, #8]
 8003884:	0211      	lsls	r1, r2, #8
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	68d2      	ldr	r2, [r2, #12]
 800388a:	0912      	lsrs	r2, r2, #4
 800388c:	0452      	lsls	r2, r2, #17
 800388e:	430a      	orrs	r2, r1
 8003890:	491f      	ldr	r1, [pc, #124]	; (8003910 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003892:	4313      	orrs	r3, r2
 8003894:	614b      	str	r3, [r1, #20]
 8003896:	e011      	b.n	80038bc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003898:	4b1d      	ldr	r3, [pc, #116]	; (8003910 <RCCEx_PLLSAI2_Config+0x1b8>)
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80038a0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	6892      	ldr	r2, [r2, #8]
 80038a8:	0211      	lsls	r1, r2, #8
 80038aa:	687a      	ldr	r2, [r7, #4]
 80038ac:	6912      	ldr	r2, [r2, #16]
 80038ae:	0852      	lsrs	r2, r2, #1
 80038b0:	3a01      	subs	r2, #1
 80038b2:	0652      	lsls	r2, r2, #25
 80038b4:	430a      	orrs	r2, r1
 80038b6:	4916      	ldr	r1, [pc, #88]	; (8003910 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80038bc:	4b14      	ldr	r3, [pc, #80]	; (8003910 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a13      	ldr	r2, [pc, #76]	; (8003910 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c8:	f7fd fd50 	bl	800136c <HAL_GetTick>
 80038cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038ce:	e009      	b.n	80038e4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038d0:	f7fd fd4c 	bl	800136c <HAL_GetTick>
 80038d4:	4602      	mov	r2, r0
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d902      	bls.n	80038e4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	73fb      	strb	r3, [r7, #15]
          break;
 80038e2:	e005      	b.n	80038f0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038e4:	4b0a      	ldr	r3, [pc, #40]	; (8003910 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d0ef      	beq.n	80038d0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80038f0:	7bfb      	ldrb	r3, [r7, #15]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d106      	bne.n	8003904 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80038f6:	4b06      	ldr	r3, [pc, #24]	; (8003910 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038f8:	695a      	ldr	r2, [r3, #20]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	695b      	ldr	r3, [r3, #20]
 80038fe:	4904      	ldr	r1, [pc, #16]	; (8003910 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003900:	4313      	orrs	r3, r2
 8003902:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003904:	7bfb      	ldrb	r3, [r7, #15]
}
 8003906:	4618      	mov	r0, r3
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	40021000 	.word	0x40021000

08003914 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e095      	b.n	8003a52 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392a:	2b00      	cmp	r3, #0
 800392c:	d108      	bne.n	8003940 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003936:	d009      	beq.n	800394c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	61da      	str	r2, [r3, #28]
 800393e:	e005      	b.n	800394c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003958:	b2db      	uxtb	r3, r3
 800395a:	2b00      	cmp	r3, #0
 800395c:	d106      	bne.n	800396c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f7fd fa84 	bl	8000e74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2202      	movs	r2, #2
 8003970:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003982:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	68db      	ldr	r3, [r3, #12]
 8003988:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800398c:	d902      	bls.n	8003994 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800398e:	2300      	movs	r3, #0
 8003990:	60fb      	str	r3, [r7, #12]
 8003992:	e002      	b.n	800399a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003994:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003998:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80039a2:	d007      	beq.n	80039b4 <HAL_SPI_Init+0xa0>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039ac:	d002      	beq.n	80039b4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	689b      	ldr	r3, [r3, #8]
 80039c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80039c4:	431a      	orrs	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	431a      	orrs	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	695b      	ldr	r3, [r3, #20]
 80039d4:	f003 0301 	and.w	r3, r3, #1
 80039d8:	431a      	orrs	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	699b      	ldr	r3, [r3, #24]
 80039de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039e2:	431a      	orrs	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	69db      	ldr	r3, [r3, #28]
 80039e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039ec:	431a      	orrs	r2, r3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a1b      	ldr	r3, [r3, #32]
 80039f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f6:	ea42 0103 	orr.w	r1, r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fe:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	430a      	orrs	r2, r1
 8003a08:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	699b      	ldr	r3, [r3, #24]
 8003a0e:	0c1b      	lsrs	r3, r3, #16
 8003a10:	f003 0204 	and.w	r2, r3, #4
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a18:	f003 0310 	and.w	r3, r3, #16
 8003a1c:	431a      	orrs	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a22:	f003 0308 	and.w	r3, r3, #8
 8003a26:	431a      	orrs	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003a30:	ea42 0103 	orr.w	r1, r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b082      	sub	sp, #8
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d101      	bne.n	8003a6c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e040      	b.n	8003aee <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d106      	bne.n	8003a82 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f7fd fa3d 	bl	8000efc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2224      	movs	r2, #36	; 0x24
 8003a86:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 0201 	bic.w	r2, r2, #1
 8003a96:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d002      	beq.n	8003aa6 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	f000 fae1 	bl	8004068 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f826 	bl	8003af8 <UART_SetConfig>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d101      	bne.n	8003ab6 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e01b      	b.n	8003aee <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ac4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	689a      	ldr	r2, [r3, #8]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ad4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f042 0201 	orr.w	r2, r2, #1
 8003ae4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 fb60 	bl	80041ac <UART_CheckIdleState>
 8003aec:	4603      	mov	r3, r0
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3708      	adds	r7, #8
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
	...

08003af8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003af8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003afc:	b08a      	sub	sp, #40	; 0x28
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b02:	2300      	movs	r3, #0
 8003b04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	689a      	ldr	r2, [r3, #8]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	431a      	orrs	r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	431a      	orrs	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	69db      	ldr	r3, [r3, #28]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	4ba4      	ldr	r3, [pc, #656]	; (8003db8 <UART_SetConfig+0x2c0>)
 8003b28:	4013      	ands	r3, r2
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	6812      	ldr	r2, [r2, #0]
 8003b2e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b30:	430b      	orrs	r3, r1
 8003b32:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	68da      	ldr	r2, [r3, #12]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	699b      	ldr	r3, [r3, #24]
 8003b4e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a99      	ldr	r2, [pc, #612]	; (8003dbc <UART_SetConfig+0x2c4>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d004      	beq.n	8003b64 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6a1b      	ldr	r3, [r3, #32]
 8003b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b60:	4313      	orrs	r3, r2
 8003b62:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b74:	430a      	orrs	r2, r1
 8003b76:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a90      	ldr	r2, [pc, #576]	; (8003dc0 <UART_SetConfig+0x2c8>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d126      	bne.n	8003bd0 <UART_SetConfig+0xd8>
 8003b82:	4b90      	ldr	r3, [pc, #576]	; (8003dc4 <UART_SetConfig+0x2cc>)
 8003b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b88:	f003 0303 	and.w	r3, r3, #3
 8003b8c:	2b03      	cmp	r3, #3
 8003b8e:	d81b      	bhi.n	8003bc8 <UART_SetConfig+0xd0>
 8003b90:	a201      	add	r2, pc, #4	; (adr r2, 8003b98 <UART_SetConfig+0xa0>)
 8003b92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b96:	bf00      	nop
 8003b98:	08003ba9 	.word	0x08003ba9
 8003b9c:	08003bb9 	.word	0x08003bb9
 8003ba0:	08003bb1 	.word	0x08003bb1
 8003ba4:	08003bc1 	.word	0x08003bc1
 8003ba8:	2301      	movs	r3, #1
 8003baa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bae:	e116      	b.n	8003dde <UART_SetConfig+0x2e6>
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bb6:	e112      	b.n	8003dde <UART_SetConfig+0x2e6>
 8003bb8:	2304      	movs	r3, #4
 8003bba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bbe:	e10e      	b.n	8003dde <UART_SetConfig+0x2e6>
 8003bc0:	2308      	movs	r3, #8
 8003bc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bc6:	e10a      	b.n	8003dde <UART_SetConfig+0x2e6>
 8003bc8:	2310      	movs	r3, #16
 8003bca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bce:	e106      	b.n	8003dde <UART_SetConfig+0x2e6>
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a7c      	ldr	r2, [pc, #496]	; (8003dc8 <UART_SetConfig+0x2d0>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d138      	bne.n	8003c4c <UART_SetConfig+0x154>
 8003bda:	4b7a      	ldr	r3, [pc, #488]	; (8003dc4 <UART_SetConfig+0x2cc>)
 8003bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be0:	f003 030c 	and.w	r3, r3, #12
 8003be4:	2b0c      	cmp	r3, #12
 8003be6:	d82d      	bhi.n	8003c44 <UART_SetConfig+0x14c>
 8003be8:	a201      	add	r2, pc, #4	; (adr r2, 8003bf0 <UART_SetConfig+0xf8>)
 8003bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bee:	bf00      	nop
 8003bf0:	08003c25 	.word	0x08003c25
 8003bf4:	08003c45 	.word	0x08003c45
 8003bf8:	08003c45 	.word	0x08003c45
 8003bfc:	08003c45 	.word	0x08003c45
 8003c00:	08003c35 	.word	0x08003c35
 8003c04:	08003c45 	.word	0x08003c45
 8003c08:	08003c45 	.word	0x08003c45
 8003c0c:	08003c45 	.word	0x08003c45
 8003c10:	08003c2d 	.word	0x08003c2d
 8003c14:	08003c45 	.word	0x08003c45
 8003c18:	08003c45 	.word	0x08003c45
 8003c1c:	08003c45 	.word	0x08003c45
 8003c20:	08003c3d 	.word	0x08003c3d
 8003c24:	2300      	movs	r3, #0
 8003c26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c2a:	e0d8      	b.n	8003dde <UART_SetConfig+0x2e6>
 8003c2c:	2302      	movs	r3, #2
 8003c2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c32:	e0d4      	b.n	8003dde <UART_SetConfig+0x2e6>
 8003c34:	2304      	movs	r3, #4
 8003c36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c3a:	e0d0      	b.n	8003dde <UART_SetConfig+0x2e6>
 8003c3c:	2308      	movs	r3, #8
 8003c3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c42:	e0cc      	b.n	8003dde <UART_SetConfig+0x2e6>
 8003c44:	2310      	movs	r3, #16
 8003c46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c4a:	e0c8      	b.n	8003dde <UART_SetConfig+0x2e6>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a5e      	ldr	r2, [pc, #376]	; (8003dcc <UART_SetConfig+0x2d4>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d125      	bne.n	8003ca2 <UART_SetConfig+0x1aa>
 8003c56:	4b5b      	ldr	r3, [pc, #364]	; (8003dc4 <UART_SetConfig+0x2cc>)
 8003c58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c5c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c60:	2b30      	cmp	r3, #48	; 0x30
 8003c62:	d016      	beq.n	8003c92 <UART_SetConfig+0x19a>
 8003c64:	2b30      	cmp	r3, #48	; 0x30
 8003c66:	d818      	bhi.n	8003c9a <UART_SetConfig+0x1a2>
 8003c68:	2b20      	cmp	r3, #32
 8003c6a:	d00a      	beq.n	8003c82 <UART_SetConfig+0x18a>
 8003c6c:	2b20      	cmp	r3, #32
 8003c6e:	d814      	bhi.n	8003c9a <UART_SetConfig+0x1a2>
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d002      	beq.n	8003c7a <UART_SetConfig+0x182>
 8003c74:	2b10      	cmp	r3, #16
 8003c76:	d008      	beq.n	8003c8a <UART_SetConfig+0x192>
 8003c78:	e00f      	b.n	8003c9a <UART_SetConfig+0x1a2>
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c80:	e0ad      	b.n	8003dde <UART_SetConfig+0x2e6>
 8003c82:	2302      	movs	r3, #2
 8003c84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c88:	e0a9      	b.n	8003dde <UART_SetConfig+0x2e6>
 8003c8a:	2304      	movs	r3, #4
 8003c8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c90:	e0a5      	b.n	8003dde <UART_SetConfig+0x2e6>
 8003c92:	2308      	movs	r3, #8
 8003c94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c98:	e0a1      	b.n	8003dde <UART_SetConfig+0x2e6>
 8003c9a:	2310      	movs	r3, #16
 8003c9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ca0:	e09d      	b.n	8003dde <UART_SetConfig+0x2e6>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a4a      	ldr	r2, [pc, #296]	; (8003dd0 <UART_SetConfig+0x2d8>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d125      	bne.n	8003cf8 <UART_SetConfig+0x200>
 8003cac:	4b45      	ldr	r3, [pc, #276]	; (8003dc4 <UART_SetConfig+0x2cc>)
 8003cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003cb6:	2bc0      	cmp	r3, #192	; 0xc0
 8003cb8:	d016      	beq.n	8003ce8 <UART_SetConfig+0x1f0>
 8003cba:	2bc0      	cmp	r3, #192	; 0xc0
 8003cbc:	d818      	bhi.n	8003cf0 <UART_SetConfig+0x1f8>
 8003cbe:	2b80      	cmp	r3, #128	; 0x80
 8003cc0:	d00a      	beq.n	8003cd8 <UART_SetConfig+0x1e0>
 8003cc2:	2b80      	cmp	r3, #128	; 0x80
 8003cc4:	d814      	bhi.n	8003cf0 <UART_SetConfig+0x1f8>
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d002      	beq.n	8003cd0 <UART_SetConfig+0x1d8>
 8003cca:	2b40      	cmp	r3, #64	; 0x40
 8003ccc:	d008      	beq.n	8003ce0 <UART_SetConfig+0x1e8>
 8003cce:	e00f      	b.n	8003cf0 <UART_SetConfig+0x1f8>
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cd6:	e082      	b.n	8003dde <UART_SetConfig+0x2e6>
 8003cd8:	2302      	movs	r3, #2
 8003cda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cde:	e07e      	b.n	8003dde <UART_SetConfig+0x2e6>
 8003ce0:	2304      	movs	r3, #4
 8003ce2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ce6:	e07a      	b.n	8003dde <UART_SetConfig+0x2e6>
 8003ce8:	2308      	movs	r3, #8
 8003cea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cee:	e076      	b.n	8003dde <UART_SetConfig+0x2e6>
 8003cf0:	2310      	movs	r3, #16
 8003cf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cf6:	e072      	b.n	8003dde <UART_SetConfig+0x2e6>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a35      	ldr	r2, [pc, #212]	; (8003dd4 <UART_SetConfig+0x2dc>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d12a      	bne.n	8003d58 <UART_SetConfig+0x260>
 8003d02:	4b30      	ldr	r3, [pc, #192]	; (8003dc4 <UART_SetConfig+0x2cc>)
 8003d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d08:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d10:	d01a      	beq.n	8003d48 <UART_SetConfig+0x250>
 8003d12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d16:	d81b      	bhi.n	8003d50 <UART_SetConfig+0x258>
 8003d18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d1c:	d00c      	beq.n	8003d38 <UART_SetConfig+0x240>
 8003d1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d22:	d815      	bhi.n	8003d50 <UART_SetConfig+0x258>
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d003      	beq.n	8003d30 <UART_SetConfig+0x238>
 8003d28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d2c:	d008      	beq.n	8003d40 <UART_SetConfig+0x248>
 8003d2e:	e00f      	b.n	8003d50 <UART_SetConfig+0x258>
 8003d30:	2300      	movs	r3, #0
 8003d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d36:	e052      	b.n	8003dde <UART_SetConfig+0x2e6>
 8003d38:	2302      	movs	r3, #2
 8003d3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d3e:	e04e      	b.n	8003dde <UART_SetConfig+0x2e6>
 8003d40:	2304      	movs	r3, #4
 8003d42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d46:	e04a      	b.n	8003dde <UART_SetConfig+0x2e6>
 8003d48:	2308      	movs	r3, #8
 8003d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d4e:	e046      	b.n	8003dde <UART_SetConfig+0x2e6>
 8003d50:	2310      	movs	r3, #16
 8003d52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d56:	e042      	b.n	8003dde <UART_SetConfig+0x2e6>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a17      	ldr	r2, [pc, #92]	; (8003dbc <UART_SetConfig+0x2c4>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d13a      	bne.n	8003dd8 <UART_SetConfig+0x2e0>
 8003d62:	4b18      	ldr	r3, [pc, #96]	; (8003dc4 <UART_SetConfig+0x2cc>)
 8003d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d68:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d70:	d01a      	beq.n	8003da8 <UART_SetConfig+0x2b0>
 8003d72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d76:	d81b      	bhi.n	8003db0 <UART_SetConfig+0x2b8>
 8003d78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d7c:	d00c      	beq.n	8003d98 <UART_SetConfig+0x2a0>
 8003d7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d82:	d815      	bhi.n	8003db0 <UART_SetConfig+0x2b8>
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d003      	beq.n	8003d90 <UART_SetConfig+0x298>
 8003d88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d8c:	d008      	beq.n	8003da0 <UART_SetConfig+0x2a8>
 8003d8e:	e00f      	b.n	8003db0 <UART_SetConfig+0x2b8>
 8003d90:	2300      	movs	r3, #0
 8003d92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d96:	e022      	b.n	8003dde <UART_SetConfig+0x2e6>
 8003d98:	2302      	movs	r3, #2
 8003d9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d9e:	e01e      	b.n	8003dde <UART_SetConfig+0x2e6>
 8003da0:	2304      	movs	r3, #4
 8003da2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003da6:	e01a      	b.n	8003dde <UART_SetConfig+0x2e6>
 8003da8:	2308      	movs	r3, #8
 8003daa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dae:	e016      	b.n	8003dde <UART_SetConfig+0x2e6>
 8003db0:	2310      	movs	r3, #16
 8003db2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003db6:	e012      	b.n	8003dde <UART_SetConfig+0x2e6>
 8003db8:	efff69f3 	.word	0xefff69f3
 8003dbc:	40008000 	.word	0x40008000
 8003dc0:	40013800 	.word	0x40013800
 8003dc4:	40021000 	.word	0x40021000
 8003dc8:	40004400 	.word	0x40004400
 8003dcc:	40004800 	.word	0x40004800
 8003dd0:	40004c00 	.word	0x40004c00
 8003dd4:	40005000 	.word	0x40005000
 8003dd8:	2310      	movs	r3, #16
 8003dda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a9f      	ldr	r2, [pc, #636]	; (8004060 <UART_SetConfig+0x568>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d17a      	bne.n	8003ede <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003de8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003dec:	2b08      	cmp	r3, #8
 8003dee:	d824      	bhi.n	8003e3a <UART_SetConfig+0x342>
 8003df0:	a201      	add	r2, pc, #4	; (adr r2, 8003df8 <UART_SetConfig+0x300>)
 8003df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003df6:	bf00      	nop
 8003df8:	08003e1d 	.word	0x08003e1d
 8003dfc:	08003e3b 	.word	0x08003e3b
 8003e00:	08003e25 	.word	0x08003e25
 8003e04:	08003e3b 	.word	0x08003e3b
 8003e08:	08003e2b 	.word	0x08003e2b
 8003e0c:	08003e3b 	.word	0x08003e3b
 8003e10:	08003e3b 	.word	0x08003e3b
 8003e14:	08003e3b 	.word	0x08003e3b
 8003e18:	08003e33 	.word	0x08003e33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e1c:	f7ff f822 	bl	8002e64 <HAL_RCC_GetPCLK1Freq>
 8003e20:	61f8      	str	r0, [r7, #28]
        break;
 8003e22:	e010      	b.n	8003e46 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e24:	4b8f      	ldr	r3, [pc, #572]	; (8004064 <UART_SetConfig+0x56c>)
 8003e26:	61fb      	str	r3, [r7, #28]
        break;
 8003e28:	e00d      	b.n	8003e46 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e2a:	f7fe ff83 	bl	8002d34 <HAL_RCC_GetSysClockFreq>
 8003e2e:	61f8      	str	r0, [r7, #28]
        break;
 8003e30:	e009      	b.n	8003e46 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e36:	61fb      	str	r3, [r7, #28]
        break;
 8003e38:	e005      	b.n	8003e46 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003e44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	f000 80fb 	beq.w	8004044 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	685a      	ldr	r2, [r3, #4]
 8003e52:	4613      	mov	r3, r2
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	4413      	add	r3, r2
 8003e58:	69fa      	ldr	r2, [r7, #28]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d305      	bcc.n	8003e6a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e64:	69fa      	ldr	r2, [r7, #28]
 8003e66:	429a      	cmp	r2, r3
 8003e68:	d903      	bls.n	8003e72 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003e70:	e0e8      	b.n	8004044 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	2200      	movs	r2, #0
 8003e76:	461c      	mov	r4, r3
 8003e78:	4615      	mov	r5, r2
 8003e7a:	f04f 0200 	mov.w	r2, #0
 8003e7e:	f04f 0300 	mov.w	r3, #0
 8003e82:	022b      	lsls	r3, r5, #8
 8003e84:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003e88:	0222      	lsls	r2, r4, #8
 8003e8a:	68f9      	ldr	r1, [r7, #12]
 8003e8c:	6849      	ldr	r1, [r1, #4]
 8003e8e:	0849      	lsrs	r1, r1, #1
 8003e90:	2000      	movs	r0, #0
 8003e92:	4688      	mov	r8, r1
 8003e94:	4681      	mov	r9, r0
 8003e96:	eb12 0a08 	adds.w	sl, r2, r8
 8003e9a:	eb43 0b09 	adc.w	fp, r3, r9
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	603b      	str	r3, [r7, #0]
 8003ea6:	607a      	str	r2, [r7, #4]
 8003ea8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003eac:	4650      	mov	r0, sl
 8003eae:	4659      	mov	r1, fp
 8003eb0:	f7fc f98a 	bl	80001c8 <__aeabi_uldivmod>
 8003eb4:	4602      	mov	r2, r0
 8003eb6:	460b      	mov	r3, r1
 8003eb8:	4613      	mov	r3, r2
 8003eba:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ebc:	69bb      	ldr	r3, [r7, #24]
 8003ebe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ec2:	d308      	bcc.n	8003ed6 <UART_SetConfig+0x3de>
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003eca:	d204      	bcs.n	8003ed6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	60da      	str	r2, [r3, #12]
 8003ed4:	e0b6      	b.n	8004044 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003edc:	e0b2      	b.n	8004044 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	69db      	ldr	r3, [r3, #28]
 8003ee2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ee6:	d15e      	bne.n	8003fa6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003ee8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003eec:	2b08      	cmp	r3, #8
 8003eee:	d828      	bhi.n	8003f42 <UART_SetConfig+0x44a>
 8003ef0:	a201      	add	r2, pc, #4	; (adr r2, 8003ef8 <UART_SetConfig+0x400>)
 8003ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef6:	bf00      	nop
 8003ef8:	08003f1d 	.word	0x08003f1d
 8003efc:	08003f25 	.word	0x08003f25
 8003f00:	08003f2d 	.word	0x08003f2d
 8003f04:	08003f43 	.word	0x08003f43
 8003f08:	08003f33 	.word	0x08003f33
 8003f0c:	08003f43 	.word	0x08003f43
 8003f10:	08003f43 	.word	0x08003f43
 8003f14:	08003f43 	.word	0x08003f43
 8003f18:	08003f3b 	.word	0x08003f3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f1c:	f7fe ffa2 	bl	8002e64 <HAL_RCC_GetPCLK1Freq>
 8003f20:	61f8      	str	r0, [r7, #28]
        break;
 8003f22:	e014      	b.n	8003f4e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f24:	f7fe ffb4 	bl	8002e90 <HAL_RCC_GetPCLK2Freq>
 8003f28:	61f8      	str	r0, [r7, #28]
        break;
 8003f2a:	e010      	b.n	8003f4e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f2c:	4b4d      	ldr	r3, [pc, #308]	; (8004064 <UART_SetConfig+0x56c>)
 8003f2e:	61fb      	str	r3, [r7, #28]
        break;
 8003f30:	e00d      	b.n	8003f4e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f32:	f7fe feff 	bl	8002d34 <HAL_RCC_GetSysClockFreq>
 8003f36:	61f8      	str	r0, [r7, #28]
        break;
 8003f38:	e009      	b.n	8003f4e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f3e:	61fb      	str	r3, [r7, #28]
        break;
 8003f40:	e005      	b.n	8003f4e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003f42:	2300      	movs	r3, #0
 8003f44:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003f4c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d077      	beq.n	8004044 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	005a      	lsls	r2, r3, #1
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	085b      	lsrs	r3, r3, #1
 8003f5e:	441a      	add	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f68:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	2b0f      	cmp	r3, #15
 8003f6e:	d916      	bls.n	8003f9e <UART_SetConfig+0x4a6>
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f76:	d212      	bcs.n	8003f9e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	b29b      	uxth	r3, r3
 8003f7c:	f023 030f 	bic.w	r3, r3, #15
 8003f80:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	085b      	lsrs	r3, r3, #1
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	f003 0307 	and.w	r3, r3, #7
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	8afb      	ldrh	r3, [r7, #22]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	8afa      	ldrh	r2, [r7, #22]
 8003f9a:	60da      	str	r2, [r3, #12]
 8003f9c:	e052      	b.n	8004044 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003fa4:	e04e      	b.n	8004044 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003fa6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003faa:	2b08      	cmp	r3, #8
 8003fac:	d827      	bhi.n	8003ffe <UART_SetConfig+0x506>
 8003fae:	a201      	add	r2, pc, #4	; (adr r2, 8003fb4 <UART_SetConfig+0x4bc>)
 8003fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb4:	08003fd9 	.word	0x08003fd9
 8003fb8:	08003fe1 	.word	0x08003fe1
 8003fbc:	08003fe9 	.word	0x08003fe9
 8003fc0:	08003fff 	.word	0x08003fff
 8003fc4:	08003fef 	.word	0x08003fef
 8003fc8:	08003fff 	.word	0x08003fff
 8003fcc:	08003fff 	.word	0x08003fff
 8003fd0:	08003fff 	.word	0x08003fff
 8003fd4:	08003ff7 	.word	0x08003ff7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fd8:	f7fe ff44 	bl	8002e64 <HAL_RCC_GetPCLK1Freq>
 8003fdc:	61f8      	str	r0, [r7, #28]
        break;
 8003fde:	e014      	b.n	800400a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fe0:	f7fe ff56 	bl	8002e90 <HAL_RCC_GetPCLK2Freq>
 8003fe4:	61f8      	str	r0, [r7, #28]
        break;
 8003fe6:	e010      	b.n	800400a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fe8:	4b1e      	ldr	r3, [pc, #120]	; (8004064 <UART_SetConfig+0x56c>)
 8003fea:	61fb      	str	r3, [r7, #28]
        break;
 8003fec:	e00d      	b.n	800400a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fee:	f7fe fea1 	bl	8002d34 <HAL_RCC_GetSysClockFreq>
 8003ff2:	61f8      	str	r0, [r7, #28]
        break;
 8003ff4:	e009      	b.n	800400a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ffa:	61fb      	str	r3, [r7, #28]
        break;
 8003ffc:	e005      	b.n	800400a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003ffe:	2300      	movs	r3, #0
 8004000:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004008:	bf00      	nop
    }

    if (pclk != 0U)
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d019      	beq.n	8004044 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	085a      	lsrs	r2, r3, #1
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	441a      	add	r2, r3
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004022:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004024:	69bb      	ldr	r3, [r7, #24]
 8004026:	2b0f      	cmp	r3, #15
 8004028:	d909      	bls.n	800403e <UART_SetConfig+0x546>
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004030:	d205      	bcs.n	800403e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	b29a      	uxth	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	60da      	str	r2, [r3, #12]
 800403c:	e002      	b.n	8004044 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	2200      	movs	r2, #0
 800404e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004050:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004054:	4618      	mov	r0, r3
 8004056:	3728      	adds	r7, #40	; 0x28
 8004058:	46bd      	mov	sp, r7
 800405a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800405e:	bf00      	nop
 8004060:	40008000 	.word	0x40008000
 8004064:	00f42400 	.word	0x00f42400

08004068 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004068:	b480      	push	{r7}
 800406a:	b083      	sub	sp, #12
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	f003 0308 	and.w	r3, r3, #8
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00a      	beq.n	8004092 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00a      	beq.n	80040b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b8:	f003 0302 	and.w	r3, r3, #2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00a      	beq.n	80040d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	430a      	orrs	r2, r1
 80040d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040da:	f003 0304 	and.w	r3, r3, #4
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00a      	beq.n	80040f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	685b      	ldr	r3, [r3, #4]
 80040e8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	430a      	orrs	r2, r1
 80040f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fc:	f003 0310 	and.w	r3, r3, #16
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00a      	beq.n	800411a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	430a      	orrs	r2, r1
 8004118:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411e:	f003 0320 	and.w	r3, r3, #32
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00a      	beq.n	800413c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	430a      	orrs	r2, r1
 800413a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004144:	2b00      	cmp	r3, #0
 8004146:	d01a      	beq.n	800417e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	430a      	orrs	r2, r1
 800415c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004162:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004166:	d10a      	bne.n	800417e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	430a      	orrs	r2, r1
 800417c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004182:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004186:	2b00      	cmp	r3, #0
 8004188:	d00a      	beq.n	80041a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	430a      	orrs	r2, r1
 800419e:	605a      	str	r2, [r3, #4]
  }
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b098      	sub	sp, #96	; 0x60
 80041b0:	af02      	add	r7, sp, #8
 80041b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80041bc:	f7fd f8d6 	bl	800136c <HAL_GetTick>
 80041c0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 0308 	and.w	r3, r3, #8
 80041cc:	2b08      	cmp	r3, #8
 80041ce:	d12e      	bne.n	800422e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041d8:	2200      	movs	r2, #0
 80041da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f88c 	bl	80042fc <UART_WaitOnFlagUntilTimeout>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d021      	beq.n	800422e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f2:	e853 3f00 	ldrex	r3, [r3]
 80041f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80041f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041fe:	653b      	str	r3, [r7, #80]	; 0x50
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	461a      	mov	r2, r3
 8004206:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004208:	647b      	str	r3, [r7, #68]	; 0x44
 800420a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800420e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004210:	e841 2300 	strex	r3, r2, [r1]
 8004214:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1e6      	bne.n	80041ea <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2220      	movs	r2, #32
 8004220:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800422a:	2303      	movs	r3, #3
 800422c:	e062      	b.n	80042f4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0304 	and.w	r3, r3, #4
 8004238:	2b04      	cmp	r3, #4
 800423a:	d149      	bne.n	80042d0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800423c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004240:	9300      	str	r3, [sp, #0]
 8004242:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004244:	2200      	movs	r2, #0
 8004246:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 f856 	bl	80042fc <UART_WaitOnFlagUntilTimeout>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d03c      	beq.n	80042d0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425e:	e853 3f00 	ldrex	r3, [r3]
 8004262:	623b      	str	r3, [r7, #32]
   return(result);
 8004264:	6a3b      	ldr	r3, [r7, #32]
 8004266:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800426a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	461a      	mov	r2, r3
 8004272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004274:	633b      	str	r3, [r7, #48]	; 0x30
 8004276:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004278:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800427a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800427c:	e841 2300 	strex	r3, r2, [r1]
 8004280:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1e6      	bne.n	8004256 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	3308      	adds	r3, #8
 800428e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	e853 3f00 	ldrex	r3, [r3]
 8004296:	60fb      	str	r3, [r7, #12]
   return(result);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f023 0301 	bic.w	r3, r3, #1
 800429e:	64bb      	str	r3, [r7, #72]	; 0x48
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	3308      	adds	r3, #8
 80042a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042a8:	61fa      	str	r2, [r7, #28]
 80042aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ac:	69b9      	ldr	r1, [r7, #24]
 80042ae:	69fa      	ldr	r2, [r7, #28]
 80042b0:	e841 2300 	strex	r3, r2, [r1]
 80042b4:	617b      	str	r3, [r7, #20]
   return(result);
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d1e5      	bne.n	8004288 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2220      	movs	r2, #32
 80042c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e011      	b.n	80042f4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2220      	movs	r2, #32
 80042d4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2220      	movs	r2, #32
 80042da:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3758      	adds	r7, #88	; 0x58
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	603b      	str	r3, [r7, #0]
 8004308:	4613      	mov	r3, r2
 800430a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800430c:	e049      	b.n	80043a2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004314:	d045      	beq.n	80043a2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004316:	f7fd f829 	bl	800136c <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	429a      	cmp	r2, r3
 8004324:	d302      	bcc.n	800432c <UART_WaitOnFlagUntilTimeout+0x30>
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d101      	bne.n	8004330 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e048      	b.n	80043c2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0304 	and.w	r3, r3, #4
 800433a:	2b00      	cmp	r3, #0
 800433c:	d031      	beq.n	80043a2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	69db      	ldr	r3, [r3, #28]
 8004344:	f003 0308 	and.w	r3, r3, #8
 8004348:	2b08      	cmp	r3, #8
 800434a:	d110      	bne.n	800436e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2208      	movs	r2, #8
 8004352:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004354:	68f8      	ldr	r0, [r7, #12]
 8004356:	f000 f838 	bl	80043ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2208      	movs	r2, #8
 800435e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e029      	b.n	80043c2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	69db      	ldr	r3, [r3, #28]
 8004374:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004378:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800437c:	d111      	bne.n	80043a2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004386:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f000 f81e 	bl	80043ca <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2220      	movs	r2, #32
 8004392:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2200      	movs	r2, #0
 800439a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e00f      	b.n	80043c2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	69da      	ldr	r2, [r3, #28]
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	4013      	ands	r3, r2
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	bf0c      	ite	eq
 80043b2:	2301      	moveq	r3, #1
 80043b4:	2300      	movne	r3, #0
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	461a      	mov	r2, r3
 80043ba:	79fb      	ldrb	r3, [r7, #7]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d0a6      	beq.n	800430e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3710      	adds	r7, #16
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043ca:	b480      	push	{r7}
 80043cc:	b095      	sub	sp, #84	; 0x54
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043da:	e853 3f00 	ldrex	r3, [r3]
 80043de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80043e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	461a      	mov	r2, r3
 80043ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043f0:	643b      	str	r3, [r7, #64]	; 0x40
 80043f2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80043f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80043f8:	e841 2300 	strex	r3, r2, [r1]
 80043fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80043fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1e6      	bne.n	80043d2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	3308      	adds	r3, #8
 800440a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440c:	6a3b      	ldr	r3, [r7, #32]
 800440e:	e853 3f00 	ldrex	r3, [r3]
 8004412:	61fb      	str	r3, [r7, #28]
   return(result);
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	f023 0301 	bic.w	r3, r3, #1
 800441a:	64bb      	str	r3, [r7, #72]	; 0x48
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	3308      	adds	r3, #8
 8004422:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004424:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004426:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004428:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800442a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800442c:	e841 2300 	strex	r3, r2, [r1]
 8004430:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1e5      	bne.n	8004404 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800443c:	2b01      	cmp	r3, #1
 800443e:	d118      	bne.n	8004472 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	e853 3f00 	ldrex	r3, [r3]
 800444c:	60bb      	str	r3, [r7, #8]
   return(result);
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	f023 0310 	bic.w	r3, r3, #16
 8004454:	647b      	str	r3, [r7, #68]	; 0x44
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	461a      	mov	r2, r3
 800445c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800445e:	61bb      	str	r3, [r7, #24]
 8004460:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004462:	6979      	ldr	r1, [r7, #20]
 8004464:	69ba      	ldr	r2, [r7, #24]
 8004466:	e841 2300 	strex	r3, r2, [r1]
 800446a:	613b      	str	r3, [r7, #16]
   return(result);
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1e6      	bne.n	8004440 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2220      	movs	r2, #32
 8004476:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004486:	bf00      	nop
 8004488:	3754      	adds	r7, #84	; 0x54
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr

08004492 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004492:	b084      	sub	sp, #16
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	f107 001c 	add.w	r0, r7, #28
 80044a0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80044b0:	6878      	ldr	r0, [r7, #4]
 80044b2:	f000 fa65 	bl	8004980 <USB_CoreReset>
 80044b6:	4603      	mov	r3, r0
 80044b8:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80044ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d106      	bne.n	80044ce <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	639a      	str	r2, [r3, #56]	; 0x38
 80044cc:	e005      	b.n	80044da <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80044da:	7bfb      	ldrb	r3, [r7, #15]
}
 80044dc:	4618      	mov	r0, r3
 80044de:	3710      	adds	r7, #16
 80044e0:	46bd      	mov	sp, r7
 80044e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044e6:	b004      	add	sp, #16
 80044e8:	4770      	bx	lr

080044ea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80044ea:	b480      	push	{r7}
 80044ec:	b083      	sub	sp, #12
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f023 0201 	bic.w	r2, r3, #1
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	460b      	mov	r3, r1
 8004516:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004518:	2300      	movs	r3, #0
 800451a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004528:	78fb      	ldrb	r3, [r7, #3]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d115      	bne.n	800455a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800453a:	2001      	movs	r0, #1
 800453c:	f7fc ff22 	bl	8001384 <HAL_Delay>
      ms++;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	3301      	adds	r3, #1
 8004544:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 fa0c 	bl	8004964 <USB_GetMode>
 800454c:	4603      	mov	r3, r0
 800454e:	2b01      	cmp	r3, #1
 8004550:	d01e      	beq.n	8004590 <USB_SetCurrentMode+0x84>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2b31      	cmp	r3, #49	; 0x31
 8004556:	d9f0      	bls.n	800453a <USB_SetCurrentMode+0x2e>
 8004558:	e01a      	b.n	8004590 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800455a:	78fb      	ldrb	r3, [r7, #3]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d115      	bne.n	800458c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800456c:	2001      	movs	r0, #1
 800456e:	f7fc ff09 	bl	8001384 <HAL_Delay>
      ms++;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	3301      	adds	r3, #1
 8004576:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 f9f3 	bl	8004964 <USB_GetMode>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	d005      	beq.n	8004590 <USB_SetCurrentMode+0x84>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2b31      	cmp	r3, #49	; 0x31
 8004588:	d9f0      	bls.n	800456c <USB_SetCurrentMode+0x60>
 800458a:	e001      	b.n	8004590 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	e005      	b.n	800459c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2b32      	cmp	r3, #50	; 0x32
 8004594:	d101      	bne.n	800459a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e000      	b.n	800459c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	3710      	adds	r7, #16
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80045a4:	b084      	sub	sp, #16
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b086      	sub	sp, #24
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	6078      	str	r0, [r7, #4]
 80045ae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80045b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80045b6:	2300      	movs	r3, #0
 80045b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80045be:	2300      	movs	r3, #0
 80045c0:	613b      	str	r3, [r7, #16]
 80045c2:	e009      	b.n	80045d8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	3340      	adds	r3, #64	; 0x40
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	4413      	add	r3, r2
 80045ce:	2200      	movs	r2, #0
 80045d0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	3301      	adds	r3, #1
 80045d6:	613b      	str	r3, [r7, #16]
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	2b0e      	cmp	r3, #14
 80045dc:	d9f2      	bls.n	80045c4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80045de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d11c      	bne.n	800461e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	68fa      	ldr	r2, [r7, #12]
 80045ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045f2:	f043 0302 	orr.w	r3, r3, #2
 80045f6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	601a      	str	r2, [r3, #0]
 800461c:	e005      	b.n	800462a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004622:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004630:	461a      	mov	r2, r3
 8004632:	2300      	movs	r3, #0
 8004634:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004636:	2103      	movs	r1, #3
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f000 f959 	bl	80048f0 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800463e:	2110      	movs	r1, #16
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 f8f1 	bl	8004828 <USB_FlushTxFifo>
 8004646:	4603      	mov	r3, r0
 8004648:	2b00      	cmp	r3, #0
 800464a:	d001      	beq.n	8004650 <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 f91d 	bl	8004890 <USB_FlushRxFifo>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d001      	beq.n	8004660 <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004666:	461a      	mov	r2, r3
 8004668:	2300      	movs	r3, #0
 800466a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004672:	461a      	mov	r2, r3
 8004674:	2300      	movs	r3, #0
 8004676:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800467e:	461a      	mov	r2, r3
 8004680:	2300      	movs	r3, #0
 8004682:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004684:	2300      	movs	r3, #0
 8004686:	613b      	str	r3, [r7, #16]
 8004688:	e043      	b.n	8004712 <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	015a      	lsls	r2, r3, #5
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	4413      	add	r3, r2
 8004692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800469c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046a0:	d118      	bne.n	80046d4 <USB_DevInit+0x130>
    {
      if (i == 0U)
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d10a      	bne.n	80046be <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	015a      	lsls	r2, r3, #5
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	4413      	add	r3, r2
 80046b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046b4:	461a      	mov	r2, r3
 80046b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80046ba:	6013      	str	r3, [r2, #0]
 80046bc:	e013      	b.n	80046e6 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	015a      	lsls	r2, r3, #5
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	4413      	add	r3, r2
 80046c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ca:	461a      	mov	r2, r3
 80046cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80046d0:	6013      	str	r3, [r2, #0]
 80046d2:	e008      	b.n	80046e6 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	015a      	lsls	r2, r3, #5
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	4413      	add	r3, r2
 80046dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046e0:	461a      	mov	r2, r3
 80046e2:	2300      	movs	r3, #0
 80046e4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	015a      	lsls	r2, r3, #5
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	4413      	add	r3, r2
 80046ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046f2:	461a      	mov	r2, r3
 80046f4:	2300      	movs	r3, #0
 80046f6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	015a      	lsls	r2, r3, #5
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4413      	add	r3, r2
 8004700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004704:	461a      	mov	r2, r3
 8004706:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800470a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	3301      	adds	r3, #1
 8004710:	613b      	str	r3, [r7, #16]
 8004712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	429a      	cmp	r2, r3
 8004718:	d3b7      	bcc.n	800468a <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800471a:	2300      	movs	r3, #0
 800471c:	613b      	str	r3, [r7, #16]
 800471e:	e043      	b.n	80047a8 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	015a      	lsls	r2, r3, #5
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	4413      	add	r3, r2
 8004728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004732:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004736:	d118      	bne.n	800476a <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10a      	bne.n	8004754 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800473e:	693b      	ldr	r3, [r7, #16]
 8004740:	015a      	lsls	r2, r3, #5
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	4413      	add	r3, r2
 8004746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800474a:	461a      	mov	r2, r3
 800474c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004750:	6013      	str	r3, [r2, #0]
 8004752:	e013      	b.n	800477c <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004754:	693b      	ldr	r3, [r7, #16]
 8004756:	015a      	lsls	r2, r3, #5
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	4413      	add	r3, r2
 800475c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004760:	461a      	mov	r2, r3
 8004762:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004766:	6013      	str	r3, [r2, #0]
 8004768:	e008      	b.n	800477c <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	015a      	lsls	r2, r3, #5
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	4413      	add	r3, r2
 8004772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004776:	461a      	mov	r2, r3
 8004778:	2300      	movs	r3, #0
 800477a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	015a      	lsls	r2, r3, #5
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	4413      	add	r3, r2
 8004784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004788:	461a      	mov	r2, r3
 800478a:	2300      	movs	r3, #0
 800478c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	015a      	lsls	r2, r3, #5
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	4413      	add	r3, r2
 8004796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800479a:	461a      	mov	r2, r3
 800479c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80047a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	3301      	adds	r3, #1
 80047a6:	613b      	str	r3, [r7, #16]
 80047a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047aa:	693a      	ldr	r2, [r7, #16]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d3b7      	bcc.n	8004720 <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047c2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80047d0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	f043 0210 	orr.w	r2, r3, #16
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	699a      	ldr	r2, [r3, #24]
 80047e2:	4b10      	ldr	r3, [pc, #64]	; (8004824 <USB_DevInit+0x280>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80047ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d005      	beq.n	80047fc <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	699b      	ldr	r3, [r3, #24]
 80047f4:	f043 0208 	orr.w	r2, r3, #8
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80047fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d107      	bne.n	8004812 <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	699b      	ldr	r3, [r3, #24]
 8004806:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800480a:	f043 0304 	orr.w	r3, r3, #4
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004812:	7dfb      	ldrb	r3, [r7, #23]
}
 8004814:	4618      	mov	r0, r3
 8004816:	3718      	adds	r7, #24
 8004818:	46bd      	mov	sp, r7
 800481a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800481e:	b004      	add	sp, #16
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	803c3800 	.word	0x803c3800

08004828 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004832:	2300      	movs	r3, #0
 8004834:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	3301      	adds	r3, #1
 800483a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	4a13      	ldr	r2, [pc, #76]	; (800488c <USB_FlushTxFifo+0x64>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d901      	bls.n	8004848 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	e01b      	b.n	8004880 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	2b00      	cmp	r3, #0
 800484e:	daf2      	bge.n	8004836 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004850:	2300      	movs	r3, #0
 8004852:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	019b      	lsls	r3, r3, #6
 8004858:	f043 0220 	orr.w	r2, r3, #32
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	3301      	adds	r3, #1
 8004864:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	4a08      	ldr	r2, [pc, #32]	; (800488c <USB_FlushTxFifo+0x64>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d901      	bls.n	8004872 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e006      	b.n	8004880 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	f003 0320 	and.w	r3, r3, #32
 800487a:	2b20      	cmp	r3, #32
 800487c:	d0f0      	beq.n	8004860 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3714      	adds	r7, #20
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr
 800488c:	00030d40 	.word	0x00030d40

08004890 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004898:	2300      	movs	r3, #0
 800489a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	3301      	adds	r3, #1
 80048a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	4a11      	ldr	r2, [pc, #68]	; (80048ec <USB_FlushRxFifo+0x5c>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d901      	bls.n	80048ae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e018      	b.n	80048e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	daf2      	bge.n	800489c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80048b6:	2300      	movs	r3, #0
 80048b8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2210      	movs	r2, #16
 80048be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	3301      	adds	r3, #1
 80048c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	4a08      	ldr	r2, [pc, #32]	; (80048ec <USB_FlushRxFifo+0x5c>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d901      	bls.n	80048d2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e006      	b.n	80048e0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	f003 0310 	and.w	r3, r3, #16
 80048da:	2b10      	cmp	r3, #16
 80048dc:	d0f0      	beq.n	80048c0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3714      	adds	r7, #20
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr
 80048ec:	00030d40 	.word	0x00030d40

080048f0 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	460b      	mov	r3, r1
 80048fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	78fb      	ldrb	r3, [r7, #3]
 800490a:	68f9      	ldr	r1, [r7, #12]
 800490c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004910:	4313      	orrs	r3, r2
 8004912:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3714      	adds	r7, #20
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr

08004922 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004922:	b480      	push	{r7}
 8004924:	b085      	sub	sp, #20
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	68fa      	ldr	r2, [r7, #12]
 8004938:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800493c:	f023 0303 	bic.w	r3, r3, #3
 8004940:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	68fa      	ldr	r2, [r7, #12]
 800494c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004950:	f043 0302 	orr.w	r3, r3, #2
 8004954:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3714      	adds	r7, #20
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	f003 0301 	and.w	r3, r3, #1
}
 8004974:	4618      	mov	r0, r3
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004988:	2300      	movs	r3, #0
 800498a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	3301      	adds	r3, #1
 8004990:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	4a13      	ldr	r2, [pc, #76]	; (80049e4 <USB_CoreReset+0x64>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d901      	bls.n	800499e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e01b      	b.n	80049d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	daf2      	bge.n	800498c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80049a6:	2300      	movs	r3, #0
 80049a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	f043 0201 	orr.w	r2, r3, #1
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	3301      	adds	r3, #1
 80049ba:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	4a09      	ldr	r2, [pc, #36]	; (80049e4 <USB_CoreReset+0x64>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d901      	bls.n	80049c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e006      	b.n	80049d6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d0f0      	beq.n	80049b6 <USB_CoreReset+0x36>

  return HAL_OK;
 80049d4:	2300      	movs	r3, #0
}
 80049d6:	4618      	mov	r0, r3
 80049d8:	3714      	adds	r7, #20
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	00030d40 	.word	0x00030d40

080049e8 <memset>:
 80049e8:	4402      	add	r2, r0
 80049ea:	4603      	mov	r3, r0
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d100      	bne.n	80049f2 <memset+0xa>
 80049f0:	4770      	bx	lr
 80049f2:	f803 1b01 	strb.w	r1, [r3], #1
 80049f6:	e7f9      	b.n	80049ec <memset+0x4>

080049f8 <__libc_init_array>:
 80049f8:	b570      	push	{r4, r5, r6, lr}
 80049fa:	4d0d      	ldr	r5, [pc, #52]	; (8004a30 <__libc_init_array+0x38>)
 80049fc:	4c0d      	ldr	r4, [pc, #52]	; (8004a34 <__libc_init_array+0x3c>)
 80049fe:	1b64      	subs	r4, r4, r5
 8004a00:	10a4      	asrs	r4, r4, #2
 8004a02:	2600      	movs	r6, #0
 8004a04:	42a6      	cmp	r6, r4
 8004a06:	d109      	bne.n	8004a1c <__libc_init_array+0x24>
 8004a08:	4d0b      	ldr	r5, [pc, #44]	; (8004a38 <__libc_init_array+0x40>)
 8004a0a:	4c0c      	ldr	r4, [pc, #48]	; (8004a3c <__libc_init_array+0x44>)
 8004a0c:	f000 f818 	bl	8004a40 <_init>
 8004a10:	1b64      	subs	r4, r4, r5
 8004a12:	10a4      	asrs	r4, r4, #2
 8004a14:	2600      	movs	r6, #0
 8004a16:	42a6      	cmp	r6, r4
 8004a18:	d105      	bne.n	8004a26 <__libc_init_array+0x2e>
 8004a1a:	bd70      	pop	{r4, r5, r6, pc}
 8004a1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a20:	4798      	blx	r3
 8004a22:	3601      	adds	r6, #1
 8004a24:	e7ee      	b.n	8004a04 <__libc_init_array+0xc>
 8004a26:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a2a:	4798      	blx	r3
 8004a2c:	3601      	adds	r6, #1
 8004a2e:	e7f2      	b.n	8004a16 <__libc_init_array+0x1e>
 8004a30:	08004aa8 	.word	0x08004aa8
 8004a34:	08004aa8 	.word	0x08004aa8
 8004a38:	08004aa8 	.word	0x08004aa8
 8004a3c:	08004aac 	.word	0x08004aac

08004a40 <_init>:
 8004a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a42:	bf00      	nop
 8004a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a46:	bc08      	pop	{r3}
 8004a48:	469e      	mov	lr, r3
 8004a4a:	4770      	bx	lr

08004a4c <_fini>:
 8004a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a4e:	bf00      	nop
 8004a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a52:	bc08      	pop	{r3}
 8004a54:	469e      	mov	lr, r3
 8004a56:	4770      	bx	lr

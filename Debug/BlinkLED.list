
BlinkLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049fc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08004b84  08004b84  00014b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004be0  08004be0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004be0  08004be0  00014be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004be8  08004be8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004be8  08004be8  00014be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bec  08004bec  00014bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004bf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000798  2000000c  08004bfc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200007a4  08004bfc  000207a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017197  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002da3  00000000  00000000  00037216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001550  00000000  00000000  00039fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001090  00000000  00000000  0003b510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027265  00000000  00000000  0003c5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018e47  00000000  00000000  00063805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ef972  00000000  00000000  0007c64c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005b90  00000000  00000000  0016bfc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000042  00000000  00000000  00171b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004b6c 	.word	0x08004b6c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004b6c 	.word	0x08004b6c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b5b0      	push	{r4, r5, r7, lr}
 80004c6:	b086      	sub	sp, #24
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ca:	f000 fef2 	bl	80012b2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ce:	f000 f82f 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d2:	f000 f9f9 	bl	80008c8 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 80004d6:	f000 f88d 	bl	80005f4 <MX_DFSDM1_Init>
  MX_I2C2_Init();
 80004da:	f000 f8c3 	bl	8000664 <MX_I2C2_Init>
  MX_QUADSPI_Init();
 80004de:	f000 f901 	bl	80006e4 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 80004e2:	f000 f925 	bl	8000730 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 80004e6:	f000 f961 	bl	80007ac <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80004ea:	f000 f98f 	bl	800080c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80004ee:	f000 f9bd 	bl	800086c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  HAL_GPIO_TogglePin (GPIOB, GPIO_PIN_14);
 80004f2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004f6:	480b      	ldr	r0, [pc, #44]	; (8000524 <main+0x60>)
 80004f8:	f001 fb54 	bl	8001ba4 <HAL_GPIO_TogglePin>
	  HAL_Delay (100);
 80004fc:	2064      	movs	r0, #100	; 0x64
 80004fe:	f000 ff4d 	bl	800139c <HAL_Delay>

	  uint8_t Test[] = "Hello World !!!\r\n"; //Data to send
 8000502:	4b09      	ldr	r3, [pc, #36]	; (8000528 <main+0x64>)
 8000504:	1d3c      	adds	r4, r7, #4
 8000506:	461d      	mov	r5, r3
 8000508:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800050a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800050c:	682b      	ldr	r3, [r5, #0]
 800050e:	8023      	strh	r3, [r4, #0]
	  HAL_UART_Transmit(&huart1,Test,sizeof(Test),10);// Sending in normal mode
 8000510:	1d39      	adds	r1, r7, #4
 8000512:	230a      	movs	r3, #10
 8000514:	2212      	movs	r2, #18
 8000516:	4805      	ldr	r0, [pc, #20]	; (800052c <main+0x68>)
 8000518:	f003 faf9 	bl	8003b0e <HAL_UART_Transmit>
	  HAL_Delay(100);
 800051c:	2064      	movs	r0, #100	; 0x64
 800051e:	f000 ff3d 	bl	800139c <HAL_Delay>
  {
 8000522:	e7e6      	b.n	80004f2 <main+0x2e>
 8000524:	48000400 	.word	0x48000400
 8000528:	08004b84 	.word	0x08004b84
 800052c:	2000015c 	.word	0x2000015c

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b096      	sub	sp, #88	; 0x58
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0314 	add.w	r3, r7, #20
 800053a:	2244      	movs	r2, #68	; 0x44
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f004 fae8 	bl	8004b14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	463b      	mov	r3, r7
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
 800054a:	605a      	str	r2, [r3, #4]
 800054c:	609a      	str	r2, [r3, #8]
 800054e:	60da      	str	r2, [r3, #12]
 8000550:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000552:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000556:	f001 fdfb 	bl	8002150 <HAL_PWREx_ControlVoltageScaling>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000560:	f000 fb64 	bl	8000c2c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000564:	f001 fdd6 	bl	8002114 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000568:	4b21      	ldr	r3, [pc, #132]	; (80005f0 <SystemClock_Config+0xc0>)
 800056a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800056e:	4a20      	ldr	r2, [pc, #128]	; (80005f0 <SystemClock_Config+0xc0>)
 8000570:	f023 0318 	bic.w	r3, r3, #24
 8000574:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000578:	2314      	movs	r3, #20
 800057a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800057c:	2301      	movs	r3, #1
 800057e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000580:	2301      	movs	r3, #1
 8000582:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000584:	2300      	movs	r3, #0
 8000586:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000588:	2360      	movs	r3, #96	; 0x60
 800058a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058c:	2302      	movs	r3, #2
 800058e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000590:	2301      	movs	r3, #1
 8000592:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000594:	2301      	movs	r3, #1
 8000596:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000598:	2328      	movs	r3, #40	; 0x28
 800059a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800059c:	2307      	movs	r3, #7
 800059e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005a0:	2302      	movs	r3, #2
 80005a2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005a4:	2302      	movs	r3, #2
 80005a6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a8:	f107 0314 	add.w	r3, r7, #20
 80005ac:	4618      	mov	r0, r3
 80005ae:	f001 fef1 	bl	8002394 <HAL_RCC_OscConfig>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80005b8:	f000 fb38 	bl	8000c2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005bc:	230f      	movs	r3, #15
 80005be:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c0:	2303      	movs	r3, #3
 80005c2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c8:	2300      	movs	r3, #0
 80005ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005d0:	463b      	mov	r3, r7
 80005d2:	2104      	movs	r1, #4
 80005d4:	4618      	mov	r0, r3
 80005d6:	f002 fab9 	bl	8002b4c <HAL_RCC_ClockConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80005e0:	f000 fb24 	bl	8000c2c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005e4:	f002 ffc0 	bl	8003568 <HAL_RCCEx_EnableMSIPLLMode>
}
 80005e8:	bf00      	nop
 80005ea:	3758      	adds	r7, #88	; 0x58
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40021000 	.word	0x40021000

080005f4 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 80005f8:	4b18      	ldr	r3, [pc, #96]	; (800065c <MX_DFSDM1_Init+0x68>)
 80005fa:	4a19      	ldr	r2, [pc, #100]	; (8000660 <MX_DFSDM1_Init+0x6c>)
 80005fc:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 80005fe:	4b17      	ldr	r3, [pc, #92]	; (800065c <MX_DFSDM1_Init+0x68>)
 8000600:	2201      	movs	r2, #1
 8000602:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000604:	4b15      	ldr	r3, [pc, #84]	; (800065c <MX_DFSDM1_Init+0x68>)
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800060a:	4b14      	ldr	r3, [pc, #80]	; (800065c <MX_DFSDM1_Init+0x68>)
 800060c:	2202      	movs	r2, #2
 800060e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000610:	4b12      	ldr	r3, [pc, #72]	; (800065c <MX_DFSDM1_Init+0x68>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000616:	4b11      	ldr	r3, [pc, #68]	; (800065c <MX_DFSDM1_Init+0x68>)
 8000618:	2200      	movs	r2, #0
 800061a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 800061c:	4b0f      	ldr	r3, [pc, #60]	; (800065c <MX_DFSDM1_Init+0x68>)
 800061e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000622:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000624:	4b0d      	ldr	r3, [pc, #52]	; (800065c <MX_DFSDM1_Init+0x68>)
 8000626:	2200      	movs	r2, #0
 8000628:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800062a:	4b0c      	ldr	r3, [pc, #48]	; (800065c <MX_DFSDM1_Init+0x68>)
 800062c:	2204      	movs	r2, #4
 800062e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000630:	4b0a      	ldr	r3, [pc, #40]	; (800065c <MX_DFSDM1_Init+0x68>)
 8000632:	2200      	movs	r2, #0
 8000634:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000636:	4b09      	ldr	r3, [pc, #36]	; (800065c <MX_DFSDM1_Init+0x68>)
 8000638:	2201      	movs	r2, #1
 800063a:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800063c:	4b07      	ldr	r3, [pc, #28]	; (800065c <MX_DFSDM1_Init+0x68>)
 800063e:	2200      	movs	r2, #0
 8000640:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000642:	4b06      	ldr	r3, [pc, #24]	; (800065c <MX_DFSDM1_Init+0x68>)
 8000644:	2200      	movs	r2, #0
 8000646:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000648:	4804      	ldr	r0, [pc, #16]	; (800065c <MX_DFSDM1_Init+0x68>)
 800064a:	f000 ffdd 	bl	8001608 <HAL_DFSDM_ChannelInit>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000654:	f000 faea 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20000028 	.word	0x20000028
 8000660:	40016020 	.word	0x40016020

08000664 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <MX_I2C2_Init+0x74>)
 800066a:	4a1c      	ldr	r2, [pc, #112]	; (80006dc <MX_I2C2_Init+0x78>)
 800066c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <MX_I2C2_Init+0x74>)
 8000670:	4a1b      	ldr	r2, [pc, #108]	; (80006e0 <MX_I2C2_Init+0x7c>)
 8000672:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <MX_I2C2_Init+0x74>)
 8000676:	2200      	movs	r2, #0
 8000678:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <MX_I2C2_Init+0x74>)
 800067c:	2201      	movs	r2, #1
 800067e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <MX_I2C2_Init+0x74>)
 8000682:	2200      	movs	r2, #0
 8000684:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <MX_I2C2_Init+0x74>)
 8000688:	2200      	movs	r2, #0
 800068a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <MX_I2C2_Init+0x74>)
 800068e:	2200      	movs	r2, #0
 8000690:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000692:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MX_I2C2_Init+0x74>)
 8000694:	2200      	movs	r2, #0
 8000696:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <MX_I2C2_Init+0x74>)
 800069a:	2200      	movs	r2, #0
 800069c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800069e:	480e      	ldr	r0, [pc, #56]	; (80006d8 <MX_I2C2_Init+0x74>)
 80006a0:	f001 fabd 	bl	8001c1e <HAL_I2C_Init>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80006aa:	f000 fabf 	bl	8000c2c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006ae:	2100      	movs	r1, #0
 80006b0:	4809      	ldr	r0, [pc, #36]	; (80006d8 <MX_I2C2_Init+0x74>)
 80006b2:	f001 fb4f 	bl	8001d54 <HAL_I2CEx_ConfigAnalogFilter>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80006bc:	f000 fab6 	bl	8000c2c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80006c0:	2100      	movs	r1, #0
 80006c2:	4805      	ldr	r0, [pc, #20]	; (80006d8 <MX_I2C2_Init+0x74>)
 80006c4:	f001 fb91 	bl	8001dea <HAL_I2CEx_ConfigDigitalFilter>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80006ce:	f000 faad 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000060 	.word	0x20000060
 80006dc:	40005800 	.word	0x40005800
 80006e0:	10909cec 	.word	0x10909cec

080006e4 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <MX_QUADSPI_Init+0x44>)
 80006ea:	4a10      	ldr	r2, [pc, #64]	; (800072c <MX_QUADSPI_Init+0x48>)
 80006ec:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_QUADSPI_Init+0x44>)
 80006f0:	2202      	movs	r2, #2
 80006f2:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_QUADSPI_Init+0x44>)
 80006f6:	2204      	movs	r2, #4
 80006f8:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <MX_QUADSPI_Init+0x44>)
 80006fc:	2210      	movs	r2, #16
 80006fe:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000700:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_QUADSPI_Init+0x44>)
 8000702:	2217      	movs	r2, #23
 8000704:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <MX_QUADSPI_Init+0x44>)
 8000708:	2200      	movs	r2, #0
 800070a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_QUADSPI_Init+0x44>)
 800070e:	2200      	movs	r2, #0
 8000710:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_QUADSPI_Init+0x44>)
 8000714:	f001 fd82 	bl	800221c <HAL_QSPI_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 800071e:	f000 fa85 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	200000b4 	.word	0x200000b4
 800072c:	a0001000 	.word	0xa0001000

08000730 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000734:	4b1b      	ldr	r3, [pc, #108]	; (80007a4 <MX_SPI3_Init+0x74>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <MX_SPI3_Init+0x78>)
 8000738:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800073a:	4b1a      	ldr	r3, [pc, #104]	; (80007a4 <MX_SPI3_Init+0x74>)
 800073c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000740:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000742:	4b18      	ldr	r3, [pc, #96]	; (80007a4 <MX_SPI3_Init+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000748:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <MX_SPI3_Init+0x74>)
 800074a:	f44f 7240 	mov.w	r2, #768	; 0x300
 800074e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000750:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <MX_SPI3_Init+0x74>)
 8000752:	2200      	movs	r2, #0
 8000754:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <MX_SPI3_Init+0x74>)
 8000758:	2200      	movs	r2, #0
 800075a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800075c:	4b11      	ldr	r3, [pc, #68]	; (80007a4 <MX_SPI3_Init+0x74>)
 800075e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000762:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000764:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_SPI3_Init+0x74>)
 8000766:	2200      	movs	r2, #0
 8000768:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800076a:	4b0e      	ldr	r3, [pc, #56]	; (80007a4 <MX_SPI3_Init+0x74>)
 800076c:	2200      	movs	r2, #0
 800076e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000770:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <MX_SPI3_Init+0x74>)
 8000772:	2200      	movs	r2, #0
 8000774:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000776:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <MX_SPI3_Init+0x74>)
 8000778:	2200      	movs	r2, #0
 800077a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800077c:	4b09      	ldr	r3, [pc, #36]	; (80007a4 <MX_SPI3_Init+0x74>)
 800077e:	2207      	movs	r2, #7
 8000780:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000782:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <MX_SPI3_Init+0x74>)
 8000784:	2200      	movs	r2, #0
 8000786:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000788:	4b06      	ldr	r3, [pc, #24]	; (80007a4 <MX_SPI3_Init+0x74>)
 800078a:	2208      	movs	r2, #8
 800078c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800078e:	4805      	ldr	r0, [pc, #20]	; (80007a4 <MX_SPI3_Init+0x74>)
 8000790:	f003 f8cc 	bl	800392c <HAL_SPI_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800079a:	f000 fa47 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800079e:	bf00      	nop
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	200000f8 	.word	0x200000f8
 80007a8:	40003c00 	.word	0x40003c00

080007ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007b0:	4b14      	ldr	r3, [pc, #80]	; (8000804 <MX_USART1_UART_Init+0x58>)
 80007b2:	4a15      	ldr	r2, [pc, #84]	; (8000808 <MX_USART1_UART_Init+0x5c>)
 80007b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007b6:	4b13      	ldr	r3, [pc, #76]	; (8000804 <MX_USART1_UART_Init+0x58>)
 80007b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007be:	4b11      	ldr	r3, [pc, #68]	; (8000804 <MX_USART1_UART_Init+0x58>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <MX_USART1_UART_Init+0x58>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007ca:	4b0e      	ldr	r3, [pc, #56]	; (8000804 <MX_USART1_UART_Init+0x58>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007d0:	4b0c      	ldr	r3, [pc, #48]	; (8000804 <MX_USART1_UART_Init+0x58>)
 80007d2:	220c      	movs	r2, #12
 80007d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <MX_USART1_UART_Init+0x58>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007dc:	4b09      	ldr	r3, [pc, #36]	; (8000804 <MX_USART1_UART_Init+0x58>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007e2:	4b08      	ldr	r3, [pc, #32]	; (8000804 <MX_USART1_UART_Init+0x58>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_USART1_UART_Init+0x58>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007ee:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_USART1_UART_Init+0x58>)
 80007f0:	f003 f93f 	bl	8003a72 <HAL_UART_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80007fa:	f000 fa17 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	2000015c 	.word	0x2000015c
 8000808:	40013800 	.word	0x40013800

0800080c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000810:	4b14      	ldr	r3, [pc, #80]	; (8000864 <MX_USART3_UART_Init+0x58>)
 8000812:	4a15      	ldr	r2, [pc, #84]	; (8000868 <MX_USART3_UART_Init+0x5c>)
 8000814:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000816:	4b13      	ldr	r3, [pc, #76]	; (8000864 <MX_USART3_UART_Init+0x58>)
 8000818:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800081c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <MX_USART3_UART_Init+0x58>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <MX_USART3_UART_Init+0x58>)
 8000826:	2200      	movs	r2, #0
 8000828:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <MX_USART3_UART_Init+0x58>)
 800082c:	2200      	movs	r2, #0
 800082e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000830:	4b0c      	ldr	r3, [pc, #48]	; (8000864 <MX_USART3_UART_Init+0x58>)
 8000832:	220c      	movs	r2, #12
 8000834:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000836:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <MX_USART3_UART_Init+0x58>)
 8000838:	2200      	movs	r2, #0
 800083a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800083c:	4b09      	ldr	r3, [pc, #36]	; (8000864 <MX_USART3_UART_Init+0x58>)
 800083e:	2200      	movs	r2, #0
 8000840:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000842:	4b08      	ldr	r3, [pc, #32]	; (8000864 <MX_USART3_UART_Init+0x58>)
 8000844:	2200      	movs	r2, #0
 8000846:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000848:	4b06      	ldr	r3, [pc, #24]	; (8000864 <MX_USART3_UART_Init+0x58>)
 800084a:	2200      	movs	r2, #0
 800084c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800084e:	4805      	ldr	r0, [pc, #20]	; (8000864 <MX_USART3_UART_Init+0x58>)
 8000850:	f003 f90f 	bl	8003a72 <HAL_UART_Init>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800085a:	f000 f9e7 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800085e:	bf00      	nop
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	200001e4 	.word	0x200001e4
 8000868:	40004800 	.word	0x40004800

0800086c <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000870:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000872:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000876:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000878:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800087a:	2206      	movs	r2, #6
 800087c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800087e:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000880:	2202      	movs	r2, #2
 8000882:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000884:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000886:	2202      	movs	r2, #2
 8000888:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800088a:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800088c:	2200      	movs	r2, #0
 800088e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000890:	4b0c      	ldr	r3, [pc, #48]	; (80008c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000892:	2200      	movs	r2, #0
 8000894:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000896:	4b0b      	ldr	r3, [pc, #44]	; (80008c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000898:	2200      	movs	r2, #0
 800089a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800089c:	4b09      	ldr	r3, [pc, #36]	; (80008c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800089e:	2200      	movs	r2, #0
 80008a0:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80008a2:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80008a8:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80008ae:	4805      	ldr	r0, [pc, #20]	; (80008c4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80008b0:	f001 fae7 	bl	8001e82 <HAL_PCD_Init>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80008ba:	f000 f9b7 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	2000026c 	.word	0x2000026c

080008c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08a      	sub	sp, #40	; 0x28
 80008cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ce:	f107 0314 	add.w	r3, r7, #20
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
 80008dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008de:	4bbd      	ldr	r3, [pc, #756]	; (8000bd4 <MX_GPIO_Init+0x30c>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e2:	4abc      	ldr	r2, [pc, #752]	; (8000bd4 <MX_GPIO_Init+0x30c>)
 80008e4:	f043 0310 	orr.w	r3, r3, #16
 80008e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ea:	4bba      	ldr	r3, [pc, #744]	; (8000bd4 <MX_GPIO_Init+0x30c>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ee:	f003 0310 	and.w	r3, r3, #16
 80008f2:	613b      	str	r3, [r7, #16]
 80008f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f6:	4bb7      	ldr	r3, [pc, #732]	; (8000bd4 <MX_GPIO_Init+0x30c>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fa:	4ab6      	ldr	r2, [pc, #728]	; (8000bd4 <MX_GPIO_Init+0x30c>)
 80008fc:	f043 0304 	orr.w	r3, r3, #4
 8000900:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000902:	4bb4      	ldr	r3, [pc, #720]	; (8000bd4 <MX_GPIO_Init+0x30c>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000906:	f003 0304 	and.w	r3, r3, #4
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	4bb1      	ldr	r3, [pc, #708]	; (8000bd4 <MX_GPIO_Init+0x30c>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000912:	4ab0      	ldr	r2, [pc, #704]	; (8000bd4 <MX_GPIO_Init+0x30c>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091a:	4bae      	ldr	r3, [pc, #696]	; (8000bd4 <MX_GPIO_Init+0x30c>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	60bb      	str	r3, [r7, #8]
 8000924:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000926:	4bab      	ldr	r3, [pc, #684]	; (8000bd4 <MX_GPIO_Init+0x30c>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092a:	4aaa      	ldr	r2, [pc, #680]	; (8000bd4 <MX_GPIO_Init+0x30c>)
 800092c:	f043 0302 	orr.w	r3, r3, #2
 8000930:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000932:	4ba8      	ldr	r3, [pc, #672]	; (8000bd4 <MX_GPIO_Init+0x30c>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000936:	f003 0302 	and.w	r3, r3, #2
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800093e:	4ba5      	ldr	r3, [pc, #660]	; (8000bd4 <MX_GPIO_Init+0x30c>)
 8000940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000942:	4aa4      	ldr	r2, [pc, #656]	; (8000bd4 <MX_GPIO_Init+0x30c>)
 8000944:	f043 0308 	orr.w	r3, r3, #8
 8000948:	64d3      	str	r3, [r2, #76]	; 0x4c
 800094a:	4ba2      	ldr	r3, [pc, #648]	; (8000bd4 <MX_GPIO_Init+0x30c>)
 800094c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800094e:	f003 0308 	and.w	r3, r3, #8
 8000952:	603b      	str	r3, [r7, #0]
 8000954:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	f44f 718a 	mov.w	r1, #276	; 0x114
 800095c:	489e      	ldr	r0, [pc, #632]	; (8000bd8 <MX_GPIO_Init+0x310>)
 800095e:	f001 f909 	bl	8001b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	f248 1104 	movw	r1, #33028	; 0x8104
 8000968:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800096c:	f001 f902 	bl	8001b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|SPSGRF_915_SDN_Pin
 8000970:	2200      	movs	r2, #0
 8000972:	f24b 0114 	movw	r1, #45076	; 0xb014
 8000976:	4899      	ldr	r0, [pc, #612]	; (8000bdc <MX_GPIO_Init+0x314>)
 8000978:	f001 f8fc 	bl	8001b74 <HAL_GPIO_WritePin>
                          |ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED2_Pin|SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 800097c:	2201      	movs	r2, #1
 800097e:	f244 0120 	movw	r1, #16416	; 0x4020
 8000982:	4896      	ldr	r0, [pc, #600]	; (8000bdc <MX_GPIO_Init+0x314>)
 8000984:	f001 f8f6 	bl	8001b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000988:	2200      	movs	r2, #0
 800098a:	f241 0181 	movw	r1, #4225	; 0x1081
 800098e:	4894      	ldr	r0, [pc, #592]	; (8000be0 <MX_GPIO_Init+0x318>)
 8000990:	f001 f8f0 	bl	8001b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000994:	2201      	movs	r2, #1
 8000996:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800099a:	4891      	ldr	r0, [pc, #580]	; (8000be0 <MX_GPIO_Init+0x318>)
 800099c:	f001 f8ea 	bl	8001b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 80009a0:	2200      	movs	r2, #0
 80009a2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80009a6:	488f      	ldr	r0, [pc, #572]	; (8000be4 <MX_GPIO_Init+0x31c>)
 80009a8:	f001 f8e4 	bl	8001b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 80009ac:	2201      	movs	r2, #1
 80009ae:	2101      	movs	r1, #1
 80009b0:	4889      	ldr	r0, [pc, #548]	; (8000bd8 <MX_GPIO_Init+0x310>)
 80009b2:	f001 f8df 	bl	8001b74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 80009b6:	f240 1315 	movw	r3, #277	; 0x115
 80009ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009bc:	2301      	movs	r3, #1
 80009be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	4619      	mov	r1, r3
 80009ce:	4882      	ldr	r0, [pc, #520]	; (8000bd8 <MX_GPIO_Init+0x310>)
 80009d0:	f000 ff26 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 80009d4:	236a      	movs	r3, #106	; 0x6a
 80009d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009d8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	4619      	mov	r1, r3
 80009e8:	487b      	ldr	r0, [pc, #492]	; (8000bd8 <MX_GPIO_Init+0x310>)
 80009ea:	f000 ff19 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 80009ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009f4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 0314 	add.w	r3, r7, #20
 8000a02:	4619      	mov	r1, r3
 8000a04:	4877      	ldr	r0, [pc, #476]	; (8000be4 <MX_GPIO_Init+0x31c>)
 8000a06:	f000 ff0b 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000a0a:	233f      	movs	r3, #63	; 0x3f
 8000a0c:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a0e:	230b      	movs	r3, #11
 8000a10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4871      	ldr	r0, [pc, #452]	; (8000be4 <MX_GPIO_Init+0x31c>)
 8000a1e:	f000 feff 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000a22:	2303      	movs	r3, #3
 8000a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a26:	2302      	movs	r3, #2
 8000a28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2e:	2303      	movs	r3, #3
 8000a30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000a32:	2308      	movs	r3, #8
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a40:	f000 feee 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000a44:	f248 1304 	movw	r3, #33028	; 0x8104
 8000a48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a52:	2300      	movs	r3, #0
 8000a54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a60:	f000 fede 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000a64:	2308      	movs	r3, #8
 8000a66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a70:	2300      	movs	r3, #0
 8000a72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000a74:	2301      	movs	r3, #1
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a82:	f000 fecd 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000a86:	2310      	movs	r3, #16
 8000a88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000a8a:	230b      	movs	r3, #11
 8000a8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000a92:	f107 0314 	add.w	r3, r7, #20
 8000a96:	4619      	mov	r1, r3
 8000a98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a9c:	f000 fec0 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000aa0:	23e0      	movs	r3, #224	; 0xe0
 8000aa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aac:	2303      	movs	r3, #3
 8000aae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ab0:	2305      	movs	r3, #5
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ab4:	f107 0314 	add.w	r3, r7, #20
 8000ab8:	4619      	mov	r1, r3
 8000aba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000abe:	f000 feaf 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ac6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000aca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000ad0:	f107 0314 	add.w	r3, r7, #20
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4841      	ldr	r0, [pc, #260]	; (8000bdc <MX_GPIO_Init+0x314>)
 8000ad8:	f000 fea2 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000adc:	2302      	movs	r3, #2
 8000ade:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ae0:	230b      	movs	r3, #11
 8000ae2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	4619      	mov	r1, r3
 8000aee:	483b      	ldr	r0, [pc, #236]	; (8000bdc <MX_GPIO_Init+0x314>)
 8000af0:	f000 fe96 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000af4:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000af8:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000afa:	2301      	movs	r3, #1
 8000afc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b02:	2300      	movs	r3, #0
 8000b04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4833      	ldr	r0, [pc, #204]	; (8000bdc <MX_GPIO_Init+0x314>)
 8000b0e:	f000 fe87 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000b12:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000b16:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b18:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	4619      	mov	r1, r3
 8000b28:	482d      	ldr	r0, [pc, #180]	; (8000be0 <MX_GPIO_Init+0x318>)
 8000b2a:	f000 fe79 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000b2e:	f243 0381 	movw	r3, #12417	; 0x3081
 8000b32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b34:	2301      	movs	r3, #1
 8000b36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	4619      	mov	r1, r3
 8000b46:	4826      	ldr	r0, [pc, #152]	; (8000be0 <MX_GPIO_Init+0x318>)
 8000b48:	f000 fe6a 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000b4c:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b52:	2301      	movs	r3, #1
 8000b54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b56:	2300      	movs	r3, #0
 8000b58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b5e:	f107 0314 	add.w	r3, r7, #20
 8000b62:	4619      	mov	r1, r3
 8000b64:	481f      	ldr	r0, [pc, #124]	; (8000be4 <MX_GPIO_Init+0x31c>)
 8000b66:	f000 fe5b 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000b6a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000b6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b70:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4818      	ldr	r0, [pc, #96]	; (8000be4 <MX_GPIO_Init+0x31c>)
 8000b82:	f000 fe4d 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000b86:	2302      	movs	r3, #2
 8000b88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b92:	2303      	movs	r3, #3
 8000b94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b96:	2305      	movs	r3, #5
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000b9a:	f107 0314 	add.w	r3, r7, #20
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	480f      	ldr	r0, [pc, #60]	; (8000be0 <MX_GPIO_Init+0x318>)
 8000ba2:	f000 fe3d 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000ba6:	2378      	movs	r3, #120	; 0x78
 8000ba8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000baa:	2302      	movs	r3, #2
 8000bac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bb6:	2307      	movs	r3, #7
 8000bb8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bba:	f107 0314 	add.w	r3, r7, #20
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4807      	ldr	r0, [pc, #28]	; (8000be0 <MX_GPIO_Init+0x318>)
 8000bc2:	f000 fe2d 	bl	8001820 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000bc6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bcc:	2312      	movs	r3, #18
 8000bce:	61bb      	str	r3, [r7, #24]
 8000bd0:	e00a      	b.n	8000be8 <MX_GPIO_Init+0x320>
 8000bd2:	bf00      	nop
 8000bd4:	40021000 	.word	0x40021000
 8000bd8:	48001000 	.word	0x48001000
 8000bdc:	48000400 	.word	0x48000400
 8000be0:	48000c00 	.word	0x48000c00
 8000be4:	48000800 	.word	0x48000800
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be8:	2300      	movs	r3, #0
 8000bea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bec:	2303      	movs	r3, #3
 8000bee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bf0:	2304      	movs	r3, #4
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	480b      	ldr	r0, [pc, #44]	; (8000c28 <MX_GPIO_Init+0x360>)
 8000bfc:	f000 fe10 	bl	8001820 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000c00:	2200      	movs	r2, #0
 8000c02:	2100      	movs	r1, #0
 8000c04:	2017      	movs	r0, #23
 8000c06:	f000 fcc8 	bl	800159a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000c0a:	2017      	movs	r0, #23
 8000c0c:	f000 fce1 	bl	80015d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000c10:	2200      	movs	r2, #0
 8000c12:	2100      	movs	r1, #0
 8000c14:	2028      	movs	r0, #40	; 0x28
 8000c16:	f000 fcc0 	bl	800159a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000c1a:	2028      	movs	r0, #40	; 0x28
 8000c1c:	f000 fcd9 	bl	80015d2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c20:	bf00      	nop
 8000c22:	3728      	adds	r7, #40	; 0x28
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	48000400 	.word	0x48000400

08000c2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c30:	b672      	cpsid	i
}
 8000c32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <Error_Handler+0x8>
	...

08000c38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3e:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <HAL_MspInit+0x44>)
 8000c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c42:	4a0e      	ldr	r2, [pc, #56]	; (8000c7c <HAL_MspInit+0x44>)
 8000c44:	f043 0301 	orr.w	r3, r3, #1
 8000c48:	6613      	str	r3, [r2, #96]	; 0x60
 8000c4a:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <HAL_MspInit+0x44>)
 8000c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c4e:	f003 0301 	and.w	r3, r3, #1
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c56:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <HAL_MspInit+0x44>)
 8000c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c5a:	4a08      	ldr	r2, [pc, #32]	; (8000c7c <HAL_MspInit+0x44>)
 8000c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c60:	6593      	str	r3, [r2, #88]	; 0x58
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <HAL_MspInit+0x44>)
 8000c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c6a:	603b      	str	r3, [r7, #0]
 8000c6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	40021000 	.word	0x40021000

08000c80 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b0ac      	sub	sp, #176	; 0xb0
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	2288      	movs	r2, #136	; 0x88
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f003 ff37 	bl	8004b14 <memset>
  if(DFSDM1_Init == 0)
 8000ca6:	4b25      	ldr	r3, [pc, #148]	; (8000d3c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d142      	bne.n	8000d34 <HAL_DFSDM_ChannelMspInit+0xb4>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8000cae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cb2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cba:	f107 0314 	add.w	r3, r7, #20
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f002 f968 	bl	8002f94 <HAL_RCCEx_PeriphCLKConfig>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8000cca:	f7ff ffaf 	bl	8000c2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000cce:	4b1c      	ldr	r3, [pc, #112]	; (8000d40 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cd2:	4a1b      	ldr	r2, [pc, #108]	; (8000d40 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000cd4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000cd8:	6613      	str	r3, [r2, #96]	; 0x60
 8000cda:	4b19      	ldr	r3, [pc, #100]	; (8000d40 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ce2:	613b      	str	r3, [r7, #16]
 8000ce4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ce6:	4b16      	ldr	r3, [pc, #88]	; (8000d40 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cea:	4a15      	ldr	r2, [pc, #84]	; (8000d40 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000cec:	f043 0310 	orr.w	r3, r3, #16
 8000cf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cf2:	4b13      	ldr	r3, [pc, #76]	; (8000d40 <HAL_DFSDM_ChannelMspInit+0xc0>)
 8000cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf6:	f003 0310 	and.w	r3, r3, #16
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000cfe:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000d02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d06:	2302      	movs	r3, #2
 8000d08:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d12:	2300      	movs	r3, #0
 8000d14:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000d18:	2306      	movs	r3, #6
 8000d1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d1e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d22:	4619      	mov	r1, r3
 8000d24:	4807      	ldr	r0, [pc, #28]	; (8000d44 <HAL_DFSDM_ChannelMspInit+0xc4>)
 8000d26:	f000 fd7b 	bl	8001820 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000d2a:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	3301      	adds	r3, #1
 8000d30:	4a02      	ldr	r2, [pc, #8]	; (8000d3c <HAL_DFSDM_ChannelMspInit+0xbc>)
 8000d32:	6013      	str	r3, [r2, #0]
  }

}
 8000d34:	bf00      	nop
 8000d36:	37b0      	adds	r7, #176	; 0xb0
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000778 	.word	0x20000778
 8000d40:	40021000 	.word	0x40021000
 8000d44:	48001000 	.word	0x48001000

08000d48 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b0ac      	sub	sp, #176	; 0xb0
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d50:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	605a      	str	r2, [r3, #4]
 8000d5a:	609a      	str	r2, [r3, #8]
 8000d5c:	60da      	str	r2, [r3, #12]
 8000d5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	2288      	movs	r2, #136	; 0x88
 8000d66:	2100      	movs	r1, #0
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f003 fed3 	bl	8004b14 <memset>
  if(hi2c->Instance==I2C2)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a21      	ldr	r2, [pc, #132]	; (8000df8 <HAL_I2C_MspInit+0xb0>)
 8000d74:	4293      	cmp	r3, r2
 8000d76:	d13b      	bne.n	8000df0 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000d78:	2380      	movs	r3, #128	; 0x80
 8000d7a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	4618      	mov	r0, r3
 8000d86:	f002 f905 	bl	8002f94 <HAL_RCCEx_PeriphCLKConfig>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000d90:	f7ff ff4c 	bl	8000c2c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d94:	4b19      	ldr	r3, [pc, #100]	; (8000dfc <HAL_I2C_MspInit+0xb4>)
 8000d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d98:	4a18      	ldr	r2, [pc, #96]	; (8000dfc <HAL_I2C_MspInit+0xb4>)
 8000d9a:	f043 0302 	orr.w	r3, r3, #2
 8000d9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000da0:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <HAL_I2C_MspInit+0xb4>)
 8000da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da4:	f003 0302 	and.w	r3, r3, #2
 8000da8:	613b      	str	r3, [r7, #16]
 8000daa:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 8000dac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000db0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000db4:	2312      	movs	r3, #18
 8000db6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dba:	2301      	movs	r3, #1
 8000dbc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000dc6:	2304      	movs	r3, #4
 8000dc8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dcc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	480b      	ldr	r0, [pc, #44]	; (8000e00 <HAL_I2C_MspInit+0xb8>)
 8000dd4:	f000 fd24 	bl	8001820 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000dd8:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <HAL_I2C_MspInit+0xb4>)
 8000dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ddc:	4a07      	ldr	r2, [pc, #28]	; (8000dfc <HAL_I2C_MspInit+0xb4>)
 8000dde:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000de2:	6593      	str	r3, [r2, #88]	; 0x58
 8000de4:	4b05      	ldr	r3, [pc, #20]	; (8000dfc <HAL_I2C_MspInit+0xb4>)
 8000de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000df0:	bf00      	nop
 8000df2:	37b0      	adds	r7, #176	; 0xb0
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40005800 	.word	0x40005800
 8000dfc:	40021000 	.word	0x40021000
 8000e00:	48000400 	.word	0x48000400

08000e04 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08a      	sub	sp, #40	; 0x28
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a17      	ldr	r2, [pc, #92]	; (8000e80 <HAL_QSPI_MspInit+0x7c>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d128      	bne.n	8000e78 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000e26:	4b17      	ldr	r3, [pc, #92]	; (8000e84 <HAL_QSPI_MspInit+0x80>)
 8000e28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e2a:	4a16      	ldr	r2, [pc, #88]	; (8000e84 <HAL_QSPI_MspInit+0x80>)
 8000e2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e30:	6513      	str	r3, [r2, #80]	; 0x50
 8000e32:	4b14      	ldr	r3, [pc, #80]	; (8000e84 <HAL_QSPI_MspInit+0x80>)
 8000e34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e3e:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <HAL_QSPI_MspInit+0x80>)
 8000e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e42:	4a10      	ldr	r2, [pc, #64]	; (8000e84 <HAL_QSPI_MspInit+0x80>)
 8000e44:	f043 0310 	orr.w	r3, r3, #16
 8000e48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <HAL_QSPI_MspInit+0x80>)
 8000e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4e:	f003 0310 	and.w	r3, r3, #16
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000e56:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000e5a:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e64:	2303      	movs	r3, #3
 8000e66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000e68:	230a      	movs	r3, #10
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	4619      	mov	r1, r3
 8000e72:	4805      	ldr	r0, [pc, #20]	; (8000e88 <HAL_QSPI_MspInit+0x84>)
 8000e74:	f000 fcd4 	bl	8001820 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000e78:	bf00      	nop
 8000e7a:	3728      	adds	r7, #40	; 0x28
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	a0001000 	.word	0xa0001000
 8000e84:	40021000 	.word	0x40021000
 8000e88:	48001000 	.word	0x48001000

08000e8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b08a      	sub	sp, #40	; 0x28
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e94:	f107 0314 	add.w	r3, r7, #20
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]
 8000ea2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4a17      	ldr	r2, [pc, #92]	; (8000f08 <HAL_SPI_MspInit+0x7c>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d128      	bne.n	8000f00 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000eae:	4b17      	ldr	r3, [pc, #92]	; (8000f0c <HAL_SPI_MspInit+0x80>)
 8000eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb2:	4a16      	ldr	r2, [pc, #88]	; (8000f0c <HAL_SPI_MspInit+0x80>)
 8000eb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000eb8:	6593      	str	r3, [r2, #88]	; 0x58
 8000eba:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <HAL_SPI_MspInit+0x80>)
 8000ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ebe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec6:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <HAL_SPI_MspInit+0x80>)
 8000ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eca:	4a10      	ldr	r2, [pc, #64]	; (8000f0c <HAL_SPI_MspInit+0x80>)
 8000ecc:	f043 0304 	orr.w	r3, r3, #4
 8000ed0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <HAL_SPI_MspInit+0x80>)
 8000ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed6:	f003 0304 	and.w	r3, r3, #4
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000ede:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000ee2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eec:	2303      	movs	r3, #3
 8000eee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ef0:	2306      	movs	r3, #6
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4805      	ldr	r0, [pc, #20]	; (8000f10 <HAL_SPI_MspInit+0x84>)
 8000efc:	f000 fc90 	bl	8001820 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000f00:	bf00      	nop
 8000f02:	3728      	adds	r7, #40	; 0x28
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	40003c00 	.word	0x40003c00
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	48000800 	.word	0x48000800

08000f14 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b0ae      	sub	sp, #184	; 0xb8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f2c:	f107 031c 	add.w	r3, r7, #28
 8000f30:	2288      	movs	r2, #136	; 0x88
 8000f32:	2100      	movs	r1, #0
 8000f34:	4618      	mov	r0, r3
 8000f36:	f003 fded 	bl	8004b14 <memset>
  if(huart->Instance==USART1)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a42      	ldr	r2, [pc, #264]	; (8001048 <HAL_UART_MspInit+0x134>)
 8000f40:	4293      	cmp	r3, r2
 8000f42:	d13b      	bne.n	8000fbc <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000f44:	2301      	movs	r3, #1
 8000f46:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f4c:	f107 031c 	add.w	r3, r7, #28
 8000f50:	4618      	mov	r0, r3
 8000f52:	f002 f81f 	bl	8002f94 <HAL_RCCEx_PeriphCLKConfig>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f5c:	f7ff fe66 	bl	8000c2c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f60:	4b3a      	ldr	r3, [pc, #232]	; (800104c <HAL_UART_MspInit+0x138>)
 8000f62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f64:	4a39      	ldr	r2, [pc, #228]	; (800104c <HAL_UART_MspInit+0x138>)
 8000f66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f6a:	6613      	str	r3, [r2, #96]	; 0x60
 8000f6c:	4b37      	ldr	r3, [pc, #220]	; (800104c <HAL_UART_MspInit+0x138>)
 8000f6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f74:	61bb      	str	r3, [r7, #24]
 8000f76:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f78:	4b34      	ldr	r3, [pc, #208]	; (800104c <HAL_UART_MspInit+0x138>)
 8000f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7c:	4a33      	ldr	r2, [pc, #204]	; (800104c <HAL_UART_MspInit+0x138>)
 8000f7e:	f043 0302 	orr.w	r3, r3, #2
 8000f82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f84:	4b31      	ldr	r3, [pc, #196]	; (800104c <HAL_UART_MspInit+0x138>)
 8000f86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f88:	f003 0302 	and.w	r3, r3, #2
 8000f8c:	617b      	str	r3, [r7, #20]
 8000f8e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8000f90:	23c0      	movs	r3, #192	; 0xc0
 8000f92:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f96:	2302      	movs	r3, #2
 8000f98:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa2:	2303      	movs	r3, #3
 8000fa4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fa8:	2307      	movs	r3, #7
 8000faa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fae:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4826      	ldr	r0, [pc, #152]	; (8001050 <HAL_UART_MspInit+0x13c>)
 8000fb6:	f000 fc33 	bl	8001820 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000fba:	e040      	b.n	800103e <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a24      	ldr	r2, [pc, #144]	; (8001054 <HAL_UART_MspInit+0x140>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d13b      	bne.n	800103e <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fc6:	2304      	movs	r3, #4
 8000fc8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fce:	f107 031c 	add.w	r3, r7, #28
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f001 ffde 	bl	8002f94 <HAL_RCCEx_PeriphCLKConfig>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <HAL_UART_MspInit+0xce>
      Error_Handler();
 8000fde:	f7ff fe25 	bl	8000c2c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fe2:	4b1a      	ldr	r3, [pc, #104]	; (800104c <HAL_UART_MspInit+0x138>)
 8000fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fe6:	4a19      	ldr	r2, [pc, #100]	; (800104c <HAL_UART_MspInit+0x138>)
 8000fe8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fec:	6593      	str	r3, [r2, #88]	; 0x58
 8000fee:	4b17      	ldr	r3, [pc, #92]	; (800104c <HAL_UART_MspInit+0x138>)
 8000ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ffa:	4b14      	ldr	r3, [pc, #80]	; (800104c <HAL_UART_MspInit+0x138>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffe:	4a13      	ldr	r2, [pc, #76]	; (800104c <HAL_UART_MspInit+0x138>)
 8001000:	f043 0308 	orr.w	r3, r3, #8
 8001004:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001006:	4b11      	ldr	r3, [pc, #68]	; (800104c <HAL_UART_MspInit+0x138>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100a:	f003 0308 	and.w	r3, r3, #8
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8001012:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001016:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101a:	2302      	movs	r3, #2
 800101c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001026:	2303      	movs	r3, #3
 8001028:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800102c:	2307      	movs	r3, #7
 800102e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001032:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001036:	4619      	mov	r1, r3
 8001038:	4807      	ldr	r0, [pc, #28]	; (8001058 <HAL_UART_MspInit+0x144>)
 800103a:	f000 fbf1 	bl	8001820 <HAL_GPIO_Init>
}
 800103e:	bf00      	nop
 8001040:	37b8      	adds	r7, #184	; 0xb8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40013800 	.word	0x40013800
 800104c:	40021000 	.word	0x40021000
 8001050:	48000400 	.word	0x48000400
 8001054:	40004800 	.word	0x40004800
 8001058:	48000c00 	.word	0x48000c00

0800105c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b0ac      	sub	sp, #176	; 0xb0
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	2288      	movs	r2, #136	; 0x88
 800107a:	2100      	movs	r1, #0
 800107c:	4618      	mov	r0, r3
 800107e:	f003 fd49 	bl	8004b14 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800108a:	d17c      	bne.n	8001186 <HAL_PCD_MspInit+0x12a>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800108c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001090:	617b      	str	r3, [r7, #20]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8001092:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001096:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800109a:	2301      	movs	r3, #1
 800109c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800109e:	2301      	movs	r3, #1
 80010a0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80010a2:	2318      	movs	r3, #24
 80010a4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80010a6:	2307      	movs	r3, #7
 80010a8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80010aa:	2302      	movs	r3, #2
 80010ac:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80010ae:	2302      	movs	r3, #2
 80010b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80010b2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80010b6:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	4618      	mov	r0, r3
 80010be:	f001 ff69 	bl	8002f94 <HAL_RCCEx_PeriphCLKConfig>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80010c8:	f7ff fdb0 	bl	8000c2c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010cc:	4b30      	ldr	r3, [pc, #192]	; (8001190 <HAL_PCD_MspInit+0x134>)
 80010ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d0:	4a2f      	ldr	r2, [pc, #188]	; (8001190 <HAL_PCD_MspInit+0x134>)
 80010d2:	f043 0301 	orr.w	r3, r3, #1
 80010d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010d8:	4b2d      	ldr	r3, [pc, #180]	; (8001190 <HAL_PCD_MspInit+0x134>)
 80010da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010dc:	f003 0301 	and.w	r3, r3, #1
 80010e0:	613b      	str	r3, [r7, #16]
 80010e2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80010e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ec:	2300      	movs	r3, #0
 80010ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80010f8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010fc:	4619      	mov	r1, r3
 80010fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001102:	f000 fb8d 	bl	8001820 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001106:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800110a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110e:	2302      	movs	r3, #2
 8001110:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111a:	2303      	movs	r3, #3
 800111c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001120:	230a      	movs	r3, #10
 8001122:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001126:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800112a:	4619      	mov	r1, r3
 800112c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001130:	f000 fb76 	bl	8001820 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001134:	4b16      	ldr	r3, [pc, #88]	; (8001190 <HAL_PCD_MspInit+0x134>)
 8001136:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001138:	4a15      	ldr	r2, [pc, #84]	; (8001190 <HAL_PCD_MspInit+0x134>)
 800113a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800113e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001140:	4b13      	ldr	r3, [pc, #76]	; (8001190 <HAL_PCD_MspInit+0x134>)
 8001142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001144:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800114c:	4b10      	ldr	r3, [pc, #64]	; (8001190 <HAL_PCD_MspInit+0x134>)
 800114e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001150:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001154:	2b00      	cmp	r3, #0
 8001156:	d114      	bne.n	8001182 <HAL_PCD_MspInit+0x126>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001158:	4b0d      	ldr	r3, [pc, #52]	; (8001190 <HAL_PCD_MspInit+0x134>)
 800115a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800115c:	4a0c      	ldr	r2, [pc, #48]	; (8001190 <HAL_PCD_MspInit+0x134>)
 800115e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001162:	6593      	str	r3, [r2, #88]	; 0x58
 8001164:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <HAL_PCD_MspInit+0x134>)
 8001166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001168:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001170:	f001 f844 	bl	80021fc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001174:	4b06      	ldr	r3, [pc, #24]	; (8001190 <HAL_PCD_MspInit+0x134>)
 8001176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001178:	4a05      	ldr	r2, [pc, #20]	; (8001190 <HAL_PCD_MspInit+0x134>)
 800117a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800117e:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001180:	e001      	b.n	8001186 <HAL_PCD_MspInit+0x12a>
      HAL_PWREx_EnableVddUSB();
 8001182:	f001 f83b 	bl	80021fc <HAL_PWREx_EnableVddUSB>
}
 8001186:	bf00      	nop
 8001188:	37b0      	adds	r7, #176	; 0xb0
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	40021000 	.word	0x40021000

08001194 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001198:	e7fe      	b.n	8001198 <NMI_Handler+0x4>

0800119a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800119e:	e7fe      	b.n	800119e <HardFault_Handler+0x4>

080011a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011a4:	e7fe      	b.n	80011a4 <MemManage_Handler+0x4>

080011a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011aa:	e7fe      	b.n	80011aa <BusFault_Handler+0x4>

080011ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011b0:	e7fe      	b.n	80011b0 <UsageFault_Handler+0x4>

080011b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ce:	b480      	push	{r7}
 80011d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011e0:	f000 f8bc 	bl	800135c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011e4:	bf00      	nop
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 80011ec:	2020      	movs	r0, #32
 80011ee:	f000 fcf3 	bl	8001bd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 80011f2:	2040      	movs	r0, #64	; 0x40
 80011f4:	f000 fcf0 	bl	8001bd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 80011f8:	2080      	movs	r0, #128	; 0x80
 80011fa:	f000 fced 	bl	8001bd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 80011fe:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001202:	f000 fce9 	bl	8001bd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}

0800120a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 800120e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001212:	f000 fce1 	bl	8001bd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8001216:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800121a:	f000 fcdd 	bl	8001bd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 800121e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001222:	f000 fcd9 	bl	8001bd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8001226:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800122a:	f000 fcd5 	bl	8001bd8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 800122e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001232:	f000 fcd1 	bl	8001bd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
	...

0800123c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001240:	4b06      	ldr	r3, [pc, #24]	; (800125c <SystemInit+0x20>)
 8001242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001246:	4a05      	ldr	r2, [pc, #20]	; (800125c <SystemInit+0x20>)
 8001248:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800124c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	e000ed00 	.word	0xe000ed00

08001260 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001260:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001298 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001264:	f7ff ffea 	bl	800123c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001268:	480c      	ldr	r0, [pc, #48]	; (800129c <LoopForever+0x6>)
  ldr r1, =_edata
 800126a:	490d      	ldr	r1, [pc, #52]	; (80012a0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800126c:	4a0d      	ldr	r2, [pc, #52]	; (80012a4 <LoopForever+0xe>)
  movs r3, #0
 800126e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001270:	e002      	b.n	8001278 <LoopCopyDataInit>

08001272 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001272:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001274:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001276:	3304      	adds	r3, #4

08001278 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001278:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800127a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800127c:	d3f9      	bcc.n	8001272 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800127e:	4a0a      	ldr	r2, [pc, #40]	; (80012a8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001280:	4c0a      	ldr	r4, [pc, #40]	; (80012ac <LoopForever+0x16>)
  movs r3, #0
 8001282:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001284:	e001      	b.n	800128a <LoopFillZerobss>

08001286 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001286:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001288:	3204      	adds	r2, #4

0800128a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800128a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800128c:	d3fb      	bcc.n	8001286 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800128e:	f003 fc49 	bl	8004b24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001292:	f7ff f917 	bl	80004c4 <main>

08001296 <LoopForever>:

LoopForever:
    b LoopForever
 8001296:	e7fe      	b.n	8001296 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001298:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800129c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012a0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80012a4:	08004bf0 	.word	0x08004bf0
  ldr r2, =_sbss
 80012a8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80012ac:	200007a4 	.word	0x200007a4

080012b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012b0:	e7fe      	b.n	80012b0 <ADC1_2_IRQHandler>

080012b2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012b8:	2300      	movs	r3, #0
 80012ba:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012bc:	2003      	movs	r0, #3
 80012be:	f000 f961 	bl	8001584 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012c2:	2000      	movs	r0, #0
 80012c4:	f000 f80e 	bl	80012e4 <HAL_InitTick>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d002      	beq.n	80012d4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	71fb      	strb	r3, [r7, #7]
 80012d2:	e001      	b.n	80012d8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012d4:	f7ff fcb0 	bl	8000c38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012d8:	79fb      	ldrb	r3, [r7, #7]
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
	...

080012e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012ec:	2300      	movs	r3, #0
 80012ee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80012f0:	4b17      	ldr	r3, [pc, #92]	; (8001350 <HAL_InitTick+0x6c>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d023      	beq.n	8001340 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80012f8:	4b16      	ldr	r3, [pc, #88]	; (8001354 <HAL_InitTick+0x70>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4b14      	ldr	r3, [pc, #80]	; (8001350 <HAL_InitTick+0x6c>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	4619      	mov	r1, r3
 8001302:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001306:	fbb3 f3f1 	udiv	r3, r3, r1
 800130a:	fbb2 f3f3 	udiv	r3, r2, r3
 800130e:	4618      	mov	r0, r3
 8001310:	f000 f96d 	bl	80015ee <HAL_SYSTICK_Config>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d10f      	bne.n	800133a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2b0f      	cmp	r3, #15
 800131e:	d809      	bhi.n	8001334 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001320:	2200      	movs	r2, #0
 8001322:	6879      	ldr	r1, [r7, #4]
 8001324:	f04f 30ff 	mov.w	r0, #4294967295
 8001328:	f000 f937 	bl	800159a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800132c:	4a0a      	ldr	r2, [pc, #40]	; (8001358 <HAL_InitTick+0x74>)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6013      	str	r3, [r2, #0]
 8001332:	e007      	b.n	8001344 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	73fb      	strb	r3, [r7, #15]
 8001338:	e004      	b.n	8001344 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	73fb      	strb	r3, [r7, #15]
 800133e:	e001      	b.n	8001344 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001344:	7bfb      	ldrb	r3, [r7, #15]
}
 8001346:	4618      	mov	r0, r3
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	20000008 	.word	0x20000008
 8001354:	20000000 	.word	0x20000000
 8001358:	20000004 	.word	0x20000004

0800135c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001360:	4b06      	ldr	r3, [pc, #24]	; (800137c <HAL_IncTick+0x20>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	461a      	mov	r2, r3
 8001366:	4b06      	ldr	r3, [pc, #24]	; (8001380 <HAL_IncTick+0x24>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4413      	add	r3, r2
 800136c:	4a04      	ldr	r2, [pc, #16]	; (8001380 <HAL_IncTick+0x24>)
 800136e:	6013      	str	r3, [r2, #0]
}
 8001370:	bf00      	nop
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	20000008 	.word	0x20000008
 8001380:	2000077c 	.word	0x2000077c

08001384 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  return uwTick;
 8001388:	4b03      	ldr	r3, [pc, #12]	; (8001398 <HAL_GetTick+0x14>)
 800138a:	681b      	ldr	r3, [r3, #0]
}
 800138c:	4618      	mov	r0, r3
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	2000077c 	.word	0x2000077c

0800139c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013a4:	f7ff ffee 	bl	8001384 <HAL_GetTick>
 80013a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013b4:	d005      	beq.n	80013c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80013b6:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <HAL_Delay+0x44>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	461a      	mov	r2, r3
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	4413      	add	r3, r2
 80013c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013c2:	bf00      	nop
 80013c4:	f7ff ffde 	bl	8001384 <HAL_GetTick>
 80013c8:	4602      	mov	r2, r0
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	1ad3      	subs	r3, r2, r3
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	d8f7      	bhi.n	80013c4 <HAL_Delay+0x28>
  {
  }
}
 80013d4:	bf00      	nop
 80013d6:	bf00      	nop
 80013d8:	3710      	adds	r7, #16
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	20000008 	.word	0x20000008

080013e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f003 0307 	and.w	r3, r3, #7
 80013f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013f4:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <__NVIC_SetPriorityGrouping+0x44>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013fa:	68ba      	ldr	r2, [r7, #8]
 80013fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001400:	4013      	ands	r3, r2
 8001402:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800140c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001410:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001414:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001416:	4a04      	ldr	r2, [pc, #16]	; (8001428 <__NVIC_SetPriorityGrouping+0x44>)
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	60d3      	str	r3, [r2, #12]
}
 800141c:	bf00      	nop
 800141e:	3714      	adds	r7, #20
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001430:	4b04      	ldr	r3, [pc, #16]	; (8001444 <__NVIC_GetPriorityGrouping+0x18>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	0a1b      	lsrs	r3, r3, #8
 8001436:	f003 0307 	and.w	r3, r3, #7
}
 800143a:	4618      	mov	r0, r3
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001456:	2b00      	cmp	r3, #0
 8001458:	db0b      	blt.n	8001472 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	f003 021f 	and.w	r2, r3, #31
 8001460:	4907      	ldr	r1, [pc, #28]	; (8001480 <__NVIC_EnableIRQ+0x38>)
 8001462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001466:	095b      	lsrs	r3, r3, #5
 8001468:	2001      	movs	r0, #1
 800146a:	fa00 f202 	lsl.w	r2, r0, r2
 800146e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	e000e100 	.word	0xe000e100

08001484 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	6039      	str	r1, [r7, #0]
 800148e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001494:	2b00      	cmp	r3, #0
 8001496:	db0a      	blt.n	80014ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	b2da      	uxtb	r2, r3
 800149c:	490c      	ldr	r1, [pc, #48]	; (80014d0 <__NVIC_SetPriority+0x4c>)
 800149e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a2:	0112      	lsls	r2, r2, #4
 80014a4:	b2d2      	uxtb	r2, r2
 80014a6:	440b      	add	r3, r1
 80014a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014ac:	e00a      	b.n	80014c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	4908      	ldr	r1, [pc, #32]	; (80014d4 <__NVIC_SetPriority+0x50>)
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	f003 030f 	and.w	r3, r3, #15
 80014ba:	3b04      	subs	r3, #4
 80014bc:	0112      	lsls	r2, r2, #4
 80014be:	b2d2      	uxtb	r2, r2
 80014c0:	440b      	add	r3, r1
 80014c2:	761a      	strb	r2, [r3, #24]
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	e000e100 	.word	0xe000e100
 80014d4:	e000ed00 	.word	0xe000ed00

080014d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014d8:	b480      	push	{r7}
 80014da:	b089      	sub	sp, #36	; 0x24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	f1c3 0307 	rsb	r3, r3, #7
 80014f2:	2b04      	cmp	r3, #4
 80014f4:	bf28      	it	cs
 80014f6:	2304      	movcs	r3, #4
 80014f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	3304      	adds	r3, #4
 80014fe:	2b06      	cmp	r3, #6
 8001500:	d902      	bls.n	8001508 <NVIC_EncodePriority+0x30>
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	3b03      	subs	r3, #3
 8001506:	e000      	b.n	800150a <NVIC_EncodePriority+0x32>
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800150c:	f04f 32ff 	mov.w	r2, #4294967295
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	43da      	mvns	r2, r3
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	401a      	ands	r2, r3
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001520:	f04f 31ff 	mov.w	r1, #4294967295
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	fa01 f303 	lsl.w	r3, r1, r3
 800152a:	43d9      	mvns	r1, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001530:	4313      	orrs	r3, r2
         );
}
 8001532:	4618      	mov	r0, r3
 8001534:	3724      	adds	r7, #36	; 0x24
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
	...

08001540 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	3b01      	subs	r3, #1
 800154c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001550:	d301      	bcc.n	8001556 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001552:	2301      	movs	r3, #1
 8001554:	e00f      	b.n	8001576 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001556:	4a0a      	ldr	r2, [pc, #40]	; (8001580 <SysTick_Config+0x40>)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	3b01      	subs	r3, #1
 800155c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800155e:	210f      	movs	r1, #15
 8001560:	f04f 30ff 	mov.w	r0, #4294967295
 8001564:	f7ff ff8e 	bl	8001484 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001568:	4b05      	ldr	r3, [pc, #20]	; (8001580 <SysTick_Config+0x40>)
 800156a:	2200      	movs	r2, #0
 800156c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800156e:	4b04      	ldr	r3, [pc, #16]	; (8001580 <SysTick_Config+0x40>)
 8001570:	2207      	movs	r2, #7
 8001572:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	e000e010 	.word	0xe000e010

08001584 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f7ff ff29 	bl	80013e4 <__NVIC_SetPriorityGrouping>
}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}

0800159a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800159a:	b580      	push	{r7, lr}
 800159c:	b086      	sub	sp, #24
 800159e:	af00      	add	r7, sp, #0
 80015a0:	4603      	mov	r3, r0
 80015a2:	60b9      	str	r1, [r7, #8]
 80015a4:	607a      	str	r2, [r7, #4]
 80015a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015ac:	f7ff ff3e 	bl	800142c <__NVIC_GetPriorityGrouping>
 80015b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	68b9      	ldr	r1, [r7, #8]
 80015b6:	6978      	ldr	r0, [r7, #20]
 80015b8:	f7ff ff8e 	bl	80014d8 <NVIC_EncodePriority>
 80015bc:	4602      	mov	r2, r0
 80015be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015c2:	4611      	mov	r1, r2
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff ff5d 	bl	8001484 <__NVIC_SetPriority>
}
 80015ca:	bf00      	nop
 80015cc:	3718      	adds	r7, #24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	4603      	mov	r3, r0
 80015da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7ff ff31 	bl	8001448 <__NVIC_EnableIRQ>
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}

080015ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b082      	sub	sp, #8
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7ff ffa2 	bl	8001540 <SysTick_Config>
 80015fc:	4603      	mov	r3, r0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
	...

08001608 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d101      	bne.n	800161a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e0ac      	b.n	8001774 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f000 f8b2 	bl	8001788 <DFSDM_GetChannelFromInstance>
 8001624:	4603      	mov	r3, r0
 8001626:	4a55      	ldr	r2, [pc, #340]	; (800177c <HAL_DFSDM_ChannelInit+0x174>)
 8001628:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e09f      	b.n	8001774 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f7ff fb23 	bl	8000c80 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 800163a:	4b51      	ldr	r3, [pc, #324]	; (8001780 <HAL_DFSDM_ChannelInit+0x178>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	3301      	adds	r3, #1
 8001640:	4a4f      	ldr	r2, [pc, #316]	; (8001780 <HAL_DFSDM_ChannelInit+0x178>)
 8001642:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8001644:	4b4e      	ldr	r3, [pc, #312]	; (8001780 <HAL_DFSDM_ChannelInit+0x178>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	2b01      	cmp	r3, #1
 800164a:	d125      	bne.n	8001698 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 800164c:	4b4d      	ldr	r3, [pc, #308]	; (8001784 <HAL_DFSDM_ChannelInit+0x17c>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4a4c      	ldr	r2, [pc, #304]	; (8001784 <HAL_DFSDM_ChannelInit+0x17c>)
 8001652:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001656:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8001658:	4b4a      	ldr	r3, [pc, #296]	; (8001784 <HAL_DFSDM_ChannelInit+0x17c>)
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689b      	ldr	r3, [r3, #8]
 8001660:	4948      	ldr	r1, [pc, #288]	; (8001784 <HAL_DFSDM_ChannelInit+0x17c>)
 8001662:	4313      	orrs	r3, r2
 8001664:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8001666:	4b47      	ldr	r3, [pc, #284]	; (8001784 <HAL_DFSDM_ChannelInit+0x17c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a46      	ldr	r2, [pc, #280]	; (8001784 <HAL_DFSDM_ChannelInit+0x17c>)
 800166c:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8001670:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	791b      	ldrb	r3, [r3, #4]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d108      	bne.n	800168c <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 800167a:	4b42      	ldr	r3, [pc, #264]	; (8001784 <HAL_DFSDM_ChannelInit+0x17c>)
 800167c:	681a      	ldr	r2, [r3, #0]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	3b01      	subs	r3, #1
 8001684:	041b      	lsls	r3, r3, #16
 8001686:	493f      	ldr	r1, [pc, #252]	; (8001784 <HAL_DFSDM_ChannelInit+0x17c>)
 8001688:	4313      	orrs	r3, r2
 800168a:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 800168c:	4b3d      	ldr	r3, [pc, #244]	; (8001784 <HAL_DFSDM_ChannelInit+0x17c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a3c      	ldr	r2, [pc, #240]	; (8001784 <HAL_DFSDM_ChannelInit+0x17c>)
 8001692:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001696:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80016a6:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6819      	ldr	r1, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80016b6:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80016bc:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	430a      	orrs	r2, r1
 80016c4:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f022 020f 	bic.w	r2, r2, #15
 80016d4:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	6819      	ldr	r1, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80016e4:	431a      	orrs	r2, r3
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	430a      	orrs	r2, r1
 80016ec:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	689a      	ldr	r2, [r3, #8]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80016fc:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6899      	ldr	r1, [r3, #8]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800170c:	3b01      	subs	r3, #1
 800170e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001710:	431a      	orrs	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	430a      	orrs	r2, r1
 8001718:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	685a      	ldr	r2, [r3, #4]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f002 0207 	and.w	r2, r2, #7
 8001728:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	6859      	ldr	r1, [r3, #4]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001734:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800173c:	431a      	orrs	r2, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	430a      	orrs	r2, r1
 8001744:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001754:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2201      	movs	r2, #1
 800175a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4618      	mov	r0, r3
 8001764:	f000 f810 	bl	8001788 <DFSDM_GetChannelFromInstance>
 8001768:	4602      	mov	r2, r0
 800176a:	4904      	ldr	r1, [pc, #16]	; (800177c <HAL_DFSDM_ChannelInit+0x174>)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001772:	2300      	movs	r3, #0
}
 8001774:	4618      	mov	r0, r3
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20000784 	.word	0x20000784
 8001780:	20000780 	.word	0x20000780
 8001784:	40016000 	.word	0x40016000

08001788 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001788:	b480      	push	{r7}
 800178a:	b085      	sub	sp, #20
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4a1c      	ldr	r2, [pc, #112]	; (8001804 <DFSDM_GetChannelFromInstance+0x7c>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d102      	bne.n	800179e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001798:	2300      	movs	r3, #0
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	e02b      	b.n	80017f6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a19      	ldr	r2, [pc, #100]	; (8001808 <DFSDM_GetChannelFromInstance+0x80>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d102      	bne.n	80017ac <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80017a6:	2301      	movs	r3, #1
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	e024      	b.n	80017f6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	4a17      	ldr	r2, [pc, #92]	; (800180c <DFSDM_GetChannelFromInstance+0x84>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d102      	bne.n	80017ba <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80017b4:	2302      	movs	r3, #2
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	e01d      	b.n	80017f6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a14      	ldr	r2, [pc, #80]	; (8001810 <DFSDM_GetChannelFromInstance+0x88>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d102      	bne.n	80017c8 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80017c2:	2304      	movs	r3, #4
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	e016      	b.n	80017f6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4a12      	ldr	r2, [pc, #72]	; (8001814 <DFSDM_GetChannelFromInstance+0x8c>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d102      	bne.n	80017d6 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80017d0:	2305      	movs	r3, #5
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	e00f      	b.n	80017f6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a0f      	ldr	r2, [pc, #60]	; (8001818 <DFSDM_GetChannelFromInstance+0x90>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d102      	bne.n	80017e4 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80017de:	2306      	movs	r3, #6
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	e008      	b.n	80017f6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a0d      	ldr	r2, [pc, #52]	; (800181c <DFSDM_GetChannelFromInstance+0x94>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d102      	bne.n	80017f2 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80017ec:	2307      	movs	r3, #7
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	e001      	b.n	80017f6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80017f2:	2303      	movs	r3, #3
 80017f4:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80017f6:	68fb      	ldr	r3, [r7, #12]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	40016000 	.word	0x40016000
 8001808:	40016020 	.word	0x40016020
 800180c:	40016040 	.word	0x40016040
 8001810:	40016080 	.word	0x40016080
 8001814:	400160a0 	.word	0x400160a0
 8001818:	400160c0 	.word	0x400160c0
 800181c:	400160e0 	.word	0x400160e0

08001820 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001820:	b480      	push	{r7}
 8001822:	b087      	sub	sp, #28
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800182a:	2300      	movs	r3, #0
 800182c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800182e:	e17f      	b.n	8001b30 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	2101      	movs	r1, #1
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	fa01 f303 	lsl.w	r3, r1, r3
 800183c:	4013      	ands	r3, r2
 800183e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2b00      	cmp	r3, #0
 8001844:	f000 8171 	beq.w	8001b2a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f003 0303 	and.w	r3, r3, #3
 8001850:	2b01      	cmp	r3, #1
 8001852:	d005      	beq.n	8001860 <HAL_GPIO_Init+0x40>
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 0303 	and.w	r3, r3, #3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d130      	bne.n	80018c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	2203      	movs	r2, #3
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	4013      	ands	r3, r2
 8001876:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	68da      	ldr	r2, [r3, #12]
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	fa02 f303 	lsl.w	r3, r2, r3
 8001884:	693a      	ldr	r2, [r7, #16]
 8001886:	4313      	orrs	r3, r2
 8001888:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	693a      	ldr	r2, [r7, #16]
 800188e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001896:	2201      	movs	r2, #1
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43db      	mvns	r3, r3
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	4013      	ands	r3, r2
 80018a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	091b      	lsrs	r3, r3, #4
 80018ac:	f003 0201 	and.w	r2, r3, #1
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	693a      	ldr	r2, [r7, #16]
 80018b8:	4313      	orrs	r3, r2
 80018ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f003 0303 	and.w	r3, r3, #3
 80018ca:	2b03      	cmp	r3, #3
 80018cc:	d118      	bne.n	8001900 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80018d4:	2201      	movs	r2, #1
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	4013      	ands	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	08db      	lsrs	r3, r3, #3
 80018ea:	f003 0201 	and.w	r2, r3, #1
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	693a      	ldr	r2, [r7, #16]
 80018fe:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f003 0303 	and.w	r3, r3, #3
 8001908:	2b03      	cmp	r3, #3
 800190a:	d017      	beq.n	800193c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	005b      	lsls	r3, r3, #1
 8001916:	2203      	movs	r2, #3
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43db      	mvns	r3, r3
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	4013      	ands	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	693a      	ldr	r2, [r7, #16]
 8001932:	4313      	orrs	r3, r2
 8001934:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f003 0303 	and.w	r3, r3, #3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d123      	bne.n	8001990 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	08da      	lsrs	r2, r3, #3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3208      	adds	r2, #8
 8001950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001954:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	220f      	movs	r2, #15
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	43db      	mvns	r3, r3
 8001966:	693a      	ldr	r2, [r7, #16]
 8001968:	4013      	ands	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	691a      	ldr	r2, [r3, #16]
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	693a      	ldr	r2, [r7, #16]
 800197e:	4313      	orrs	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	08da      	lsrs	r2, r3, #3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	3208      	adds	r2, #8
 800198a:	6939      	ldr	r1, [r7, #16]
 800198c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	2203      	movs	r2, #3
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	43db      	mvns	r3, r3
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	4013      	ands	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 0203 	and.w	r2, r3, #3
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	f000 80ac 	beq.w	8001b2a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d2:	4b5f      	ldr	r3, [pc, #380]	; (8001b50 <HAL_GPIO_Init+0x330>)
 80019d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019d6:	4a5e      	ldr	r2, [pc, #376]	; (8001b50 <HAL_GPIO_Init+0x330>)
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	6613      	str	r3, [r2, #96]	; 0x60
 80019de:	4b5c      	ldr	r3, [pc, #368]	; (8001b50 <HAL_GPIO_Init+0x330>)
 80019e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	60bb      	str	r3, [r7, #8]
 80019e8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80019ea:	4a5a      	ldr	r2, [pc, #360]	; (8001b54 <HAL_GPIO_Init+0x334>)
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	089b      	lsrs	r3, r3, #2
 80019f0:	3302      	adds	r3, #2
 80019f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	f003 0303 	and.w	r3, r3, #3
 80019fe:	009b      	lsls	r3, r3, #2
 8001a00:	220f      	movs	r2, #15
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	43db      	mvns	r3, r3
 8001a08:	693a      	ldr	r2, [r7, #16]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a14:	d025      	beq.n	8001a62 <HAL_GPIO_Init+0x242>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a4f      	ldr	r2, [pc, #316]	; (8001b58 <HAL_GPIO_Init+0x338>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d01f      	beq.n	8001a5e <HAL_GPIO_Init+0x23e>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a4e      	ldr	r2, [pc, #312]	; (8001b5c <HAL_GPIO_Init+0x33c>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d019      	beq.n	8001a5a <HAL_GPIO_Init+0x23a>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a4d      	ldr	r2, [pc, #308]	; (8001b60 <HAL_GPIO_Init+0x340>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d013      	beq.n	8001a56 <HAL_GPIO_Init+0x236>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a4c      	ldr	r2, [pc, #304]	; (8001b64 <HAL_GPIO_Init+0x344>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d00d      	beq.n	8001a52 <HAL_GPIO_Init+0x232>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a4b      	ldr	r2, [pc, #300]	; (8001b68 <HAL_GPIO_Init+0x348>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d007      	beq.n	8001a4e <HAL_GPIO_Init+0x22e>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a4a      	ldr	r2, [pc, #296]	; (8001b6c <HAL_GPIO_Init+0x34c>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d101      	bne.n	8001a4a <HAL_GPIO_Init+0x22a>
 8001a46:	2306      	movs	r3, #6
 8001a48:	e00c      	b.n	8001a64 <HAL_GPIO_Init+0x244>
 8001a4a:	2307      	movs	r3, #7
 8001a4c:	e00a      	b.n	8001a64 <HAL_GPIO_Init+0x244>
 8001a4e:	2305      	movs	r3, #5
 8001a50:	e008      	b.n	8001a64 <HAL_GPIO_Init+0x244>
 8001a52:	2304      	movs	r3, #4
 8001a54:	e006      	b.n	8001a64 <HAL_GPIO_Init+0x244>
 8001a56:	2303      	movs	r3, #3
 8001a58:	e004      	b.n	8001a64 <HAL_GPIO_Init+0x244>
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	e002      	b.n	8001a64 <HAL_GPIO_Init+0x244>
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e000      	b.n	8001a64 <HAL_GPIO_Init+0x244>
 8001a62:	2300      	movs	r3, #0
 8001a64:	697a      	ldr	r2, [r7, #20]
 8001a66:	f002 0203 	and.w	r2, r2, #3
 8001a6a:	0092      	lsls	r2, r2, #2
 8001a6c:	4093      	lsls	r3, r2
 8001a6e:	693a      	ldr	r2, [r7, #16]
 8001a70:	4313      	orrs	r3, r2
 8001a72:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a74:	4937      	ldr	r1, [pc, #220]	; (8001b54 <HAL_GPIO_Init+0x334>)
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	089b      	lsrs	r3, r3, #2
 8001a7a:	3302      	adds	r3, #2
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a82:	4b3b      	ldr	r3, [pc, #236]	; (8001b70 <HAL_GPIO_Init+0x350>)
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d003      	beq.n	8001aa6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001a9e:	693a      	ldr	r2, [r7, #16]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001aa6:	4a32      	ldr	r2, [pc, #200]	; (8001b70 <HAL_GPIO_Init+0x350>)
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001aac:	4b30      	ldr	r3, [pc, #192]	; (8001b70 <HAL_GPIO_Init+0x350>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	43db      	mvns	r3, r3
 8001ab6:	693a      	ldr	r2, [r7, #16]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d003      	beq.n	8001ad0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ad0:	4a27      	ldr	r2, [pc, #156]	; (8001b70 <HAL_GPIO_Init+0x350>)
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ad6:	4b26      	ldr	r3, [pc, #152]	; (8001b70 <HAL_GPIO_Init+0x350>)
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001afa:	4a1d      	ldr	r2, [pc, #116]	; (8001b70 <HAL_GPIO_Init+0x350>)
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b00:	4b1b      	ldr	r3, [pc, #108]	; (8001b70 <HAL_GPIO_Init+0x350>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d003      	beq.n	8001b24 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001b1c:	693a      	ldr	r2, [r7, #16]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b24:	4a12      	ldr	r2, [pc, #72]	; (8001b70 <HAL_GPIO_Init+0x350>)
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	3301      	adds	r3, #1
 8001b2e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	fa22 f303 	lsr.w	r3, r2, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f47f ae78 	bne.w	8001830 <HAL_GPIO_Init+0x10>
  }
}
 8001b40:	bf00      	nop
 8001b42:	bf00      	nop
 8001b44:	371c      	adds	r7, #28
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	40021000 	.word	0x40021000
 8001b54:	40010000 	.word	0x40010000
 8001b58:	48000400 	.word	0x48000400
 8001b5c:	48000800 	.word	0x48000800
 8001b60:	48000c00 	.word	0x48000c00
 8001b64:	48001000 	.word	0x48001000
 8001b68:	48001400 	.word	0x48001400
 8001b6c:	48001800 	.word	0x48001800
 8001b70:	40010400 	.word	0x40010400

08001b74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	807b      	strh	r3, [r7, #2]
 8001b80:	4613      	mov	r3, r2
 8001b82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b84:	787b      	ldrb	r3, [r7, #1]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001b8a:	887a      	ldrh	r2, [r7, #2]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001b90:	e002      	b.n	8001b98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001b92:	887a      	ldrh	r2, [r7, #2]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001b98:	bf00      	nop
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	460b      	mov	r3, r1
 8001bae:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	695b      	ldr	r3, [r3, #20]
 8001bb4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bb6:	887a      	ldrh	r2, [r7, #2]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	4013      	ands	r3, r2
 8001bbc:	041a      	lsls	r2, r3, #16
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	43d9      	mvns	r1, r3
 8001bc2:	887b      	ldrh	r3, [r7, #2]
 8001bc4:	400b      	ands	r3, r1
 8001bc6:	431a      	orrs	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	619a      	str	r2, [r3, #24]
}
 8001bcc:	bf00      	nop
 8001bce:	3714      	adds	r7, #20
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd6:	4770      	bx	lr

08001bd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001be2:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001be4:	695a      	ldr	r2, [r3, #20]
 8001be6:	88fb      	ldrh	r3, [r7, #6]
 8001be8:	4013      	ands	r3, r2
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d006      	beq.n	8001bfc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bee:	4a05      	ldr	r2, [pc, #20]	; (8001c04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001bf0:	88fb      	ldrh	r3, [r7, #6]
 8001bf2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bf4:	88fb      	ldrh	r3, [r7, #6]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f000 f806 	bl	8001c08 <HAL_GPIO_EXTI_Callback>
  }
}
 8001bfc:	bf00      	nop
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40010400 	.word	0x40010400

08001c08 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	4603      	mov	r3, r0
 8001c10:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d101      	bne.n	8001c30 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e08d      	b.n	8001d4c <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d106      	bne.n	8001c4a <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c44:	6878      	ldr	r0, [r7, #4]
 8001c46:	f7ff f87f 	bl	8000d48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2224      	movs	r2, #36	; 0x24
 8001c4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f022 0201 	bic.w	r2, r2, #1
 8001c60:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685a      	ldr	r2, [r3, #4]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001c6e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	689a      	ldr	r2, [r3, #8]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001c7e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d107      	bne.n	8001c98 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	689a      	ldr	r2, [r3, #8]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001c94:	609a      	str	r2, [r3, #8]
 8001c96:	e006      	b.n	8001ca6 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689a      	ldr	r2, [r3, #8]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001ca4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	68db      	ldr	r3, [r3, #12]
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d108      	bne.n	8001cc0 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	e007      	b.n	8001cd0 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	685a      	ldr	r2, [r3, #4]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cce:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	6812      	ldr	r2, [r2, #0]
 8001cda:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ce2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68da      	ldr	r2, [r3, #12]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cf2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	691a      	ldr	r2, [r3, #16]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	430a      	orrs	r2, r1
 8001d0c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69d9      	ldr	r1, [r3, #28]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6a1a      	ldr	r2, [r3, #32]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f042 0201 	orr.w	r2, r2, #1
 8001d2c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2200      	movs	r2, #0
 8001d32:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2220      	movs	r2, #32
 8001d38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2200      	movs	r2, #0
 8001d46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3708      	adds	r7, #8
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b20      	cmp	r3, #32
 8001d68:	d138      	bne.n	8001ddc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d101      	bne.n	8001d78 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001d74:	2302      	movs	r3, #2
 8001d76:	e032      	b.n	8001dde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2224      	movs	r2, #36	; 0x24
 8001d84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f022 0201 	bic.w	r2, r2, #1
 8001d96:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001da6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6819      	ldr	r1, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	683a      	ldr	r2, [r7, #0]
 8001db4:	430a      	orrs	r2, r1
 8001db6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f042 0201 	orr.w	r2, r2, #1
 8001dc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2220      	movs	r2, #32
 8001dcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	e000      	b.n	8001dde <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001ddc:	2302      	movs	r3, #2
  }
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	370c      	adds	r7, #12
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b085      	sub	sp, #20
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
 8001df2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b20      	cmp	r3, #32
 8001dfe:	d139      	bne.n	8001e74 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d101      	bne.n	8001e0e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	e033      	b.n	8001e76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2201      	movs	r2, #1
 8001e12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2224      	movs	r2, #36	; 0x24
 8001e1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 0201 	bic.w	r2, r2, #1
 8001e2c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001e3c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	021b      	lsls	r3, r3, #8
 8001e42:	68fa      	ldr	r2, [r7, #12]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f042 0201 	orr.w	r2, r2, #1
 8001e5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2220      	movs	r2, #32
 8001e64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e70:	2300      	movs	r3, #0
 8001e72:	e000      	b.n	8001e76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001e74:	2302      	movs	r3, #2
  }
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr

08001e82 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e84:	b08f      	sub	sp, #60	; 0x3c
 8001e86:	af0a      	add	r7, sp, #40	; 0x28
 8001e88:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d101      	bne.n	8001e94 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e116      	b.n	80020c2 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d106      	bne.n	8001eb4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001eae:	6878      	ldr	r0, [r7, #4]
 8001eb0:	f7ff f8d4 	bl	800105c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2203      	movs	r2, #3
 8001eb8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d102      	bne.n	8001ece <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	60da      	str	r2, [r3, #12]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f002 fb9f 	bl	8004616 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	603b      	str	r3, [r7, #0]
 8001ede:	687e      	ldr	r6, [r7, #4]
 8001ee0:	466d      	mov	r5, sp
 8001ee2:	f106 0410 	add.w	r4, r6, #16
 8001ee6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ee8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eee:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ef2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ef6:	1d33      	adds	r3, r6, #4
 8001ef8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001efa:	6838      	ldr	r0, [r7, #0]
 8001efc:	f002 fb5f 	bl	80045be <USB_CoreInit>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d005      	beq.n	8001f12 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2202      	movs	r2, #2
 8001f0a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e0d7      	b.n	80020c2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	2100      	movs	r1, #0
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f002 fb8d 	bl	8004638 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f1e:	2300      	movs	r3, #0
 8001f20:	73fb      	strb	r3, [r7, #15]
 8001f22:	e04a      	b.n	8001fba <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f24:	7bfa      	ldrb	r2, [r7, #15]
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	4413      	add	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	440b      	add	r3, r1
 8001f32:	333d      	adds	r3, #61	; 0x3d
 8001f34:	2201      	movs	r2, #1
 8001f36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f38:	7bfa      	ldrb	r2, [r7, #15]
 8001f3a:	6879      	ldr	r1, [r7, #4]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	4413      	add	r3, r2
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	440b      	add	r3, r1
 8001f46:	333c      	adds	r3, #60	; 0x3c
 8001f48:	7bfa      	ldrb	r2, [r7, #15]
 8001f4a:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f4c:	7bfa      	ldrb	r2, [r7, #15]
 8001f4e:	7bfb      	ldrb	r3, [r7, #15]
 8001f50:	b298      	uxth	r0, r3
 8001f52:	6879      	ldr	r1, [r7, #4]
 8001f54:	4613      	mov	r3, r2
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	4413      	add	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	440b      	add	r3, r1
 8001f5e:	3356      	adds	r3, #86	; 0x56
 8001f60:	4602      	mov	r2, r0
 8001f62:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f64:	7bfa      	ldrb	r2, [r7, #15]
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	4413      	add	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	440b      	add	r3, r1
 8001f72:	3340      	adds	r3, #64	; 0x40
 8001f74:	2200      	movs	r2, #0
 8001f76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f78:	7bfa      	ldrb	r2, [r7, #15]
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	4413      	add	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	440b      	add	r3, r1
 8001f86:	3344      	adds	r3, #68	; 0x44
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f8c:	7bfa      	ldrb	r2, [r7, #15]
 8001f8e:	6879      	ldr	r1, [r7, #4]
 8001f90:	4613      	mov	r3, r2
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	4413      	add	r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	440b      	add	r3, r1
 8001f9a:	3348      	adds	r3, #72	; 0x48
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001fa0:	7bfa      	ldrb	r2, [r7, #15]
 8001fa2:	6879      	ldr	r1, [r7, #4]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	00db      	lsls	r3, r3, #3
 8001fa8:	4413      	add	r3, r2
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	440b      	add	r3, r1
 8001fae:	334c      	adds	r3, #76	; 0x4c
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fb4:	7bfb      	ldrb	r3, [r7, #15]
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	73fb      	strb	r3, [r7, #15]
 8001fba:	7bfa      	ldrb	r2, [r7, #15]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d3af      	bcc.n	8001f24 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	73fb      	strb	r3, [r7, #15]
 8001fc8:	e044      	b.n	8002054 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001fca:	7bfa      	ldrb	r2, [r7, #15]
 8001fcc:	6879      	ldr	r1, [r7, #4]
 8001fce:	4613      	mov	r3, r2
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	440b      	add	r3, r1
 8001fd8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001fdc:	2200      	movs	r2, #0
 8001fde:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001fe0:	7bfa      	ldrb	r2, [r7, #15]
 8001fe2:	6879      	ldr	r1, [r7, #4]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	4413      	add	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	440b      	add	r3, r1
 8001fee:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001ff2:	7bfa      	ldrb	r2, [r7, #15]
 8001ff4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001ff6:	7bfa      	ldrb	r2, [r7, #15]
 8001ff8:	6879      	ldr	r1, [r7, #4]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	4413      	add	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	440b      	add	r3, r1
 8002004:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002008:	2200      	movs	r2, #0
 800200a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800200c:	7bfa      	ldrb	r2, [r7, #15]
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	4613      	mov	r3, r2
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	4413      	add	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	440b      	add	r3, r1
 800201a:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002022:	7bfa      	ldrb	r2, [r7, #15]
 8002024:	6879      	ldr	r1, [r7, #4]
 8002026:	4613      	mov	r3, r2
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	4413      	add	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	440b      	add	r3, r1
 8002030:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002038:	7bfa      	ldrb	r2, [r7, #15]
 800203a:	6879      	ldr	r1, [r7, #4]
 800203c:	4613      	mov	r3, r2
 800203e:	00db      	lsls	r3, r3, #3
 8002040:	4413      	add	r3, r2
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	440b      	add	r3, r1
 8002046:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800204e:	7bfb      	ldrb	r3, [r7, #15]
 8002050:	3301      	adds	r3, #1
 8002052:	73fb      	strb	r3, [r7, #15]
 8002054:	7bfa      	ldrb	r2, [r7, #15]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	429a      	cmp	r2, r3
 800205c:	d3b5      	bcc.n	8001fca <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	603b      	str	r3, [r7, #0]
 8002064:	687e      	ldr	r6, [r7, #4]
 8002066:	466d      	mov	r5, sp
 8002068:	f106 0410 	add.w	r4, r6, #16
 800206c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800206e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002070:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002072:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002074:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002078:	e885 0003 	stmia.w	r5, {r0, r1}
 800207c:	1d33      	adds	r3, r6, #4
 800207e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002080:	6838      	ldr	r0, [r7, #0]
 8002082:	f002 fb25 	bl	80046d0 <USB_DevInit>
 8002086:	4603      	mov	r3, r0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d005      	beq.n	8002098 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2202      	movs	r2, #2
 8002090:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e014      	b.n	80020c2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d102      	bne.n	80020b6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f000 f80a 	bl	80020ca <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f002 fcc7 	bl	8004a4e <USB_DevDisconnect>

  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3714      	adds	r7, #20
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080020ca <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80020ca:	b480      	push	{r7}
 80020cc:	b085      	sub	sp, #20
 80020ce:	af00      	add	r7, sp, #0
 80020d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2201      	movs	r2, #1
 80020dc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020fc:	f043 0303 	orr.w	r3, r3, #3
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002104:	2300      	movs	r3, #0
}
 8002106:	4618      	mov	r0, r3
 8002108:	3714      	adds	r7, #20
 800210a:	46bd      	mov	sp, r7
 800210c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002110:	4770      	bx	lr
	...

08002114 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002118:	4b05      	ldr	r3, [pc, #20]	; (8002130 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a04      	ldr	r2, [pc, #16]	; (8002130 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800211e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002122:	6013      	str	r3, [r2, #0]
}
 8002124:	bf00      	nop
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	40007000 	.word	0x40007000

08002134 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002138:	4b04      	ldr	r3, [pc, #16]	; (800214c <HAL_PWREx_GetVoltageRange+0x18>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002140:	4618      	mov	r0, r3
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	40007000 	.word	0x40007000

08002150 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800215e:	d130      	bne.n	80021c2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002160:	4b23      	ldr	r3, [pc, #140]	; (80021f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002168:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800216c:	d038      	beq.n	80021e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800216e:	4b20      	ldr	r3, [pc, #128]	; (80021f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002176:	4a1e      	ldr	r2, [pc, #120]	; (80021f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002178:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800217c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800217e:	4b1d      	ldr	r3, [pc, #116]	; (80021f4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2232      	movs	r2, #50	; 0x32
 8002184:	fb02 f303 	mul.w	r3, r2, r3
 8002188:	4a1b      	ldr	r2, [pc, #108]	; (80021f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800218a:	fba2 2303 	umull	r2, r3, r2, r3
 800218e:	0c9b      	lsrs	r3, r3, #18
 8002190:	3301      	adds	r3, #1
 8002192:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002194:	e002      	b.n	800219c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	3b01      	subs	r3, #1
 800219a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800219c:	4b14      	ldr	r3, [pc, #80]	; (80021f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800219e:	695b      	ldr	r3, [r3, #20]
 80021a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021a8:	d102      	bne.n	80021b0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1f2      	bne.n	8002196 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021b0:	4b0f      	ldr	r3, [pc, #60]	; (80021f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021b2:	695b      	ldr	r3, [r3, #20]
 80021b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021bc:	d110      	bne.n	80021e0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e00f      	b.n	80021e2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80021c2:	4b0b      	ldr	r3, [pc, #44]	; (80021f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ce:	d007      	beq.n	80021e0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021d0:	4b07      	ldr	r3, [pc, #28]	; (80021f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021d8:	4a05      	ldr	r2, [pc, #20]	; (80021f0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021de:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3714      	adds	r7, #20
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	40007000 	.word	0x40007000
 80021f4:	20000000 	.word	0x20000000
 80021f8:	431bde83 	.word	0x431bde83

080021fc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002200:	4b05      	ldr	r3, [pc, #20]	; (8002218 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	4a04      	ldr	r2, [pc, #16]	; (8002218 <HAL_PWREx_EnableVddUSB+0x1c>)
 8002206:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800220a:	6053      	str	r3, [r2, #4]
}
 800220c:	bf00      	nop
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	40007000 	.word	0x40007000

0800221c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af02      	add	r7, sp, #8
 8002222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002224:	f7ff f8ae 	bl	8001384 <HAL_GetTick>
 8002228:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d101      	bne.n	8002234 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e063      	b.n	80022fc <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800223a:	b2db      	uxtb	r3, r3
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10b      	bne.n	8002258 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2200      	movs	r2, #0
 8002244:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f7fe fddb 	bl	8000e04 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800224e:	f241 3188 	movw	r1, #5000	; 0x1388
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 f858 	bl	8002308 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	3b01      	subs	r3, #1
 8002268:	021a      	lsls	r2, r3, #8
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	430a      	orrs	r2, r1
 8002270:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	2200      	movs	r2, #0
 800227c:	2120      	movs	r1, #32
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 f850 	bl	8002324 <QSPI_WaitFlagStateUntilTimeout>
 8002284:	4603      	mov	r3, r0
 8002286:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8002288:	7afb      	ldrb	r3, [r7, #11]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d131      	bne.n	80022f2 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002298:	f023 0310 	bic.w	r3, r3, #16
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	6852      	ldr	r2, [r2, #4]
 80022a0:	0611      	lsls	r1, r2, #24
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	68d2      	ldr	r2, [r2, #12]
 80022a6:	4311      	orrs	r1, r2
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	6812      	ldr	r2, [r2, #0]
 80022ac:	430b      	orrs	r3, r1
 80022ae:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	4b13      	ldr	r3, [pc, #76]	; (8002304 <HAL_QSPI_Init+0xe8>)
 80022b8:	4013      	ands	r3, r2
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	6912      	ldr	r2, [r2, #16]
 80022be:	0411      	lsls	r1, r2, #16
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	6952      	ldr	r2, [r2, #20]
 80022c4:	4311      	orrs	r1, r2
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	6992      	ldr	r2, [r2, #24]
 80022ca:	4311      	orrs	r1, r2
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	6812      	ldr	r2, [r2, #0]
 80022d0:	430b      	orrs	r3, r1
 80022d2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f042 0201 	orr.w	r2, r2, #1
 80022e2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2201      	movs	r2, #1
 80022ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	2200      	movs	r2, #0
 80022f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 80022fa:	7afb      	ldrb	r3, [r7, #11]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3710      	adds	r7, #16
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	ffe0f8fe 	.word	0xffe0f8fe

08002308 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	603b      	str	r3, [r7, #0]
 8002330:	4613      	mov	r3, r2
 8002332:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8002334:	e01a      	b.n	800236c <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002336:	69bb      	ldr	r3, [r7, #24]
 8002338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800233c:	d016      	beq.n	800236c <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800233e:	f7ff f821 	bl	8001384 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	429a      	cmp	r2, r3
 800234c:	d302      	bcc.n	8002354 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d10b      	bne.n	800236c <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2204      	movs	r2, #4
 8002358:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002360:	f043 0201 	orr.w	r2, r3, #1
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e00e      	b.n	800238a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689a      	ldr	r2, [r3, #8]
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	4013      	ands	r3, r2
 8002376:	2b00      	cmp	r3, #0
 8002378:	bf14      	ite	ne
 800237a:	2301      	movne	r3, #1
 800237c:	2300      	moveq	r3, #0
 800237e:	b2db      	uxtb	r3, r3
 8002380:	461a      	mov	r2, r3
 8002382:	79fb      	ldrb	r3, [r7, #7]
 8002384:	429a      	cmp	r2, r3
 8002386:	d1d6      	bne.n	8002336 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002388:	2300      	movs	r3, #0
}
 800238a:	4618      	mov	r0, r3
 800238c:	3710      	adds	r7, #16
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
	...

08002394 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b088      	sub	sp, #32
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e3ca      	b.n	8002b3c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023a6:	4b97      	ldr	r3, [pc, #604]	; (8002604 <HAL_RCC_OscConfig+0x270>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 030c 	and.w	r3, r3, #12
 80023ae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023b0:	4b94      	ldr	r3, [pc, #592]	; (8002604 <HAL_RCC_OscConfig+0x270>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	f003 0303 	and.w	r3, r3, #3
 80023b8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0310 	and.w	r3, r3, #16
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	f000 80e4 	beq.w	8002590 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d007      	beq.n	80023de <HAL_RCC_OscConfig+0x4a>
 80023ce:	69bb      	ldr	r3, [r7, #24]
 80023d0:	2b0c      	cmp	r3, #12
 80023d2:	f040 808b 	bne.w	80024ec <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	f040 8087 	bne.w	80024ec <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023de:	4b89      	ldr	r3, [pc, #548]	; (8002604 <HAL_RCC_OscConfig+0x270>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d005      	beq.n	80023f6 <HAL_RCC_OscConfig+0x62>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	699b      	ldr	r3, [r3, #24]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e3a2      	b.n	8002b3c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a1a      	ldr	r2, [r3, #32]
 80023fa:	4b82      	ldr	r3, [pc, #520]	; (8002604 <HAL_RCC_OscConfig+0x270>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0308 	and.w	r3, r3, #8
 8002402:	2b00      	cmp	r3, #0
 8002404:	d004      	beq.n	8002410 <HAL_RCC_OscConfig+0x7c>
 8002406:	4b7f      	ldr	r3, [pc, #508]	; (8002604 <HAL_RCC_OscConfig+0x270>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800240e:	e005      	b.n	800241c <HAL_RCC_OscConfig+0x88>
 8002410:	4b7c      	ldr	r3, [pc, #496]	; (8002604 <HAL_RCC_OscConfig+0x270>)
 8002412:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002416:	091b      	lsrs	r3, r3, #4
 8002418:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800241c:	4293      	cmp	r3, r2
 800241e:	d223      	bcs.n	8002468 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	4618      	mov	r0, r3
 8002426:	f000 fd55 	bl	8002ed4 <RCC_SetFlashLatencyFromMSIRange>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e383      	b.n	8002b3c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002434:	4b73      	ldr	r3, [pc, #460]	; (8002604 <HAL_RCC_OscConfig+0x270>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a72      	ldr	r2, [pc, #456]	; (8002604 <HAL_RCC_OscConfig+0x270>)
 800243a:	f043 0308 	orr.w	r3, r3, #8
 800243e:	6013      	str	r3, [r2, #0]
 8002440:	4b70      	ldr	r3, [pc, #448]	; (8002604 <HAL_RCC_OscConfig+0x270>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	496d      	ldr	r1, [pc, #436]	; (8002604 <HAL_RCC_OscConfig+0x270>)
 800244e:	4313      	orrs	r3, r2
 8002450:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002452:	4b6c      	ldr	r3, [pc, #432]	; (8002604 <HAL_RCC_OscConfig+0x270>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	021b      	lsls	r3, r3, #8
 8002460:	4968      	ldr	r1, [pc, #416]	; (8002604 <HAL_RCC_OscConfig+0x270>)
 8002462:	4313      	orrs	r3, r2
 8002464:	604b      	str	r3, [r1, #4]
 8002466:	e025      	b.n	80024b4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002468:	4b66      	ldr	r3, [pc, #408]	; (8002604 <HAL_RCC_OscConfig+0x270>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a65      	ldr	r2, [pc, #404]	; (8002604 <HAL_RCC_OscConfig+0x270>)
 800246e:	f043 0308 	orr.w	r3, r3, #8
 8002472:	6013      	str	r3, [r2, #0]
 8002474:	4b63      	ldr	r3, [pc, #396]	; (8002604 <HAL_RCC_OscConfig+0x270>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a1b      	ldr	r3, [r3, #32]
 8002480:	4960      	ldr	r1, [pc, #384]	; (8002604 <HAL_RCC_OscConfig+0x270>)
 8002482:	4313      	orrs	r3, r2
 8002484:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002486:	4b5f      	ldr	r3, [pc, #380]	; (8002604 <HAL_RCC_OscConfig+0x270>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	021b      	lsls	r3, r3, #8
 8002494:	495b      	ldr	r1, [pc, #364]	; (8002604 <HAL_RCC_OscConfig+0x270>)
 8002496:	4313      	orrs	r3, r2
 8002498:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d109      	bne.n	80024b4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f000 fd15 	bl	8002ed4 <RCC_SetFlashLatencyFromMSIRange>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e343      	b.n	8002b3c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024b4:	f000 fc4a 	bl	8002d4c <HAL_RCC_GetSysClockFreq>
 80024b8:	4602      	mov	r2, r0
 80024ba:	4b52      	ldr	r3, [pc, #328]	; (8002604 <HAL_RCC_OscConfig+0x270>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	091b      	lsrs	r3, r3, #4
 80024c0:	f003 030f 	and.w	r3, r3, #15
 80024c4:	4950      	ldr	r1, [pc, #320]	; (8002608 <HAL_RCC_OscConfig+0x274>)
 80024c6:	5ccb      	ldrb	r3, [r1, r3]
 80024c8:	f003 031f 	and.w	r3, r3, #31
 80024cc:	fa22 f303 	lsr.w	r3, r2, r3
 80024d0:	4a4e      	ldr	r2, [pc, #312]	; (800260c <HAL_RCC_OscConfig+0x278>)
 80024d2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80024d4:	4b4e      	ldr	r3, [pc, #312]	; (8002610 <HAL_RCC_OscConfig+0x27c>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4618      	mov	r0, r3
 80024da:	f7fe ff03 	bl	80012e4 <HAL_InitTick>
 80024de:	4603      	mov	r3, r0
 80024e0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80024e2:	7bfb      	ldrb	r3, [r7, #15]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d052      	beq.n	800258e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80024e8:	7bfb      	ldrb	r3, [r7, #15]
 80024ea:	e327      	b.n	8002b3c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d032      	beq.n	800255a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80024f4:	4b43      	ldr	r3, [pc, #268]	; (8002604 <HAL_RCC_OscConfig+0x270>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a42      	ldr	r2, [pc, #264]	; (8002604 <HAL_RCC_OscConfig+0x270>)
 80024fa:	f043 0301 	orr.w	r3, r3, #1
 80024fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002500:	f7fe ff40 	bl	8001384 <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002508:	f7fe ff3c 	bl	8001384 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e310      	b.n	8002b3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800251a:	4b3a      	ldr	r3, [pc, #232]	; (8002604 <HAL_RCC_OscConfig+0x270>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d0f0      	beq.n	8002508 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002526:	4b37      	ldr	r3, [pc, #220]	; (8002604 <HAL_RCC_OscConfig+0x270>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a36      	ldr	r2, [pc, #216]	; (8002604 <HAL_RCC_OscConfig+0x270>)
 800252c:	f043 0308 	orr.w	r3, r3, #8
 8002530:	6013      	str	r3, [r2, #0]
 8002532:	4b34      	ldr	r3, [pc, #208]	; (8002604 <HAL_RCC_OscConfig+0x270>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a1b      	ldr	r3, [r3, #32]
 800253e:	4931      	ldr	r1, [pc, #196]	; (8002604 <HAL_RCC_OscConfig+0x270>)
 8002540:	4313      	orrs	r3, r2
 8002542:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002544:	4b2f      	ldr	r3, [pc, #188]	; (8002604 <HAL_RCC_OscConfig+0x270>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	69db      	ldr	r3, [r3, #28]
 8002550:	021b      	lsls	r3, r3, #8
 8002552:	492c      	ldr	r1, [pc, #176]	; (8002604 <HAL_RCC_OscConfig+0x270>)
 8002554:	4313      	orrs	r3, r2
 8002556:	604b      	str	r3, [r1, #4]
 8002558:	e01a      	b.n	8002590 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800255a:	4b2a      	ldr	r3, [pc, #168]	; (8002604 <HAL_RCC_OscConfig+0x270>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a29      	ldr	r2, [pc, #164]	; (8002604 <HAL_RCC_OscConfig+0x270>)
 8002560:	f023 0301 	bic.w	r3, r3, #1
 8002564:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002566:	f7fe ff0d 	bl	8001384 <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800256c:	e008      	b.n	8002580 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800256e:	f7fe ff09 	bl	8001384 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e2dd      	b.n	8002b3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002580:	4b20      	ldr	r3, [pc, #128]	; (8002604 <HAL_RCC_OscConfig+0x270>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f003 0302 	and.w	r3, r3, #2
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1f0      	bne.n	800256e <HAL_RCC_OscConfig+0x1da>
 800258c:	e000      	b.n	8002590 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800258e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	2b00      	cmp	r3, #0
 800259a:	d074      	beq.n	8002686 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	2b08      	cmp	r3, #8
 80025a0:	d005      	beq.n	80025ae <HAL_RCC_OscConfig+0x21a>
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	2b0c      	cmp	r3, #12
 80025a6:	d10e      	bne.n	80025c6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	2b03      	cmp	r3, #3
 80025ac:	d10b      	bne.n	80025c6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ae:	4b15      	ldr	r3, [pc, #84]	; (8002604 <HAL_RCC_OscConfig+0x270>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d064      	beq.n	8002684 <HAL_RCC_OscConfig+0x2f0>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d160      	bne.n	8002684 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e2ba      	b.n	8002b3c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ce:	d106      	bne.n	80025de <HAL_RCC_OscConfig+0x24a>
 80025d0:	4b0c      	ldr	r3, [pc, #48]	; (8002604 <HAL_RCC_OscConfig+0x270>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a0b      	ldr	r2, [pc, #44]	; (8002604 <HAL_RCC_OscConfig+0x270>)
 80025d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025da:	6013      	str	r3, [r2, #0]
 80025dc:	e026      	b.n	800262c <HAL_RCC_OscConfig+0x298>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025e6:	d115      	bne.n	8002614 <HAL_RCC_OscConfig+0x280>
 80025e8:	4b06      	ldr	r3, [pc, #24]	; (8002604 <HAL_RCC_OscConfig+0x270>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a05      	ldr	r2, [pc, #20]	; (8002604 <HAL_RCC_OscConfig+0x270>)
 80025ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025f2:	6013      	str	r3, [r2, #0]
 80025f4:	4b03      	ldr	r3, [pc, #12]	; (8002604 <HAL_RCC_OscConfig+0x270>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a02      	ldr	r2, [pc, #8]	; (8002604 <HAL_RCC_OscConfig+0x270>)
 80025fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025fe:	6013      	str	r3, [r2, #0]
 8002600:	e014      	b.n	800262c <HAL_RCC_OscConfig+0x298>
 8002602:	bf00      	nop
 8002604:	40021000 	.word	0x40021000
 8002608:	08004b98 	.word	0x08004b98
 800260c:	20000000 	.word	0x20000000
 8002610:	20000004 	.word	0x20000004
 8002614:	4ba0      	ldr	r3, [pc, #640]	; (8002898 <HAL_RCC_OscConfig+0x504>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a9f      	ldr	r2, [pc, #636]	; (8002898 <HAL_RCC_OscConfig+0x504>)
 800261a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800261e:	6013      	str	r3, [r2, #0]
 8002620:	4b9d      	ldr	r3, [pc, #628]	; (8002898 <HAL_RCC_OscConfig+0x504>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a9c      	ldr	r2, [pc, #624]	; (8002898 <HAL_RCC_OscConfig+0x504>)
 8002626:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800262a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d013      	beq.n	800265c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002634:	f7fe fea6 	bl	8001384 <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800263c:	f7fe fea2 	bl	8001384 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b64      	cmp	r3, #100	; 0x64
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e276      	b.n	8002b3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800264e:	4b92      	ldr	r3, [pc, #584]	; (8002898 <HAL_RCC_OscConfig+0x504>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d0f0      	beq.n	800263c <HAL_RCC_OscConfig+0x2a8>
 800265a:	e014      	b.n	8002686 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265c:	f7fe fe92 	bl	8001384 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002664:	f7fe fe8e 	bl	8001384 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b64      	cmp	r3, #100	; 0x64
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e262      	b.n	8002b3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002676:	4b88      	ldr	r3, [pc, #544]	; (8002898 <HAL_RCC_OscConfig+0x504>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1f0      	bne.n	8002664 <HAL_RCC_OscConfig+0x2d0>
 8002682:	e000      	b.n	8002686 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002684:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d060      	beq.n	8002754 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	2b04      	cmp	r3, #4
 8002696:	d005      	beq.n	80026a4 <HAL_RCC_OscConfig+0x310>
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	2b0c      	cmp	r3, #12
 800269c:	d119      	bne.n	80026d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d116      	bne.n	80026d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026a4:	4b7c      	ldr	r3, [pc, #496]	; (8002898 <HAL_RCC_OscConfig+0x504>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d005      	beq.n	80026bc <HAL_RCC_OscConfig+0x328>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d101      	bne.n	80026bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e23f      	b.n	8002b3c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026bc:	4b76      	ldr	r3, [pc, #472]	; (8002898 <HAL_RCC_OscConfig+0x504>)
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	061b      	lsls	r3, r3, #24
 80026ca:	4973      	ldr	r1, [pc, #460]	; (8002898 <HAL_RCC_OscConfig+0x504>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026d0:	e040      	b.n	8002754 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	68db      	ldr	r3, [r3, #12]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d023      	beq.n	8002722 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026da:	4b6f      	ldr	r3, [pc, #444]	; (8002898 <HAL_RCC_OscConfig+0x504>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a6e      	ldr	r2, [pc, #440]	; (8002898 <HAL_RCC_OscConfig+0x504>)
 80026e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e6:	f7fe fe4d 	bl	8001384 <HAL_GetTick>
 80026ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026ec:	e008      	b.n	8002700 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ee:	f7fe fe49 	bl	8001384 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e21d      	b.n	8002b3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002700:	4b65      	ldr	r3, [pc, #404]	; (8002898 <HAL_RCC_OscConfig+0x504>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002708:	2b00      	cmp	r3, #0
 800270a:	d0f0      	beq.n	80026ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800270c:	4b62      	ldr	r3, [pc, #392]	; (8002898 <HAL_RCC_OscConfig+0x504>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	691b      	ldr	r3, [r3, #16]
 8002718:	061b      	lsls	r3, r3, #24
 800271a:	495f      	ldr	r1, [pc, #380]	; (8002898 <HAL_RCC_OscConfig+0x504>)
 800271c:	4313      	orrs	r3, r2
 800271e:	604b      	str	r3, [r1, #4]
 8002720:	e018      	b.n	8002754 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002722:	4b5d      	ldr	r3, [pc, #372]	; (8002898 <HAL_RCC_OscConfig+0x504>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a5c      	ldr	r2, [pc, #368]	; (8002898 <HAL_RCC_OscConfig+0x504>)
 8002728:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800272c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800272e:	f7fe fe29 	bl	8001384 <HAL_GetTick>
 8002732:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002734:	e008      	b.n	8002748 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002736:	f7fe fe25 	bl	8001384 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	2b02      	cmp	r3, #2
 8002742:	d901      	bls.n	8002748 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e1f9      	b.n	8002b3c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002748:	4b53      	ldr	r3, [pc, #332]	; (8002898 <HAL_RCC_OscConfig+0x504>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002750:	2b00      	cmp	r3, #0
 8002752:	d1f0      	bne.n	8002736 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0308 	and.w	r3, r3, #8
 800275c:	2b00      	cmp	r3, #0
 800275e:	d03c      	beq.n	80027da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	695b      	ldr	r3, [r3, #20]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d01c      	beq.n	80027a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002768:	4b4b      	ldr	r3, [pc, #300]	; (8002898 <HAL_RCC_OscConfig+0x504>)
 800276a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800276e:	4a4a      	ldr	r2, [pc, #296]	; (8002898 <HAL_RCC_OscConfig+0x504>)
 8002770:	f043 0301 	orr.w	r3, r3, #1
 8002774:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002778:	f7fe fe04 	bl	8001384 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800277e:	e008      	b.n	8002792 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002780:	f7fe fe00 	bl	8001384 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e1d4      	b.n	8002b3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002792:	4b41      	ldr	r3, [pc, #260]	; (8002898 <HAL_RCC_OscConfig+0x504>)
 8002794:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d0ef      	beq.n	8002780 <HAL_RCC_OscConfig+0x3ec>
 80027a0:	e01b      	b.n	80027da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027a2:	4b3d      	ldr	r3, [pc, #244]	; (8002898 <HAL_RCC_OscConfig+0x504>)
 80027a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027a8:	4a3b      	ldr	r2, [pc, #236]	; (8002898 <HAL_RCC_OscConfig+0x504>)
 80027aa:	f023 0301 	bic.w	r3, r3, #1
 80027ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b2:	f7fe fde7 	bl	8001384 <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027b8:	e008      	b.n	80027cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027ba:	f7fe fde3 	bl	8001384 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e1b7      	b.n	8002b3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027cc:	4b32      	ldr	r3, [pc, #200]	; (8002898 <HAL_RCC_OscConfig+0x504>)
 80027ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1ef      	bne.n	80027ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0304 	and.w	r3, r3, #4
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	f000 80a6 	beq.w	8002934 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027e8:	2300      	movs	r3, #0
 80027ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80027ec:	4b2a      	ldr	r3, [pc, #168]	; (8002898 <HAL_RCC_OscConfig+0x504>)
 80027ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d10d      	bne.n	8002814 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027f8:	4b27      	ldr	r3, [pc, #156]	; (8002898 <HAL_RCC_OscConfig+0x504>)
 80027fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fc:	4a26      	ldr	r2, [pc, #152]	; (8002898 <HAL_RCC_OscConfig+0x504>)
 80027fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002802:	6593      	str	r3, [r2, #88]	; 0x58
 8002804:	4b24      	ldr	r3, [pc, #144]	; (8002898 <HAL_RCC_OscConfig+0x504>)
 8002806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280c:	60bb      	str	r3, [r7, #8]
 800280e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002810:	2301      	movs	r3, #1
 8002812:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002814:	4b21      	ldr	r3, [pc, #132]	; (800289c <HAL_RCC_OscConfig+0x508>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281c:	2b00      	cmp	r3, #0
 800281e:	d118      	bne.n	8002852 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002820:	4b1e      	ldr	r3, [pc, #120]	; (800289c <HAL_RCC_OscConfig+0x508>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a1d      	ldr	r2, [pc, #116]	; (800289c <HAL_RCC_OscConfig+0x508>)
 8002826:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800282a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800282c:	f7fe fdaa 	bl	8001384 <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002834:	f7fe fda6 	bl	8001384 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e17a      	b.n	8002b3c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002846:	4b15      	ldr	r3, [pc, #84]	; (800289c <HAL_RCC_OscConfig+0x508>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800284e:	2b00      	cmp	r3, #0
 8002850:	d0f0      	beq.n	8002834 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	2b01      	cmp	r3, #1
 8002858:	d108      	bne.n	800286c <HAL_RCC_OscConfig+0x4d8>
 800285a:	4b0f      	ldr	r3, [pc, #60]	; (8002898 <HAL_RCC_OscConfig+0x504>)
 800285c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002860:	4a0d      	ldr	r2, [pc, #52]	; (8002898 <HAL_RCC_OscConfig+0x504>)
 8002862:	f043 0301 	orr.w	r3, r3, #1
 8002866:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800286a:	e029      	b.n	80028c0 <HAL_RCC_OscConfig+0x52c>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	2b05      	cmp	r3, #5
 8002872:	d115      	bne.n	80028a0 <HAL_RCC_OscConfig+0x50c>
 8002874:	4b08      	ldr	r3, [pc, #32]	; (8002898 <HAL_RCC_OscConfig+0x504>)
 8002876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287a:	4a07      	ldr	r2, [pc, #28]	; (8002898 <HAL_RCC_OscConfig+0x504>)
 800287c:	f043 0304 	orr.w	r3, r3, #4
 8002880:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002884:	4b04      	ldr	r3, [pc, #16]	; (8002898 <HAL_RCC_OscConfig+0x504>)
 8002886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800288a:	4a03      	ldr	r2, [pc, #12]	; (8002898 <HAL_RCC_OscConfig+0x504>)
 800288c:	f043 0301 	orr.w	r3, r3, #1
 8002890:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002894:	e014      	b.n	80028c0 <HAL_RCC_OscConfig+0x52c>
 8002896:	bf00      	nop
 8002898:	40021000 	.word	0x40021000
 800289c:	40007000 	.word	0x40007000
 80028a0:	4b9c      	ldr	r3, [pc, #624]	; (8002b14 <HAL_RCC_OscConfig+0x780>)
 80028a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028a6:	4a9b      	ldr	r2, [pc, #620]	; (8002b14 <HAL_RCC_OscConfig+0x780>)
 80028a8:	f023 0301 	bic.w	r3, r3, #1
 80028ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80028b0:	4b98      	ldr	r3, [pc, #608]	; (8002b14 <HAL_RCC_OscConfig+0x780>)
 80028b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b6:	4a97      	ldr	r2, [pc, #604]	; (8002b14 <HAL_RCC_OscConfig+0x780>)
 80028b8:	f023 0304 	bic.w	r3, r3, #4
 80028bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d016      	beq.n	80028f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c8:	f7fe fd5c 	bl	8001384 <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028ce:	e00a      	b.n	80028e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028d0:	f7fe fd58 	bl	8001384 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	f241 3288 	movw	r2, #5000	; 0x1388
 80028de:	4293      	cmp	r3, r2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e12a      	b.n	8002b3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028e6:	4b8b      	ldr	r3, [pc, #556]	; (8002b14 <HAL_RCC_OscConfig+0x780>)
 80028e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ec:	f003 0302 	and.w	r3, r3, #2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d0ed      	beq.n	80028d0 <HAL_RCC_OscConfig+0x53c>
 80028f4:	e015      	b.n	8002922 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f6:	f7fe fd45 	bl	8001384 <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028fc:	e00a      	b.n	8002914 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028fe:	f7fe fd41 	bl	8001384 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	f241 3288 	movw	r2, #5000	; 0x1388
 800290c:	4293      	cmp	r3, r2
 800290e:	d901      	bls.n	8002914 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e113      	b.n	8002b3c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002914:	4b7f      	ldr	r3, [pc, #508]	; (8002b14 <HAL_RCC_OscConfig+0x780>)
 8002916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1ed      	bne.n	80028fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002922:	7ffb      	ldrb	r3, [r7, #31]
 8002924:	2b01      	cmp	r3, #1
 8002926:	d105      	bne.n	8002934 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002928:	4b7a      	ldr	r3, [pc, #488]	; (8002b14 <HAL_RCC_OscConfig+0x780>)
 800292a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800292c:	4a79      	ldr	r2, [pc, #484]	; (8002b14 <HAL_RCC_OscConfig+0x780>)
 800292e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002932:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002938:	2b00      	cmp	r3, #0
 800293a:	f000 80fe 	beq.w	8002b3a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002942:	2b02      	cmp	r3, #2
 8002944:	f040 80d0 	bne.w	8002ae8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002948:	4b72      	ldr	r3, [pc, #456]	; (8002b14 <HAL_RCC_OscConfig+0x780>)
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	f003 0203 	and.w	r2, r3, #3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002958:	429a      	cmp	r2, r3
 800295a:	d130      	bne.n	80029be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002966:	3b01      	subs	r3, #1
 8002968:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800296a:	429a      	cmp	r2, r3
 800296c:	d127      	bne.n	80029be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002978:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800297a:	429a      	cmp	r2, r3
 800297c:	d11f      	bne.n	80029be <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002988:	2a07      	cmp	r2, #7
 800298a:	bf14      	ite	ne
 800298c:	2201      	movne	r2, #1
 800298e:	2200      	moveq	r2, #0
 8002990:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002992:	4293      	cmp	r3, r2
 8002994:	d113      	bne.n	80029be <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a0:	085b      	lsrs	r3, r3, #1
 80029a2:	3b01      	subs	r3, #1
 80029a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d109      	bne.n	80029be <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b4:	085b      	lsrs	r3, r3, #1
 80029b6:	3b01      	subs	r3, #1
 80029b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d06e      	beq.n	8002a9c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	2b0c      	cmp	r3, #12
 80029c2:	d069      	beq.n	8002a98 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80029c4:	4b53      	ldr	r3, [pc, #332]	; (8002b14 <HAL_RCC_OscConfig+0x780>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d105      	bne.n	80029dc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80029d0:	4b50      	ldr	r3, [pc, #320]	; (8002b14 <HAL_RCC_OscConfig+0x780>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d001      	beq.n	80029e0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e0ad      	b.n	8002b3c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80029e0:	4b4c      	ldr	r3, [pc, #304]	; (8002b14 <HAL_RCC_OscConfig+0x780>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a4b      	ldr	r2, [pc, #300]	; (8002b14 <HAL_RCC_OscConfig+0x780>)
 80029e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029ea:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80029ec:	f7fe fcca 	bl	8001384 <HAL_GetTick>
 80029f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029f2:	e008      	b.n	8002a06 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029f4:	f7fe fcc6 	bl	8001384 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d901      	bls.n	8002a06 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e09a      	b.n	8002b3c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a06:	4b43      	ldr	r3, [pc, #268]	; (8002b14 <HAL_RCC_OscConfig+0x780>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1f0      	bne.n	80029f4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a12:	4b40      	ldr	r3, [pc, #256]	; (8002b14 <HAL_RCC_OscConfig+0x780>)
 8002a14:	68da      	ldr	r2, [r3, #12]
 8002a16:	4b40      	ldr	r3, [pc, #256]	; (8002b18 <HAL_RCC_OscConfig+0x784>)
 8002a18:	4013      	ands	r3, r2
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002a1e:	687a      	ldr	r2, [r7, #4]
 8002a20:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002a22:	3a01      	subs	r2, #1
 8002a24:	0112      	lsls	r2, r2, #4
 8002a26:	4311      	orrs	r1, r2
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a2c:	0212      	lsls	r2, r2, #8
 8002a2e:	4311      	orrs	r1, r2
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002a34:	0852      	lsrs	r2, r2, #1
 8002a36:	3a01      	subs	r2, #1
 8002a38:	0552      	lsls	r2, r2, #21
 8002a3a:	4311      	orrs	r1, r2
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002a40:	0852      	lsrs	r2, r2, #1
 8002a42:	3a01      	subs	r2, #1
 8002a44:	0652      	lsls	r2, r2, #25
 8002a46:	4311      	orrs	r1, r2
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002a4c:	0912      	lsrs	r2, r2, #4
 8002a4e:	0452      	lsls	r2, r2, #17
 8002a50:	430a      	orrs	r2, r1
 8002a52:	4930      	ldr	r1, [pc, #192]	; (8002b14 <HAL_RCC_OscConfig+0x780>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002a58:	4b2e      	ldr	r3, [pc, #184]	; (8002b14 <HAL_RCC_OscConfig+0x780>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a2d      	ldr	r2, [pc, #180]	; (8002b14 <HAL_RCC_OscConfig+0x780>)
 8002a5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a62:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002a64:	4b2b      	ldr	r3, [pc, #172]	; (8002b14 <HAL_RCC_OscConfig+0x780>)
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	4a2a      	ldr	r2, [pc, #168]	; (8002b14 <HAL_RCC_OscConfig+0x780>)
 8002a6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a6e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a70:	f7fe fc88 	bl	8001384 <HAL_GetTick>
 8002a74:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a76:	e008      	b.n	8002a8a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a78:	f7fe fc84 	bl	8001384 <HAL_GetTick>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	1ad3      	subs	r3, r2, r3
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d901      	bls.n	8002a8a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002a86:	2303      	movs	r3, #3
 8002a88:	e058      	b.n	8002b3c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a8a:	4b22      	ldr	r3, [pc, #136]	; (8002b14 <HAL_RCC_OscConfig+0x780>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d0f0      	beq.n	8002a78 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a96:	e050      	b.n	8002b3a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e04f      	b.n	8002b3c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a9c:	4b1d      	ldr	r3, [pc, #116]	; (8002b14 <HAL_RCC_OscConfig+0x780>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d148      	bne.n	8002b3a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002aa8:	4b1a      	ldr	r3, [pc, #104]	; (8002b14 <HAL_RCC_OscConfig+0x780>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a19      	ldr	r2, [pc, #100]	; (8002b14 <HAL_RCC_OscConfig+0x780>)
 8002aae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002ab2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ab4:	4b17      	ldr	r3, [pc, #92]	; (8002b14 <HAL_RCC_OscConfig+0x780>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	4a16      	ldr	r2, [pc, #88]	; (8002b14 <HAL_RCC_OscConfig+0x780>)
 8002aba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002abe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002ac0:	f7fe fc60 	bl	8001384 <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac8:	f7fe fc5c 	bl	8001384 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e030      	b.n	8002b3c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ada:	4b0e      	ldr	r3, [pc, #56]	; (8002b14 <HAL_RCC_OscConfig+0x780>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d0f0      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x734>
 8002ae6:	e028      	b.n	8002b3a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ae8:	69bb      	ldr	r3, [r7, #24]
 8002aea:	2b0c      	cmp	r3, #12
 8002aec:	d023      	beq.n	8002b36 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aee:	4b09      	ldr	r3, [pc, #36]	; (8002b14 <HAL_RCC_OscConfig+0x780>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a08      	ldr	r2, [pc, #32]	; (8002b14 <HAL_RCC_OscConfig+0x780>)
 8002af4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002af8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afa:	f7fe fc43 	bl	8001384 <HAL_GetTick>
 8002afe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b00:	e00c      	b.n	8002b1c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b02:	f7fe fc3f 	bl	8001384 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	2b02      	cmp	r3, #2
 8002b0e:	d905      	bls.n	8002b1c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002b10:	2303      	movs	r3, #3
 8002b12:	e013      	b.n	8002b3c <HAL_RCC_OscConfig+0x7a8>
 8002b14:	40021000 	.word	0x40021000
 8002b18:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b1c:	4b09      	ldr	r3, [pc, #36]	; (8002b44 <HAL_RCC_OscConfig+0x7b0>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d1ec      	bne.n	8002b02 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002b28:	4b06      	ldr	r3, [pc, #24]	; (8002b44 <HAL_RCC_OscConfig+0x7b0>)
 8002b2a:	68da      	ldr	r2, [r3, #12]
 8002b2c:	4905      	ldr	r1, [pc, #20]	; (8002b44 <HAL_RCC_OscConfig+0x7b0>)
 8002b2e:	4b06      	ldr	r3, [pc, #24]	; (8002b48 <HAL_RCC_OscConfig+0x7b4>)
 8002b30:	4013      	ands	r3, r2
 8002b32:	60cb      	str	r3, [r1, #12]
 8002b34:	e001      	b.n	8002b3a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e000      	b.n	8002b3c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3720      	adds	r7, #32
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}
 8002b44:	40021000 	.word	0x40021000
 8002b48:	feeefffc 	.word	0xfeeefffc

08002b4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d101      	bne.n	8002b60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e0e7      	b.n	8002d30 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b60:	4b75      	ldr	r3, [pc, #468]	; (8002d38 <HAL_RCC_ClockConfig+0x1ec>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	683a      	ldr	r2, [r7, #0]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d910      	bls.n	8002b90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b6e:	4b72      	ldr	r3, [pc, #456]	; (8002d38 <HAL_RCC_ClockConfig+0x1ec>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f023 0207 	bic.w	r2, r3, #7
 8002b76:	4970      	ldr	r1, [pc, #448]	; (8002d38 <HAL_RCC_ClockConfig+0x1ec>)
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b7e:	4b6e      	ldr	r3, [pc, #440]	; (8002d38 <HAL_RCC_ClockConfig+0x1ec>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0307 	and.w	r3, r3, #7
 8002b86:	683a      	ldr	r2, [r7, #0]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d001      	beq.n	8002b90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e0cf      	b.n	8002d30 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0302 	and.w	r3, r3, #2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d010      	beq.n	8002bbe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689a      	ldr	r2, [r3, #8]
 8002ba0:	4b66      	ldr	r3, [pc, #408]	; (8002d3c <HAL_RCC_ClockConfig+0x1f0>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d908      	bls.n	8002bbe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bac:	4b63      	ldr	r3, [pc, #396]	; (8002d3c <HAL_RCC_ClockConfig+0x1f0>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	4960      	ldr	r1, [pc, #384]	; (8002d3c <HAL_RCC_ClockConfig+0x1f0>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d04c      	beq.n	8002c64 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b03      	cmp	r3, #3
 8002bd0:	d107      	bne.n	8002be2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bd2:	4b5a      	ldr	r3, [pc, #360]	; (8002d3c <HAL_RCC_ClockConfig+0x1f0>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d121      	bne.n	8002c22 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e0a6      	b.n	8002d30 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d107      	bne.n	8002bfa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bea:	4b54      	ldr	r3, [pc, #336]	; (8002d3c <HAL_RCC_ClockConfig+0x1f0>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d115      	bne.n	8002c22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e09a      	b.n	8002d30 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d107      	bne.n	8002c12 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c02:	4b4e      	ldr	r3, [pc, #312]	; (8002d3c <HAL_RCC_ClockConfig+0x1f0>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d109      	bne.n	8002c22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e08e      	b.n	8002d30 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c12:	4b4a      	ldr	r3, [pc, #296]	; (8002d3c <HAL_RCC_ClockConfig+0x1f0>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e086      	b.n	8002d30 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c22:	4b46      	ldr	r3, [pc, #280]	; (8002d3c <HAL_RCC_ClockConfig+0x1f0>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f023 0203 	bic.w	r2, r3, #3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	4943      	ldr	r1, [pc, #268]	; (8002d3c <HAL_RCC_ClockConfig+0x1f0>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c34:	f7fe fba6 	bl	8001384 <HAL_GetTick>
 8002c38:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c3a:	e00a      	b.n	8002c52 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c3c:	f7fe fba2 	bl	8001384 <HAL_GetTick>
 8002c40:	4602      	mov	r2, r0
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e06e      	b.n	8002d30 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c52:	4b3a      	ldr	r3, [pc, #232]	; (8002d3c <HAL_RCC_ClockConfig+0x1f0>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f003 020c 	and.w	r2, r3, #12
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d1eb      	bne.n	8002c3c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d010      	beq.n	8002c92 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	4b31      	ldr	r3, [pc, #196]	; (8002d3c <HAL_RCC_ClockConfig+0x1f0>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d208      	bcs.n	8002c92 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c80:	4b2e      	ldr	r3, [pc, #184]	; (8002d3c <HAL_RCC_ClockConfig+0x1f0>)
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	492b      	ldr	r1, [pc, #172]	; (8002d3c <HAL_RCC_ClockConfig+0x1f0>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c92:	4b29      	ldr	r3, [pc, #164]	; (8002d38 <HAL_RCC_ClockConfig+0x1ec>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0307 	and.w	r3, r3, #7
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d210      	bcs.n	8002cc2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ca0:	4b25      	ldr	r3, [pc, #148]	; (8002d38 <HAL_RCC_ClockConfig+0x1ec>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f023 0207 	bic.w	r2, r3, #7
 8002ca8:	4923      	ldr	r1, [pc, #140]	; (8002d38 <HAL_RCC_ClockConfig+0x1ec>)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cb0:	4b21      	ldr	r3, [pc, #132]	; (8002d38 <HAL_RCC_ClockConfig+0x1ec>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	683a      	ldr	r2, [r7, #0]
 8002cba:	429a      	cmp	r2, r3
 8002cbc:	d001      	beq.n	8002cc2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e036      	b.n	8002d30 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0304 	and.w	r3, r3, #4
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d008      	beq.n	8002ce0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cce:	4b1b      	ldr	r3, [pc, #108]	; (8002d3c <HAL_RCC_ClockConfig+0x1f0>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	4918      	ldr	r1, [pc, #96]	; (8002d3c <HAL_RCC_ClockConfig+0x1f0>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0308 	and.w	r3, r3, #8
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d009      	beq.n	8002d00 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cec:	4b13      	ldr	r3, [pc, #76]	; (8002d3c <HAL_RCC_ClockConfig+0x1f0>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	691b      	ldr	r3, [r3, #16]
 8002cf8:	00db      	lsls	r3, r3, #3
 8002cfa:	4910      	ldr	r1, [pc, #64]	; (8002d3c <HAL_RCC_ClockConfig+0x1f0>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d00:	f000 f824 	bl	8002d4c <HAL_RCC_GetSysClockFreq>
 8002d04:	4602      	mov	r2, r0
 8002d06:	4b0d      	ldr	r3, [pc, #52]	; (8002d3c <HAL_RCC_ClockConfig+0x1f0>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	091b      	lsrs	r3, r3, #4
 8002d0c:	f003 030f 	and.w	r3, r3, #15
 8002d10:	490b      	ldr	r1, [pc, #44]	; (8002d40 <HAL_RCC_ClockConfig+0x1f4>)
 8002d12:	5ccb      	ldrb	r3, [r1, r3]
 8002d14:	f003 031f 	and.w	r3, r3, #31
 8002d18:	fa22 f303 	lsr.w	r3, r2, r3
 8002d1c:	4a09      	ldr	r2, [pc, #36]	; (8002d44 <HAL_RCC_ClockConfig+0x1f8>)
 8002d1e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002d20:	4b09      	ldr	r3, [pc, #36]	; (8002d48 <HAL_RCC_ClockConfig+0x1fc>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4618      	mov	r0, r3
 8002d26:	f7fe fadd 	bl	80012e4 <HAL_InitTick>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	72fb      	strb	r3, [r7, #11]

  return status;
 8002d2e:	7afb      	ldrb	r3, [r7, #11]
}
 8002d30:	4618      	mov	r0, r3
 8002d32:	3710      	adds	r7, #16
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	40022000 	.word	0x40022000
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	08004b98 	.word	0x08004b98
 8002d44:	20000000 	.word	0x20000000
 8002d48:	20000004 	.word	0x20000004

08002d4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b089      	sub	sp, #36	; 0x24
 8002d50:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002d52:	2300      	movs	r3, #0
 8002d54:	61fb      	str	r3, [r7, #28]
 8002d56:	2300      	movs	r3, #0
 8002d58:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002d5a:	4b3e      	ldr	r3, [pc, #248]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d5c:	689b      	ldr	r3, [r3, #8]
 8002d5e:	f003 030c 	and.w	r3, r3, #12
 8002d62:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002d64:	4b3b      	ldr	r3, [pc, #236]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	f003 0303 	and.w	r3, r3, #3
 8002d6c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002d6e:	693b      	ldr	r3, [r7, #16]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d005      	beq.n	8002d80 <HAL_RCC_GetSysClockFreq+0x34>
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	2b0c      	cmp	r3, #12
 8002d78:	d121      	bne.n	8002dbe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d11e      	bne.n	8002dbe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002d80:	4b34      	ldr	r3, [pc, #208]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0308 	and.w	r3, r3, #8
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d107      	bne.n	8002d9c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002d8c:	4b31      	ldr	r3, [pc, #196]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d92:	0a1b      	lsrs	r3, r3, #8
 8002d94:	f003 030f 	and.w	r3, r3, #15
 8002d98:	61fb      	str	r3, [r7, #28]
 8002d9a:	e005      	b.n	8002da8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002d9c:	4b2d      	ldr	r3, [pc, #180]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	091b      	lsrs	r3, r3, #4
 8002da2:	f003 030f 	and.w	r3, r3, #15
 8002da6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002da8:	4a2b      	ldr	r2, [pc, #172]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002db0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d10d      	bne.n	8002dd4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002dbc:	e00a      	b.n	8002dd4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	2b04      	cmp	r3, #4
 8002dc2:	d102      	bne.n	8002dca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002dc4:	4b25      	ldr	r3, [pc, #148]	; (8002e5c <HAL_RCC_GetSysClockFreq+0x110>)
 8002dc6:	61bb      	str	r3, [r7, #24]
 8002dc8:	e004      	b.n	8002dd4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	2b08      	cmp	r3, #8
 8002dce:	d101      	bne.n	8002dd4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002dd0:	4b23      	ldr	r3, [pc, #140]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x114>)
 8002dd2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	2b0c      	cmp	r3, #12
 8002dd8:	d134      	bne.n	8002e44 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002dda:	4b1e      	ldr	r3, [pc, #120]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	f003 0303 	and.w	r3, r3, #3
 8002de2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d003      	beq.n	8002df2 <HAL_RCC_GetSysClockFreq+0xa6>
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	2b03      	cmp	r3, #3
 8002dee:	d003      	beq.n	8002df8 <HAL_RCC_GetSysClockFreq+0xac>
 8002df0:	e005      	b.n	8002dfe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002df2:	4b1a      	ldr	r3, [pc, #104]	; (8002e5c <HAL_RCC_GetSysClockFreq+0x110>)
 8002df4:	617b      	str	r3, [r7, #20]
      break;
 8002df6:	e005      	b.n	8002e04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002df8:	4b19      	ldr	r3, [pc, #100]	; (8002e60 <HAL_RCC_GetSysClockFreq+0x114>)
 8002dfa:	617b      	str	r3, [r7, #20]
      break;
 8002dfc:	e002      	b.n	8002e04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	617b      	str	r3, [r7, #20]
      break;
 8002e02:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e04:	4b13      	ldr	r3, [pc, #76]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	091b      	lsrs	r3, r3, #4
 8002e0a:	f003 0307 	and.w	r3, r3, #7
 8002e0e:	3301      	adds	r3, #1
 8002e10:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e12:	4b10      	ldr	r3, [pc, #64]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	0a1b      	lsrs	r3, r3, #8
 8002e18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e1c:	697a      	ldr	r2, [r7, #20]
 8002e1e:	fb03 f202 	mul.w	r2, r3, r2
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e28:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002e2a:	4b0a      	ldr	r3, [pc, #40]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	0e5b      	lsrs	r3, r3, #25
 8002e30:	f003 0303 	and.w	r3, r3, #3
 8002e34:	3301      	adds	r3, #1
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e42:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002e44:	69bb      	ldr	r3, [r7, #24]
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3724      	adds	r7, #36	; 0x24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	40021000 	.word	0x40021000
 8002e58:	08004bb0 	.word	0x08004bb0
 8002e5c:	00f42400 	.word	0x00f42400
 8002e60:	007a1200 	.word	0x007a1200

08002e64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e64:	b480      	push	{r7}
 8002e66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e68:	4b03      	ldr	r3, [pc, #12]	; (8002e78 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	20000000 	.word	0x20000000

08002e7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e80:	f7ff fff0 	bl	8002e64 <HAL_RCC_GetHCLKFreq>
 8002e84:	4602      	mov	r2, r0
 8002e86:	4b06      	ldr	r3, [pc, #24]	; (8002ea0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	0a1b      	lsrs	r3, r3, #8
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	4904      	ldr	r1, [pc, #16]	; (8002ea4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e92:	5ccb      	ldrb	r3, [r1, r3]
 8002e94:	f003 031f 	and.w	r3, r3, #31
 8002e98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40021000 	.word	0x40021000
 8002ea4:	08004ba8 	.word	0x08004ba8

08002ea8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002eac:	f7ff ffda 	bl	8002e64 <HAL_RCC_GetHCLKFreq>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	0adb      	lsrs	r3, r3, #11
 8002eb8:	f003 0307 	and.w	r3, r3, #7
 8002ebc:	4904      	ldr	r1, [pc, #16]	; (8002ed0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ebe:	5ccb      	ldrb	r3, [r1, r3]
 8002ec0:	f003 031f 	and.w	r3, r3, #31
 8002ec4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	08004ba8 	.word	0x08004ba8

08002ed4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b086      	sub	sp, #24
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002edc:	2300      	movs	r3, #0
 8002ede:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ee0:	4b2a      	ldr	r3, [pc, #168]	; (8002f8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d003      	beq.n	8002ef4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002eec:	f7ff f922 	bl	8002134 <HAL_PWREx_GetVoltageRange>
 8002ef0:	6178      	str	r0, [r7, #20]
 8002ef2:	e014      	b.n	8002f1e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ef4:	4b25      	ldr	r3, [pc, #148]	; (8002f8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef8:	4a24      	ldr	r2, [pc, #144]	; (8002f8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002efa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002efe:	6593      	str	r3, [r2, #88]	; 0x58
 8002f00:	4b22      	ldr	r3, [pc, #136]	; (8002f8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f08:	60fb      	str	r3, [r7, #12]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f0c:	f7ff f912 	bl	8002134 <HAL_PWREx_GetVoltageRange>
 8002f10:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f12:	4b1e      	ldr	r3, [pc, #120]	; (8002f8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f16:	4a1d      	ldr	r2, [pc, #116]	; (8002f8c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f1c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f24:	d10b      	bne.n	8002f3e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	2b80      	cmp	r3, #128	; 0x80
 8002f2a:	d919      	bls.n	8002f60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2ba0      	cmp	r3, #160	; 0xa0
 8002f30:	d902      	bls.n	8002f38 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f32:	2302      	movs	r3, #2
 8002f34:	613b      	str	r3, [r7, #16]
 8002f36:	e013      	b.n	8002f60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f38:	2301      	movs	r3, #1
 8002f3a:	613b      	str	r3, [r7, #16]
 8002f3c:	e010      	b.n	8002f60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2b80      	cmp	r3, #128	; 0x80
 8002f42:	d902      	bls.n	8002f4a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002f44:	2303      	movs	r3, #3
 8002f46:	613b      	str	r3, [r7, #16]
 8002f48:	e00a      	b.n	8002f60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2b80      	cmp	r3, #128	; 0x80
 8002f4e:	d102      	bne.n	8002f56 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002f50:	2302      	movs	r3, #2
 8002f52:	613b      	str	r3, [r7, #16]
 8002f54:	e004      	b.n	8002f60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b70      	cmp	r3, #112	; 0x70
 8002f5a:	d101      	bne.n	8002f60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002f60:	4b0b      	ldr	r3, [pc, #44]	; (8002f90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f023 0207 	bic.w	r2, r3, #7
 8002f68:	4909      	ldr	r1, [pc, #36]	; (8002f90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002f70:	4b07      	ldr	r3, [pc, #28]	; (8002f90 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d001      	beq.n	8002f82 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e000      	b.n	8002f84 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3718      	adds	r7, #24
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	40022000 	.word	0x40022000

08002f94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d041      	beq.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fb4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002fb8:	d02a      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002fba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002fbe:	d824      	bhi.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002fc0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002fc4:	d008      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002fc6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002fca:	d81e      	bhi.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00a      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002fd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fd4:	d010      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002fd6:	e018      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002fd8:	4b86      	ldr	r3, [pc, #536]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	4a85      	ldr	r2, [pc, #532]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002fe4:	e015      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	3304      	adds	r3, #4
 8002fea:	2100      	movs	r1, #0
 8002fec:	4618      	mov	r0, r3
 8002fee:	f000 facb 	bl	8003588 <RCCEx_PLLSAI1_Config>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ff6:	e00c      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	3320      	adds	r3, #32
 8002ffc:	2100      	movs	r1, #0
 8002ffe:	4618      	mov	r0, r3
 8003000:	f000 fbb6 	bl	8003770 <RCCEx_PLLSAI2_Config>
 8003004:	4603      	mov	r3, r0
 8003006:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003008:	e003      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	74fb      	strb	r3, [r7, #19]
      break;
 800300e:	e000      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003010:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003012:	7cfb      	ldrb	r3, [r7, #19]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d10b      	bne.n	8003030 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003018:	4b76      	ldr	r3, [pc, #472]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800301a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800301e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003026:	4973      	ldr	r1, [pc, #460]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003028:	4313      	orrs	r3, r2
 800302a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800302e:	e001      	b.n	8003034 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003030:	7cfb      	ldrb	r3, [r7, #19]
 8003032:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d041      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003044:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003048:	d02a      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800304a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800304e:	d824      	bhi.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003050:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003054:	d008      	beq.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003056:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800305a:	d81e      	bhi.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00a      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003060:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003064:	d010      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003066:	e018      	b.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003068:	4b62      	ldr	r3, [pc, #392]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	4a61      	ldr	r2, [pc, #388]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800306e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003072:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003074:	e015      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	3304      	adds	r3, #4
 800307a:	2100      	movs	r1, #0
 800307c:	4618      	mov	r0, r3
 800307e:	f000 fa83 	bl	8003588 <RCCEx_PLLSAI1_Config>
 8003082:	4603      	mov	r3, r0
 8003084:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003086:	e00c      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	3320      	adds	r3, #32
 800308c:	2100      	movs	r1, #0
 800308e:	4618      	mov	r0, r3
 8003090:	f000 fb6e 	bl	8003770 <RCCEx_PLLSAI2_Config>
 8003094:	4603      	mov	r3, r0
 8003096:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003098:	e003      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	74fb      	strb	r3, [r7, #19]
      break;
 800309e:	e000      	b.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80030a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030a2:	7cfb      	ldrb	r3, [r7, #19]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d10b      	bne.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80030a8:	4b52      	ldr	r3, [pc, #328]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030b6:	494f      	ldr	r1, [pc, #316]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80030be:	e001      	b.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030c0:	7cfb      	ldrb	r3, [r7, #19]
 80030c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f000 80a0 	beq.w	8003212 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030d2:	2300      	movs	r3, #0
 80030d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80030d6:	4b47      	ldr	r3, [pc, #284]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80030e2:	2301      	movs	r3, #1
 80030e4:	e000      	b.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80030e6:	2300      	movs	r3, #0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00d      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ec:	4b41      	ldr	r3, [pc, #260]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f0:	4a40      	ldr	r2, [pc, #256]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030f6:	6593      	str	r3, [r2, #88]	; 0x58
 80030f8:	4b3e      	ldr	r3, [pc, #248]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003100:	60bb      	str	r3, [r7, #8]
 8003102:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003104:	2301      	movs	r3, #1
 8003106:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003108:	4b3b      	ldr	r3, [pc, #236]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a3a      	ldr	r2, [pc, #232]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800310e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003112:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003114:	f7fe f936 	bl	8001384 <HAL_GetTick>
 8003118:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800311a:	e009      	b.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800311c:	f7fe f932 	bl	8001384 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d902      	bls.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	74fb      	strb	r3, [r7, #19]
        break;
 800312e:	e005      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003130:	4b31      	ldr	r3, [pc, #196]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003138:	2b00      	cmp	r3, #0
 800313a:	d0ef      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800313c:	7cfb      	ldrb	r3, [r7, #19]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d15c      	bne.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003142:	4b2c      	ldr	r3, [pc, #176]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003148:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800314c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d01f      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	429a      	cmp	r2, r3
 800315e:	d019      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003160:	4b24      	ldr	r3, [pc, #144]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003166:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800316a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800316c:	4b21      	ldr	r3, [pc, #132]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800316e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003172:	4a20      	ldr	r2, [pc, #128]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003174:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003178:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800317c:	4b1d      	ldr	r3, [pc, #116]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800317e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003182:	4a1c      	ldr	r2, [pc, #112]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003184:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003188:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800318c:	4a19      	ldr	r2, [pc, #100]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	f003 0301 	and.w	r3, r3, #1
 800319a:	2b00      	cmp	r3, #0
 800319c:	d016      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800319e:	f7fe f8f1 	bl	8001384 <HAL_GetTick>
 80031a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031a4:	e00b      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031a6:	f7fe f8ed 	bl	8001384 <HAL_GetTick>
 80031aa:	4602      	mov	r2, r0
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d902      	bls.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80031b8:	2303      	movs	r3, #3
 80031ba:	74fb      	strb	r3, [r7, #19]
            break;
 80031bc:	e006      	b.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80031be:	4b0d      	ldr	r3, [pc, #52]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d0ec      	beq.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80031cc:	7cfb      	ldrb	r3, [r7, #19]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d10c      	bne.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031d2:	4b08      	ldr	r3, [pc, #32]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031e2:	4904      	ldr	r1, [pc, #16]	; (80031f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80031ea:	e009      	b.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80031ec:	7cfb      	ldrb	r3, [r7, #19]
 80031ee:	74bb      	strb	r3, [r7, #18]
 80031f0:	e006      	b.n	8003200 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80031f2:	bf00      	nop
 80031f4:	40021000 	.word	0x40021000
 80031f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031fc:	7cfb      	ldrb	r3, [r7, #19]
 80031fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003200:	7c7b      	ldrb	r3, [r7, #17]
 8003202:	2b01      	cmp	r3, #1
 8003204:	d105      	bne.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003206:	4b9e      	ldr	r3, [pc, #632]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800320a:	4a9d      	ldr	r2, [pc, #628]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800320c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003210:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00a      	beq.n	8003234 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800321e:	4b98      	ldr	r3, [pc, #608]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003224:	f023 0203 	bic.w	r2, r3, #3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800322c:	4994      	ldr	r1, [pc, #592]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800322e:	4313      	orrs	r3, r2
 8003230:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0302 	and.w	r3, r3, #2
 800323c:	2b00      	cmp	r3, #0
 800323e:	d00a      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003240:	4b8f      	ldr	r3, [pc, #572]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003246:	f023 020c 	bic.w	r2, r3, #12
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800324e:	498c      	ldr	r1, [pc, #560]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003250:	4313      	orrs	r3, r2
 8003252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 0304 	and.w	r3, r3, #4
 800325e:	2b00      	cmp	r3, #0
 8003260:	d00a      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003262:	4b87      	ldr	r3, [pc, #540]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003268:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003270:	4983      	ldr	r1, [pc, #524]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003272:	4313      	orrs	r3, r2
 8003274:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0308 	and.w	r3, r3, #8
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00a      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003284:	4b7e      	ldr	r3, [pc, #504]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003292:	497b      	ldr	r1, [pc, #492]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003294:	4313      	orrs	r3, r2
 8003296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0310 	and.w	r3, r3, #16
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00a      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80032a6:	4b76      	ldr	r3, [pc, #472]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032b4:	4972      	ldr	r1, [pc, #456]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0320 	and.w	r3, r3, #32
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00a      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032c8:	4b6d      	ldr	r3, [pc, #436]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032d6:	496a      	ldr	r1, [pc, #424]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00a      	beq.n	8003300 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032ea:	4b65      	ldr	r3, [pc, #404]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f8:	4961      	ldr	r1, [pc, #388]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00a      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800330c:	4b5c      	ldr	r3, [pc, #368]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800330e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003312:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800331a:	4959      	ldr	r1, [pc, #356]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800331c:	4313      	orrs	r3, r2
 800331e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00a      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800332e:	4b54      	ldr	r3, [pc, #336]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003334:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800333c:	4950      	ldr	r1, [pc, #320]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800333e:	4313      	orrs	r3, r2
 8003340:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800334c:	2b00      	cmp	r3, #0
 800334e:	d00a      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003350:	4b4b      	ldr	r3, [pc, #300]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003356:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800335e:	4948      	ldr	r1, [pc, #288]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003360:	4313      	orrs	r3, r2
 8003362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00a      	beq.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003372:	4b43      	ldr	r3, [pc, #268]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003378:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003380:	493f      	ldr	r1, [pc, #252]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003382:	4313      	orrs	r3, r2
 8003384:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d028      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003394:	4b3a      	ldr	r3, [pc, #232]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800339a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033a2:	4937      	ldr	r1, [pc, #220]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033b2:	d106      	bne.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033b4:	4b32      	ldr	r3, [pc, #200]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	4a31      	ldr	r2, [pc, #196]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033be:	60d3      	str	r3, [r2, #12]
 80033c0:	e011      	b.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033ca:	d10c      	bne.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	3304      	adds	r3, #4
 80033d0:	2101      	movs	r1, #1
 80033d2:	4618      	mov	r0, r3
 80033d4:	f000 f8d8 	bl	8003588 <RCCEx_PLLSAI1_Config>
 80033d8:	4603      	mov	r3, r0
 80033da:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80033dc:	7cfb      	ldrb	r3, [r7, #19]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80033e2:	7cfb      	ldrb	r3, [r7, #19]
 80033e4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d028      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80033f2:	4b23      	ldr	r3, [pc, #140]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033f8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003400:	491f      	ldr	r1, [pc, #124]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003402:	4313      	orrs	r3, r2
 8003404:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003410:	d106      	bne.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003412:	4b1b      	ldr	r3, [pc, #108]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	4a1a      	ldr	r2, [pc, #104]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003418:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800341c:	60d3      	str	r3, [r2, #12]
 800341e:	e011      	b.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003424:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003428:	d10c      	bne.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	3304      	adds	r3, #4
 800342e:	2101      	movs	r1, #1
 8003430:	4618      	mov	r0, r3
 8003432:	f000 f8a9 	bl	8003588 <RCCEx_PLLSAI1_Config>
 8003436:	4603      	mov	r3, r0
 8003438:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800343a:	7cfb      	ldrb	r3, [r7, #19]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d001      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003440:	7cfb      	ldrb	r3, [r7, #19]
 8003442:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d02b      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003450:	4b0b      	ldr	r3, [pc, #44]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003452:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003456:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800345e:	4908      	ldr	r1, [pc, #32]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003460:	4313      	orrs	r3, r2
 8003462:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800346a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800346e:	d109      	bne.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003470:	4b03      	ldr	r3, [pc, #12]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	4a02      	ldr	r2, [pc, #8]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003476:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800347a:	60d3      	str	r3, [r2, #12]
 800347c:	e014      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800347e:	bf00      	nop
 8003480:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003488:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800348c:	d10c      	bne.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	3304      	adds	r3, #4
 8003492:	2101      	movs	r1, #1
 8003494:	4618      	mov	r0, r3
 8003496:	f000 f877 	bl	8003588 <RCCEx_PLLSAI1_Config>
 800349a:	4603      	mov	r3, r0
 800349c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800349e:	7cfb      	ldrb	r3, [r7, #19]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d001      	beq.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80034a4:	7cfb      	ldrb	r3, [r7, #19]
 80034a6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d02f      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80034b4:	4b2b      	ldr	r3, [pc, #172]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034c2:	4928      	ldr	r1, [pc, #160]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80034c4:	4313      	orrs	r3, r2
 80034c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034d2:	d10d      	bne.n	80034f0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	3304      	adds	r3, #4
 80034d8:	2102      	movs	r1, #2
 80034da:	4618      	mov	r0, r3
 80034dc:	f000 f854 	bl	8003588 <RCCEx_PLLSAI1_Config>
 80034e0:	4603      	mov	r3, r0
 80034e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034e4:	7cfb      	ldrb	r3, [r7, #19]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d014      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80034ea:	7cfb      	ldrb	r3, [r7, #19]
 80034ec:	74bb      	strb	r3, [r7, #18]
 80034ee:	e011      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80034f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034f8:	d10c      	bne.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	3320      	adds	r3, #32
 80034fe:	2102      	movs	r1, #2
 8003500:	4618      	mov	r0, r3
 8003502:	f000 f935 	bl	8003770 <RCCEx_PLLSAI2_Config>
 8003506:	4603      	mov	r3, r0
 8003508:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800350a:	7cfb      	ldrb	r3, [r7, #19]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d001      	beq.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003510:	7cfb      	ldrb	r3, [r7, #19]
 8003512:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00a      	beq.n	8003536 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003520:	4b10      	ldr	r3, [pc, #64]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003526:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800352e:	490d      	ldr	r1, [pc, #52]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003530:	4313      	orrs	r3, r2
 8003532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00b      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003542:	4b08      	ldr	r3, [pc, #32]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003548:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003552:	4904      	ldr	r1, [pc, #16]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003554:	4313      	orrs	r3, r2
 8003556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800355a:	7cbb      	ldrb	r3, [r7, #18]
}
 800355c:	4618      	mov	r0, r3
 800355e:	3718      	adds	r7, #24
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	40021000 	.word	0x40021000

08003568 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003568:	b480      	push	{r7}
 800356a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800356c:	4b05      	ldr	r3, [pc, #20]	; (8003584 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a04      	ldr	r2, [pc, #16]	; (8003584 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003572:	f043 0304 	orr.w	r3, r3, #4
 8003576:	6013      	str	r3, [r2, #0]
}
 8003578:	bf00      	nop
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr
 8003582:	bf00      	nop
 8003584:	40021000 	.word	0x40021000

08003588 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003592:	2300      	movs	r3, #0
 8003594:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003596:	4b75      	ldr	r3, [pc, #468]	; (800376c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	f003 0303 	and.w	r3, r3, #3
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d018      	beq.n	80035d4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80035a2:	4b72      	ldr	r3, [pc, #456]	; (800376c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	f003 0203 	and.w	r2, r3, #3
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d10d      	bne.n	80035ce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
       ||
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d009      	beq.n	80035ce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80035ba:	4b6c      	ldr	r3, [pc, #432]	; (800376c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	091b      	lsrs	r3, r3, #4
 80035c0:	f003 0307 	and.w	r3, r3, #7
 80035c4:	1c5a      	adds	r2, r3, #1
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
       ||
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d047      	beq.n	800365e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	73fb      	strb	r3, [r7, #15]
 80035d2:	e044      	b.n	800365e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2b03      	cmp	r3, #3
 80035da:	d018      	beq.n	800360e <RCCEx_PLLSAI1_Config+0x86>
 80035dc:	2b03      	cmp	r3, #3
 80035de:	d825      	bhi.n	800362c <RCCEx_PLLSAI1_Config+0xa4>
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d002      	beq.n	80035ea <RCCEx_PLLSAI1_Config+0x62>
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d009      	beq.n	80035fc <RCCEx_PLLSAI1_Config+0x74>
 80035e8:	e020      	b.n	800362c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035ea:	4b60      	ldr	r3, [pc, #384]	; (800376c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d11d      	bne.n	8003632 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035fa:	e01a      	b.n	8003632 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80035fc:	4b5b      	ldr	r3, [pc, #364]	; (800376c <RCCEx_PLLSAI1_Config+0x1e4>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003604:	2b00      	cmp	r3, #0
 8003606:	d116      	bne.n	8003636 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800360c:	e013      	b.n	8003636 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800360e:	4b57      	ldr	r3, [pc, #348]	; (800376c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d10f      	bne.n	800363a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800361a:	4b54      	ldr	r3, [pc, #336]	; (800376c <RCCEx_PLLSAI1_Config+0x1e4>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d109      	bne.n	800363a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800362a:	e006      	b.n	800363a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	73fb      	strb	r3, [r7, #15]
      break;
 8003630:	e004      	b.n	800363c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003632:	bf00      	nop
 8003634:	e002      	b.n	800363c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003636:	bf00      	nop
 8003638:	e000      	b.n	800363c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800363a:	bf00      	nop
    }

    if(status == HAL_OK)
 800363c:	7bfb      	ldrb	r3, [r7, #15]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10d      	bne.n	800365e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003642:	4b4a      	ldr	r3, [pc, #296]	; (800376c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6819      	ldr	r1, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	3b01      	subs	r3, #1
 8003654:	011b      	lsls	r3, r3, #4
 8003656:	430b      	orrs	r3, r1
 8003658:	4944      	ldr	r1, [pc, #272]	; (800376c <RCCEx_PLLSAI1_Config+0x1e4>)
 800365a:	4313      	orrs	r3, r2
 800365c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800365e:	7bfb      	ldrb	r3, [r7, #15]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d17d      	bne.n	8003760 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003664:	4b41      	ldr	r3, [pc, #260]	; (800376c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a40      	ldr	r2, [pc, #256]	; (800376c <RCCEx_PLLSAI1_Config+0x1e4>)
 800366a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800366e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003670:	f7fd fe88 	bl	8001384 <HAL_GetTick>
 8003674:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003676:	e009      	b.n	800368c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003678:	f7fd fe84 	bl	8001384 <HAL_GetTick>
 800367c:	4602      	mov	r2, r0
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	1ad3      	subs	r3, r2, r3
 8003682:	2b02      	cmp	r3, #2
 8003684:	d902      	bls.n	800368c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003686:	2303      	movs	r3, #3
 8003688:	73fb      	strb	r3, [r7, #15]
        break;
 800368a:	e005      	b.n	8003698 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800368c:	4b37      	ldr	r3, [pc, #220]	; (800376c <RCCEx_PLLSAI1_Config+0x1e4>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d1ef      	bne.n	8003678 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003698:	7bfb      	ldrb	r3, [r7, #15]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d160      	bne.n	8003760 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d111      	bne.n	80036c8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036a4:	4b31      	ldr	r3, [pc, #196]	; (800376c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036a6:	691b      	ldr	r3, [r3, #16]
 80036a8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80036ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	6892      	ldr	r2, [r2, #8]
 80036b4:	0211      	lsls	r1, r2, #8
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	68d2      	ldr	r2, [r2, #12]
 80036ba:	0912      	lsrs	r2, r2, #4
 80036bc:	0452      	lsls	r2, r2, #17
 80036be:	430a      	orrs	r2, r1
 80036c0:	492a      	ldr	r1, [pc, #168]	; (800376c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	610b      	str	r3, [r1, #16]
 80036c6:	e027      	b.n	8003718 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d112      	bne.n	80036f4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036ce:	4b27      	ldr	r3, [pc, #156]	; (800376c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80036d6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	6892      	ldr	r2, [r2, #8]
 80036de:	0211      	lsls	r1, r2, #8
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	6912      	ldr	r2, [r2, #16]
 80036e4:	0852      	lsrs	r2, r2, #1
 80036e6:	3a01      	subs	r2, #1
 80036e8:	0552      	lsls	r2, r2, #21
 80036ea:	430a      	orrs	r2, r1
 80036ec:	491f      	ldr	r1, [pc, #124]	; (800376c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	610b      	str	r3, [r1, #16]
 80036f2:	e011      	b.n	8003718 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036f4:	4b1d      	ldr	r3, [pc, #116]	; (800376c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80036fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	6892      	ldr	r2, [r2, #8]
 8003704:	0211      	lsls	r1, r2, #8
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	6952      	ldr	r2, [r2, #20]
 800370a:	0852      	lsrs	r2, r2, #1
 800370c:	3a01      	subs	r2, #1
 800370e:	0652      	lsls	r2, r2, #25
 8003710:	430a      	orrs	r2, r1
 8003712:	4916      	ldr	r1, [pc, #88]	; (800376c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003714:	4313      	orrs	r3, r2
 8003716:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003718:	4b14      	ldr	r3, [pc, #80]	; (800376c <RCCEx_PLLSAI1_Config+0x1e4>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a13      	ldr	r2, [pc, #76]	; (800376c <RCCEx_PLLSAI1_Config+0x1e4>)
 800371e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003722:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003724:	f7fd fe2e 	bl	8001384 <HAL_GetTick>
 8003728:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800372a:	e009      	b.n	8003740 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800372c:	f7fd fe2a 	bl	8001384 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d902      	bls.n	8003740 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	73fb      	strb	r3, [r7, #15]
          break;
 800373e:	e005      	b.n	800374c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003740:	4b0a      	ldr	r3, [pc, #40]	; (800376c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d0ef      	beq.n	800372c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800374c:	7bfb      	ldrb	r3, [r7, #15]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d106      	bne.n	8003760 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003752:	4b06      	ldr	r3, [pc, #24]	; (800376c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003754:	691a      	ldr	r2, [r3, #16]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	4904      	ldr	r1, [pc, #16]	; (800376c <RCCEx_PLLSAI1_Config+0x1e4>)
 800375c:	4313      	orrs	r3, r2
 800375e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003760:	7bfb      	ldrb	r3, [r7, #15]
}
 8003762:	4618      	mov	r0, r3
 8003764:	3710      	adds	r7, #16
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	40021000 	.word	0x40021000

08003770 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
 8003778:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800377a:	2300      	movs	r3, #0
 800377c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800377e:	4b6a      	ldr	r3, [pc, #424]	; (8003928 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	f003 0303 	and.w	r3, r3, #3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d018      	beq.n	80037bc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800378a:	4b67      	ldr	r3, [pc, #412]	; (8003928 <RCCEx_PLLSAI2_Config+0x1b8>)
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	f003 0203 	and.w	r2, r3, #3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	429a      	cmp	r2, r3
 8003798:	d10d      	bne.n	80037b6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
       ||
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d009      	beq.n	80037b6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80037a2:	4b61      	ldr	r3, [pc, #388]	; (8003928 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	091b      	lsrs	r3, r3, #4
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	1c5a      	adds	r2, r3, #1
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
       ||
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d047      	beq.n	8003846 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	73fb      	strb	r3, [r7, #15]
 80037ba:	e044      	b.n	8003846 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2b03      	cmp	r3, #3
 80037c2:	d018      	beq.n	80037f6 <RCCEx_PLLSAI2_Config+0x86>
 80037c4:	2b03      	cmp	r3, #3
 80037c6:	d825      	bhi.n	8003814 <RCCEx_PLLSAI2_Config+0xa4>
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d002      	beq.n	80037d2 <RCCEx_PLLSAI2_Config+0x62>
 80037cc:	2b02      	cmp	r3, #2
 80037ce:	d009      	beq.n	80037e4 <RCCEx_PLLSAI2_Config+0x74>
 80037d0:	e020      	b.n	8003814 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037d2:	4b55      	ldr	r3, [pc, #340]	; (8003928 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d11d      	bne.n	800381a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037e2:	e01a      	b.n	800381a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037e4:	4b50      	ldr	r3, [pc, #320]	; (8003928 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d116      	bne.n	800381e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037f4:	e013      	b.n	800381e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037f6:	4b4c      	ldr	r3, [pc, #304]	; (8003928 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10f      	bne.n	8003822 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003802:	4b49      	ldr	r3, [pc, #292]	; (8003928 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d109      	bne.n	8003822 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003812:	e006      	b.n	8003822 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	73fb      	strb	r3, [r7, #15]
      break;
 8003818:	e004      	b.n	8003824 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800381a:	bf00      	nop
 800381c:	e002      	b.n	8003824 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800381e:	bf00      	nop
 8003820:	e000      	b.n	8003824 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003822:	bf00      	nop
    }

    if(status == HAL_OK)
 8003824:	7bfb      	ldrb	r3, [r7, #15]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10d      	bne.n	8003846 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800382a:	4b3f      	ldr	r3, [pc, #252]	; (8003928 <RCCEx_PLLSAI2_Config+0x1b8>)
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6819      	ldr	r1, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	3b01      	subs	r3, #1
 800383c:	011b      	lsls	r3, r3, #4
 800383e:	430b      	orrs	r3, r1
 8003840:	4939      	ldr	r1, [pc, #228]	; (8003928 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003842:	4313      	orrs	r3, r2
 8003844:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003846:	7bfb      	ldrb	r3, [r7, #15]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d167      	bne.n	800391c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800384c:	4b36      	ldr	r3, [pc, #216]	; (8003928 <RCCEx_PLLSAI2_Config+0x1b8>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a35      	ldr	r2, [pc, #212]	; (8003928 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003852:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003856:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003858:	f7fd fd94 	bl	8001384 <HAL_GetTick>
 800385c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800385e:	e009      	b.n	8003874 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003860:	f7fd fd90 	bl	8001384 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	2b02      	cmp	r3, #2
 800386c:	d902      	bls.n	8003874 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	73fb      	strb	r3, [r7, #15]
        break;
 8003872:	e005      	b.n	8003880 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003874:	4b2c      	ldr	r3, [pc, #176]	; (8003928 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d1ef      	bne.n	8003860 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003880:	7bfb      	ldrb	r3, [r7, #15]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d14a      	bne.n	800391c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d111      	bne.n	80038b0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800388c:	4b26      	ldr	r3, [pc, #152]	; (8003928 <RCCEx_PLLSAI2_Config+0x1b8>)
 800388e:	695b      	ldr	r3, [r3, #20]
 8003890:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003894:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	6892      	ldr	r2, [r2, #8]
 800389c:	0211      	lsls	r1, r2, #8
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	68d2      	ldr	r2, [r2, #12]
 80038a2:	0912      	lsrs	r2, r2, #4
 80038a4:	0452      	lsls	r2, r2, #17
 80038a6:	430a      	orrs	r2, r1
 80038a8:	491f      	ldr	r1, [pc, #124]	; (8003928 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	614b      	str	r3, [r1, #20]
 80038ae:	e011      	b.n	80038d4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038b0:	4b1d      	ldr	r3, [pc, #116]	; (8003928 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80038b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	6892      	ldr	r2, [r2, #8]
 80038c0:	0211      	lsls	r1, r2, #8
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	6912      	ldr	r2, [r2, #16]
 80038c6:	0852      	lsrs	r2, r2, #1
 80038c8:	3a01      	subs	r2, #1
 80038ca:	0652      	lsls	r2, r2, #25
 80038cc:	430a      	orrs	r2, r1
 80038ce:	4916      	ldr	r1, [pc, #88]	; (8003928 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80038d4:	4b14      	ldr	r3, [pc, #80]	; (8003928 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a13      	ldr	r2, [pc, #76]	; (8003928 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e0:	f7fd fd50 	bl	8001384 <HAL_GetTick>
 80038e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038e6:	e009      	b.n	80038fc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038e8:	f7fd fd4c 	bl	8001384 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d902      	bls.n	80038fc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	73fb      	strb	r3, [r7, #15]
          break;
 80038fa:	e005      	b.n	8003908 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038fc:	4b0a      	ldr	r3, [pc, #40]	; (8003928 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d0ef      	beq.n	80038e8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003908:	7bfb      	ldrb	r3, [r7, #15]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d106      	bne.n	800391c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800390e:	4b06      	ldr	r3, [pc, #24]	; (8003928 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003910:	695a      	ldr	r2, [r3, #20]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	4904      	ldr	r1, [pc, #16]	; (8003928 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003918:	4313      	orrs	r3, r2
 800391a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800391c:	7bfb      	ldrb	r3, [r7, #15]
}
 800391e:	4618      	mov	r0, r3
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	40021000 	.word	0x40021000

0800392c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e095      	b.n	8003a6a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003942:	2b00      	cmp	r3, #0
 8003944:	d108      	bne.n	8003958 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800394e:	d009      	beq.n	8003964 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2200      	movs	r2, #0
 8003954:	61da      	str	r2, [r3, #28]
 8003956:	e005      	b.n	8003964 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d106      	bne.n	8003984 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7fd fa84 	bl	8000e8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2202      	movs	r2, #2
 8003988:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800399a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039a4:	d902      	bls.n	80039ac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80039a6:	2300      	movs	r3, #0
 80039a8:	60fb      	str	r3, [r7, #12]
 80039aa:	e002      	b.n	80039b2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80039ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039b0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	68db      	ldr	r3, [r3, #12]
 80039b6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80039ba:	d007      	beq.n	80039cc <HAL_SPI_Init+0xa0>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80039c4:	d002      	beq.n	80039cc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80039dc:	431a      	orrs	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	431a      	orrs	r2, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	f003 0301 	and.w	r3, r3, #1
 80039f0:	431a      	orrs	r2, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	699b      	ldr	r3, [r3, #24]
 80039f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039fa:	431a      	orrs	r2, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	69db      	ldr	r3, [r3, #28]
 8003a00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a04:	431a      	orrs	r2, r3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a0e:	ea42 0103 	orr.w	r1, r2, r3
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a16:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	0c1b      	lsrs	r3, r3, #16
 8003a28:	f003 0204 	and.w	r2, r3, #4
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a30:	f003 0310 	and.w	r3, r3, #16
 8003a34:	431a      	orrs	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a3a:	f003 0308 	and.w	r3, r3, #8
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003a48:	ea42 0103 	orr.w	r1, r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	430a      	orrs	r2, r1
 8003a58:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003a68:	2300      	movs	r3, #0
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	3710      	adds	r7, #16
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}

08003a72 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a72:	b580      	push	{r7, lr}
 8003a74:	b082      	sub	sp, #8
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e040      	b.n	8003b06 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d106      	bne.n	8003a9a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f7fd fa3d 	bl	8000f14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2224      	movs	r2, #36	; 0x24
 8003a9e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f022 0201 	bic.w	r2, r2, #1
 8003aae:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d002      	beq.n	8003abe <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 fb6b 	bl	8004194 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 f8b0 	bl	8003c24 <UART_SetConfig>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d101      	bne.n	8003ace <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e01b      	b.n	8003b06 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685a      	ldr	r2, [r3, #4]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003adc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	689a      	ldr	r2, [r3, #8]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003aec:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f042 0201 	orr.w	r2, r2, #1
 8003afc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f000 fbea 	bl	80042d8 <UART_CheckIdleState>
 8003b04:	4603      	mov	r3, r0
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	3708      	adds	r7, #8
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b08a      	sub	sp, #40	; 0x28
 8003b12:	af02      	add	r7, sp, #8
 8003b14:	60f8      	str	r0, [r7, #12]
 8003b16:	60b9      	str	r1, [r7, #8]
 8003b18:	603b      	str	r3, [r7, #0]
 8003b1a:	4613      	mov	r3, r2
 8003b1c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b22:	2b20      	cmp	r3, #32
 8003b24:	d178      	bne.n	8003c18 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d002      	beq.n	8003b32 <HAL_UART_Transmit+0x24>
 8003b2c:	88fb      	ldrh	r3, [r7, #6]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d101      	bne.n	8003b36 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e071      	b.n	8003c1a <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2221      	movs	r2, #33	; 0x21
 8003b42:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b44:	f7fd fc1e 	bl	8001384 <HAL_GetTick>
 8003b48:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	88fa      	ldrh	r2, [r7, #6]
 8003b4e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	88fa      	ldrh	r2, [r7, #6]
 8003b56:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b62:	d108      	bne.n	8003b76 <HAL_UART_Transmit+0x68>
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d104      	bne.n	8003b76 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	61bb      	str	r3, [r7, #24]
 8003b74:	e003      	b.n	8003b7e <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003b7e:	e030      	b.n	8003be2 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	9300      	str	r3, [sp, #0]
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	2200      	movs	r2, #0
 8003b88:	2180      	movs	r1, #128	; 0x80
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f000 fc4c 	bl	8004428 <UART_WaitOnFlagUntilTimeout>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d004      	beq.n	8003ba0 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2220      	movs	r2, #32
 8003b9a:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003b9c:	2303      	movs	r3, #3
 8003b9e:	e03c      	b.n	8003c1a <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d10b      	bne.n	8003bbe <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	881a      	ldrh	r2, [r3, #0]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bb2:	b292      	uxth	r2, r2
 8003bb4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003bb6:	69bb      	ldr	r3, [r7, #24]
 8003bb8:	3302      	adds	r3, #2
 8003bba:	61bb      	str	r3, [r7, #24]
 8003bbc:	e008      	b.n	8003bd0 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	781a      	ldrb	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	b292      	uxth	r2, r2
 8003bc8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	3301      	adds	r3, #1
 8003bce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	3b01      	subs	r3, #1
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d1c8      	bne.n	8003b80 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	9300      	str	r3, [sp, #0]
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	2140      	movs	r1, #64	; 0x40
 8003bf8:	68f8      	ldr	r0, [r7, #12]
 8003bfa:	f000 fc15 	bl	8004428 <UART_WaitOnFlagUntilTimeout>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d004      	beq.n	8003c0e <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2220      	movs	r2, #32
 8003c08:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e005      	b.n	8003c1a <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2220      	movs	r2, #32
 8003c12:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003c14:	2300      	movs	r3, #0
 8003c16:	e000      	b.n	8003c1a <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003c18:	2302      	movs	r3, #2
  }
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3720      	adds	r7, #32
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}
	...

08003c24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c28:	b08a      	sub	sp, #40	; 0x28
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	689a      	ldr	r2, [r3, #8]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	431a      	orrs	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	431a      	orrs	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	69db      	ldr	r3, [r3, #28]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	4ba4      	ldr	r3, [pc, #656]	; (8003ee4 <UART_SetConfig+0x2c0>)
 8003c54:	4013      	ands	r3, r2
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	6812      	ldr	r2, [r2, #0]
 8003c5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c5c:	430b      	orrs	r3, r1
 8003c5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	68da      	ldr	r2, [r3, #12]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a99      	ldr	r2, [pc, #612]	; (8003ee8 <UART_SetConfig+0x2c4>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d004      	beq.n	8003c90 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca0:	430a      	orrs	r2, r1
 8003ca2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a90      	ldr	r2, [pc, #576]	; (8003eec <UART_SetConfig+0x2c8>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d126      	bne.n	8003cfc <UART_SetConfig+0xd8>
 8003cae:	4b90      	ldr	r3, [pc, #576]	; (8003ef0 <UART_SetConfig+0x2cc>)
 8003cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb4:	f003 0303 	and.w	r3, r3, #3
 8003cb8:	2b03      	cmp	r3, #3
 8003cba:	d81b      	bhi.n	8003cf4 <UART_SetConfig+0xd0>
 8003cbc:	a201      	add	r2, pc, #4	; (adr r2, 8003cc4 <UART_SetConfig+0xa0>)
 8003cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc2:	bf00      	nop
 8003cc4:	08003cd5 	.word	0x08003cd5
 8003cc8:	08003ce5 	.word	0x08003ce5
 8003ccc:	08003cdd 	.word	0x08003cdd
 8003cd0:	08003ced 	.word	0x08003ced
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cda:	e116      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003cdc:	2302      	movs	r3, #2
 8003cde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ce2:	e112      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003ce4:	2304      	movs	r3, #4
 8003ce6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cea:	e10e      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003cec:	2308      	movs	r3, #8
 8003cee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cf2:	e10a      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003cf4:	2310      	movs	r3, #16
 8003cf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cfa:	e106      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a7c      	ldr	r2, [pc, #496]	; (8003ef4 <UART_SetConfig+0x2d0>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d138      	bne.n	8003d78 <UART_SetConfig+0x154>
 8003d06:	4b7a      	ldr	r3, [pc, #488]	; (8003ef0 <UART_SetConfig+0x2cc>)
 8003d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d0c:	f003 030c 	and.w	r3, r3, #12
 8003d10:	2b0c      	cmp	r3, #12
 8003d12:	d82d      	bhi.n	8003d70 <UART_SetConfig+0x14c>
 8003d14:	a201      	add	r2, pc, #4	; (adr r2, 8003d1c <UART_SetConfig+0xf8>)
 8003d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d1a:	bf00      	nop
 8003d1c:	08003d51 	.word	0x08003d51
 8003d20:	08003d71 	.word	0x08003d71
 8003d24:	08003d71 	.word	0x08003d71
 8003d28:	08003d71 	.word	0x08003d71
 8003d2c:	08003d61 	.word	0x08003d61
 8003d30:	08003d71 	.word	0x08003d71
 8003d34:	08003d71 	.word	0x08003d71
 8003d38:	08003d71 	.word	0x08003d71
 8003d3c:	08003d59 	.word	0x08003d59
 8003d40:	08003d71 	.word	0x08003d71
 8003d44:	08003d71 	.word	0x08003d71
 8003d48:	08003d71 	.word	0x08003d71
 8003d4c:	08003d69 	.word	0x08003d69
 8003d50:	2300      	movs	r3, #0
 8003d52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d56:	e0d8      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003d58:	2302      	movs	r3, #2
 8003d5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d5e:	e0d4      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003d60:	2304      	movs	r3, #4
 8003d62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d66:	e0d0      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003d68:	2308      	movs	r3, #8
 8003d6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d6e:	e0cc      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003d70:	2310      	movs	r3, #16
 8003d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d76:	e0c8      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a5e      	ldr	r2, [pc, #376]	; (8003ef8 <UART_SetConfig+0x2d4>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d125      	bne.n	8003dce <UART_SetConfig+0x1aa>
 8003d82:	4b5b      	ldr	r3, [pc, #364]	; (8003ef0 <UART_SetConfig+0x2cc>)
 8003d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d88:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003d8c:	2b30      	cmp	r3, #48	; 0x30
 8003d8e:	d016      	beq.n	8003dbe <UART_SetConfig+0x19a>
 8003d90:	2b30      	cmp	r3, #48	; 0x30
 8003d92:	d818      	bhi.n	8003dc6 <UART_SetConfig+0x1a2>
 8003d94:	2b20      	cmp	r3, #32
 8003d96:	d00a      	beq.n	8003dae <UART_SetConfig+0x18a>
 8003d98:	2b20      	cmp	r3, #32
 8003d9a:	d814      	bhi.n	8003dc6 <UART_SetConfig+0x1a2>
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d002      	beq.n	8003da6 <UART_SetConfig+0x182>
 8003da0:	2b10      	cmp	r3, #16
 8003da2:	d008      	beq.n	8003db6 <UART_SetConfig+0x192>
 8003da4:	e00f      	b.n	8003dc6 <UART_SetConfig+0x1a2>
 8003da6:	2300      	movs	r3, #0
 8003da8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dac:	e0ad      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003dae:	2302      	movs	r3, #2
 8003db0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003db4:	e0a9      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003db6:	2304      	movs	r3, #4
 8003db8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dbc:	e0a5      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003dbe:	2308      	movs	r3, #8
 8003dc0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dc4:	e0a1      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003dc6:	2310      	movs	r3, #16
 8003dc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dcc:	e09d      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a4a      	ldr	r2, [pc, #296]	; (8003efc <UART_SetConfig+0x2d8>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d125      	bne.n	8003e24 <UART_SetConfig+0x200>
 8003dd8:	4b45      	ldr	r3, [pc, #276]	; (8003ef0 <UART_SetConfig+0x2cc>)
 8003dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dde:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003de2:	2bc0      	cmp	r3, #192	; 0xc0
 8003de4:	d016      	beq.n	8003e14 <UART_SetConfig+0x1f0>
 8003de6:	2bc0      	cmp	r3, #192	; 0xc0
 8003de8:	d818      	bhi.n	8003e1c <UART_SetConfig+0x1f8>
 8003dea:	2b80      	cmp	r3, #128	; 0x80
 8003dec:	d00a      	beq.n	8003e04 <UART_SetConfig+0x1e0>
 8003dee:	2b80      	cmp	r3, #128	; 0x80
 8003df0:	d814      	bhi.n	8003e1c <UART_SetConfig+0x1f8>
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d002      	beq.n	8003dfc <UART_SetConfig+0x1d8>
 8003df6:	2b40      	cmp	r3, #64	; 0x40
 8003df8:	d008      	beq.n	8003e0c <UART_SetConfig+0x1e8>
 8003dfa:	e00f      	b.n	8003e1c <UART_SetConfig+0x1f8>
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e02:	e082      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003e04:	2302      	movs	r3, #2
 8003e06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e0a:	e07e      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003e0c:	2304      	movs	r3, #4
 8003e0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e12:	e07a      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003e14:	2308      	movs	r3, #8
 8003e16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e1a:	e076      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003e1c:	2310      	movs	r3, #16
 8003e1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e22:	e072      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a35      	ldr	r2, [pc, #212]	; (8003f00 <UART_SetConfig+0x2dc>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d12a      	bne.n	8003e84 <UART_SetConfig+0x260>
 8003e2e:	4b30      	ldr	r3, [pc, #192]	; (8003ef0 <UART_SetConfig+0x2cc>)
 8003e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e3c:	d01a      	beq.n	8003e74 <UART_SetConfig+0x250>
 8003e3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e42:	d81b      	bhi.n	8003e7c <UART_SetConfig+0x258>
 8003e44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e48:	d00c      	beq.n	8003e64 <UART_SetConfig+0x240>
 8003e4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e4e:	d815      	bhi.n	8003e7c <UART_SetConfig+0x258>
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d003      	beq.n	8003e5c <UART_SetConfig+0x238>
 8003e54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e58:	d008      	beq.n	8003e6c <UART_SetConfig+0x248>
 8003e5a:	e00f      	b.n	8003e7c <UART_SetConfig+0x258>
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e62:	e052      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003e64:	2302      	movs	r3, #2
 8003e66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e6a:	e04e      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003e6c:	2304      	movs	r3, #4
 8003e6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e72:	e04a      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003e74:	2308      	movs	r3, #8
 8003e76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e7a:	e046      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003e7c:	2310      	movs	r3, #16
 8003e7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e82:	e042      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a17      	ldr	r2, [pc, #92]	; (8003ee8 <UART_SetConfig+0x2c4>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d13a      	bne.n	8003f04 <UART_SetConfig+0x2e0>
 8003e8e:	4b18      	ldr	r3, [pc, #96]	; (8003ef0 <UART_SetConfig+0x2cc>)
 8003e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003e98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e9c:	d01a      	beq.n	8003ed4 <UART_SetConfig+0x2b0>
 8003e9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ea2:	d81b      	bhi.n	8003edc <UART_SetConfig+0x2b8>
 8003ea4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ea8:	d00c      	beq.n	8003ec4 <UART_SetConfig+0x2a0>
 8003eaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003eae:	d815      	bhi.n	8003edc <UART_SetConfig+0x2b8>
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d003      	beq.n	8003ebc <UART_SetConfig+0x298>
 8003eb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eb8:	d008      	beq.n	8003ecc <UART_SetConfig+0x2a8>
 8003eba:	e00f      	b.n	8003edc <UART_SetConfig+0x2b8>
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ec2:	e022      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eca:	e01e      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003ecc:	2304      	movs	r3, #4
 8003ece:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ed2:	e01a      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003ed4:	2308      	movs	r3, #8
 8003ed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eda:	e016      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003edc:	2310      	movs	r3, #16
 8003ede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ee2:	e012      	b.n	8003f0a <UART_SetConfig+0x2e6>
 8003ee4:	efff69f3 	.word	0xefff69f3
 8003ee8:	40008000 	.word	0x40008000
 8003eec:	40013800 	.word	0x40013800
 8003ef0:	40021000 	.word	0x40021000
 8003ef4:	40004400 	.word	0x40004400
 8003ef8:	40004800 	.word	0x40004800
 8003efc:	40004c00 	.word	0x40004c00
 8003f00:	40005000 	.word	0x40005000
 8003f04:	2310      	movs	r3, #16
 8003f06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a9f      	ldr	r2, [pc, #636]	; (800418c <UART_SetConfig+0x568>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d17a      	bne.n	800400a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003f14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003f18:	2b08      	cmp	r3, #8
 8003f1a:	d824      	bhi.n	8003f66 <UART_SetConfig+0x342>
 8003f1c:	a201      	add	r2, pc, #4	; (adr r2, 8003f24 <UART_SetConfig+0x300>)
 8003f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f22:	bf00      	nop
 8003f24:	08003f49 	.word	0x08003f49
 8003f28:	08003f67 	.word	0x08003f67
 8003f2c:	08003f51 	.word	0x08003f51
 8003f30:	08003f67 	.word	0x08003f67
 8003f34:	08003f57 	.word	0x08003f57
 8003f38:	08003f67 	.word	0x08003f67
 8003f3c:	08003f67 	.word	0x08003f67
 8003f40:	08003f67 	.word	0x08003f67
 8003f44:	08003f5f 	.word	0x08003f5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f48:	f7fe ff98 	bl	8002e7c <HAL_RCC_GetPCLK1Freq>
 8003f4c:	61f8      	str	r0, [r7, #28]
        break;
 8003f4e:	e010      	b.n	8003f72 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f50:	4b8f      	ldr	r3, [pc, #572]	; (8004190 <UART_SetConfig+0x56c>)
 8003f52:	61fb      	str	r3, [r7, #28]
        break;
 8003f54:	e00d      	b.n	8003f72 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f56:	f7fe fef9 	bl	8002d4c <HAL_RCC_GetSysClockFreq>
 8003f5a:	61f8      	str	r0, [r7, #28]
        break;
 8003f5c:	e009      	b.n	8003f72 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f62:	61fb      	str	r3, [r7, #28]
        break;
 8003f64:	e005      	b.n	8003f72 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003f66:	2300      	movs	r3, #0
 8003f68:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003f70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f000 80fb 	beq.w	8004170 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	685a      	ldr	r2, [r3, #4]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	4413      	add	r3, r2
 8003f84:	69fa      	ldr	r2, [r7, #28]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d305      	bcc.n	8003f96 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f90:	69fa      	ldr	r2, [r7, #28]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d903      	bls.n	8003f9e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003f9c:	e0e8      	b.n	8004170 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	461c      	mov	r4, r3
 8003fa4:	4615      	mov	r5, r2
 8003fa6:	f04f 0200 	mov.w	r2, #0
 8003faa:	f04f 0300 	mov.w	r3, #0
 8003fae:	022b      	lsls	r3, r5, #8
 8003fb0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003fb4:	0222      	lsls	r2, r4, #8
 8003fb6:	68f9      	ldr	r1, [r7, #12]
 8003fb8:	6849      	ldr	r1, [r1, #4]
 8003fba:	0849      	lsrs	r1, r1, #1
 8003fbc:	2000      	movs	r0, #0
 8003fbe:	4688      	mov	r8, r1
 8003fc0:	4681      	mov	r9, r0
 8003fc2:	eb12 0a08 	adds.w	sl, r2, r8
 8003fc6:	eb43 0b09 	adc.w	fp, r3, r9
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	603b      	str	r3, [r7, #0]
 8003fd2:	607a      	str	r2, [r7, #4]
 8003fd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fd8:	4650      	mov	r0, sl
 8003fda:	4659      	mov	r1, fp
 8003fdc:	f7fc f8f4 	bl	80001c8 <__aeabi_uldivmod>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fee:	d308      	bcc.n	8004002 <UART_SetConfig+0x3de>
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ff6:	d204      	bcs.n	8004002 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	60da      	str	r2, [r3, #12]
 8004000:	e0b6      	b.n	8004170 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004008:	e0b2      	b.n	8004170 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	69db      	ldr	r3, [r3, #28]
 800400e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004012:	d15e      	bne.n	80040d2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004014:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004018:	2b08      	cmp	r3, #8
 800401a:	d828      	bhi.n	800406e <UART_SetConfig+0x44a>
 800401c:	a201      	add	r2, pc, #4	; (adr r2, 8004024 <UART_SetConfig+0x400>)
 800401e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004022:	bf00      	nop
 8004024:	08004049 	.word	0x08004049
 8004028:	08004051 	.word	0x08004051
 800402c:	08004059 	.word	0x08004059
 8004030:	0800406f 	.word	0x0800406f
 8004034:	0800405f 	.word	0x0800405f
 8004038:	0800406f 	.word	0x0800406f
 800403c:	0800406f 	.word	0x0800406f
 8004040:	0800406f 	.word	0x0800406f
 8004044:	08004067 	.word	0x08004067
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004048:	f7fe ff18 	bl	8002e7c <HAL_RCC_GetPCLK1Freq>
 800404c:	61f8      	str	r0, [r7, #28]
        break;
 800404e:	e014      	b.n	800407a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004050:	f7fe ff2a 	bl	8002ea8 <HAL_RCC_GetPCLK2Freq>
 8004054:	61f8      	str	r0, [r7, #28]
        break;
 8004056:	e010      	b.n	800407a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004058:	4b4d      	ldr	r3, [pc, #308]	; (8004190 <UART_SetConfig+0x56c>)
 800405a:	61fb      	str	r3, [r7, #28]
        break;
 800405c:	e00d      	b.n	800407a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800405e:	f7fe fe75 	bl	8002d4c <HAL_RCC_GetSysClockFreq>
 8004062:	61f8      	str	r0, [r7, #28]
        break;
 8004064:	e009      	b.n	800407a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004066:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800406a:	61fb      	str	r3, [r7, #28]
        break;
 800406c:	e005      	b.n	800407a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800406e:	2300      	movs	r3, #0
 8004070:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004078:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d077      	beq.n	8004170 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	005a      	lsls	r2, r3, #1
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	085b      	lsrs	r3, r3, #1
 800408a:	441a      	add	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	fbb2 f3f3 	udiv	r3, r2, r3
 8004094:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	2b0f      	cmp	r3, #15
 800409a:	d916      	bls.n	80040ca <UART_SetConfig+0x4a6>
 800409c:	69bb      	ldr	r3, [r7, #24]
 800409e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040a2:	d212      	bcs.n	80040ca <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040a4:	69bb      	ldr	r3, [r7, #24]
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	f023 030f 	bic.w	r3, r3, #15
 80040ac:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	085b      	lsrs	r3, r3, #1
 80040b2:	b29b      	uxth	r3, r3
 80040b4:	f003 0307 	and.w	r3, r3, #7
 80040b8:	b29a      	uxth	r2, r3
 80040ba:	8afb      	ldrh	r3, [r7, #22]
 80040bc:	4313      	orrs	r3, r2
 80040be:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	8afa      	ldrh	r2, [r7, #22]
 80040c6:	60da      	str	r2, [r3, #12]
 80040c8:	e052      	b.n	8004170 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80040d0:	e04e      	b.n	8004170 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80040d6:	2b08      	cmp	r3, #8
 80040d8:	d827      	bhi.n	800412a <UART_SetConfig+0x506>
 80040da:	a201      	add	r2, pc, #4	; (adr r2, 80040e0 <UART_SetConfig+0x4bc>)
 80040dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e0:	08004105 	.word	0x08004105
 80040e4:	0800410d 	.word	0x0800410d
 80040e8:	08004115 	.word	0x08004115
 80040ec:	0800412b 	.word	0x0800412b
 80040f0:	0800411b 	.word	0x0800411b
 80040f4:	0800412b 	.word	0x0800412b
 80040f8:	0800412b 	.word	0x0800412b
 80040fc:	0800412b 	.word	0x0800412b
 8004100:	08004123 	.word	0x08004123
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004104:	f7fe feba 	bl	8002e7c <HAL_RCC_GetPCLK1Freq>
 8004108:	61f8      	str	r0, [r7, #28]
        break;
 800410a:	e014      	b.n	8004136 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800410c:	f7fe fecc 	bl	8002ea8 <HAL_RCC_GetPCLK2Freq>
 8004110:	61f8      	str	r0, [r7, #28]
        break;
 8004112:	e010      	b.n	8004136 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004114:	4b1e      	ldr	r3, [pc, #120]	; (8004190 <UART_SetConfig+0x56c>)
 8004116:	61fb      	str	r3, [r7, #28]
        break;
 8004118:	e00d      	b.n	8004136 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800411a:	f7fe fe17 	bl	8002d4c <HAL_RCC_GetSysClockFreq>
 800411e:	61f8      	str	r0, [r7, #28]
        break;
 8004120:	e009      	b.n	8004136 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004122:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004126:	61fb      	str	r3, [r7, #28]
        break;
 8004128:	e005      	b.n	8004136 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800412a:	2300      	movs	r3, #0
 800412c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800412e:	2301      	movs	r3, #1
 8004130:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004134:	bf00      	nop
    }

    if (pclk != 0U)
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d019      	beq.n	8004170 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	085a      	lsrs	r2, r3, #1
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	441a      	add	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	fbb2 f3f3 	udiv	r3, r2, r3
 800414e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	2b0f      	cmp	r3, #15
 8004154:	d909      	bls.n	800416a <UART_SetConfig+0x546>
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800415c:	d205      	bcs.n	800416a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800415e:	69bb      	ldr	r3, [r7, #24]
 8004160:	b29a      	uxth	r2, r3
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	60da      	str	r2, [r3, #12]
 8004168:	e002      	b.n	8004170 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2200      	movs	r2, #0
 8004174:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800417c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004180:	4618      	mov	r0, r3
 8004182:	3728      	adds	r7, #40	; 0x28
 8004184:	46bd      	mov	sp, r7
 8004186:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800418a:	bf00      	nop
 800418c:	40008000 	.word	0x40008000
 8004190:	00f42400 	.word	0x00f42400

08004194 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a0:	f003 0308 	and.w	r3, r3, #8
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d00a      	beq.n	80041be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	430a      	orrs	r2, r1
 80041bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d00a      	beq.n	80041e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	430a      	orrs	r2, r1
 80041de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e4:	f003 0302 	and.w	r3, r3, #2
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d00a      	beq.n	8004202 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	430a      	orrs	r2, r1
 8004200:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004206:	f003 0304 	and.w	r3, r3, #4
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00a      	beq.n	8004224 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	430a      	orrs	r2, r1
 8004222:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004228:	f003 0310 	and.w	r3, r3, #16
 800422c:	2b00      	cmp	r3, #0
 800422e:	d00a      	beq.n	8004246 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	430a      	orrs	r2, r1
 8004244:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424a:	f003 0320 	and.w	r3, r3, #32
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00a      	beq.n	8004268 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	430a      	orrs	r2, r1
 8004266:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004270:	2b00      	cmp	r3, #0
 8004272:	d01a      	beq.n	80042aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	430a      	orrs	r2, r1
 8004288:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004292:	d10a      	bne.n	80042aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00a      	beq.n	80042cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	430a      	orrs	r2, r1
 80042ca:	605a      	str	r2, [r3, #4]
  }
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b098      	sub	sp, #96	; 0x60
 80042dc:	af02      	add	r7, sp, #8
 80042de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042e8:	f7fd f84c 	bl	8001384 <HAL_GetTick>
 80042ec:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0308 	and.w	r3, r3, #8
 80042f8:	2b08      	cmp	r3, #8
 80042fa:	d12e      	bne.n	800435a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004300:	9300      	str	r3, [sp, #0]
 8004302:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004304:	2200      	movs	r2, #0
 8004306:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 f88c 	bl	8004428 <UART_WaitOnFlagUntilTimeout>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d021      	beq.n	800435a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800431e:	e853 3f00 	ldrex	r3, [r3]
 8004322:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004326:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800432a:	653b      	str	r3, [r7, #80]	; 0x50
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	461a      	mov	r2, r3
 8004332:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004334:	647b      	str	r3, [r7, #68]	; 0x44
 8004336:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004338:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800433a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800433c:	e841 2300 	strex	r3, r2, [r1]
 8004340:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1e6      	bne.n	8004316 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2220      	movs	r2, #32
 800434c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004356:	2303      	movs	r3, #3
 8004358:	e062      	b.n	8004420 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0304 	and.w	r3, r3, #4
 8004364:	2b04      	cmp	r3, #4
 8004366:	d149      	bne.n	80043fc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004368:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800436c:	9300      	str	r3, [sp, #0]
 800436e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004370:	2200      	movs	r2, #0
 8004372:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 f856 	bl	8004428 <UART_WaitOnFlagUntilTimeout>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d03c      	beq.n	80043fc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438a:	e853 3f00 	ldrex	r3, [r3]
 800438e:	623b      	str	r3, [r7, #32]
   return(result);
 8004390:	6a3b      	ldr	r3, [r7, #32]
 8004392:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004396:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	461a      	mov	r2, r3
 800439e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043a0:	633b      	str	r3, [r7, #48]	; 0x30
 80043a2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043a8:	e841 2300 	strex	r3, r2, [r1]
 80043ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1e6      	bne.n	8004382 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	3308      	adds	r3, #8
 80043ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	e853 3f00 	ldrex	r3, [r3]
 80043c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	f023 0301 	bic.w	r3, r3, #1
 80043ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	3308      	adds	r3, #8
 80043d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043d4:	61fa      	str	r2, [r7, #28]
 80043d6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d8:	69b9      	ldr	r1, [r7, #24]
 80043da:	69fa      	ldr	r2, [r7, #28]
 80043dc:	e841 2300 	strex	r3, r2, [r1]
 80043e0:	617b      	str	r3, [r7, #20]
   return(result);
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1e5      	bne.n	80043b4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2220      	movs	r2, #32
 80043ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e011      	b.n	8004420 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2220      	movs	r2, #32
 8004400:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2220      	movs	r2, #32
 8004406:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3758      	adds	r7, #88	; 0x58
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	603b      	str	r3, [r7, #0]
 8004434:	4613      	mov	r3, r2
 8004436:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004438:	e049      	b.n	80044ce <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004440:	d045      	beq.n	80044ce <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004442:	f7fc ff9f 	bl	8001384 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	69ba      	ldr	r2, [r7, #24]
 800444e:	429a      	cmp	r2, r3
 8004450:	d302      	bcc.n	8004458 <UART_WaitOnFlagUntilTimeout+0x30>
 8004452:	69bb      	ldr	r3, [r7, #24]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d101      	bne.n	800445c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004458:	2303      	movs	r3, #3
 800445a:	e048      	b.n	80044ee <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0304 	and.w	r3, r3, #4
 8004466:	2b00      	cmp	r3, #0
 8004468:	d031      	beq.n	80044ce <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	69db      	ldr	r3, [r3, #28]
 8004470:	f003 0308 	and.w	r3, r3, #8
 8004474:	2b08      	cmp	r3, #8
 8004476:	d110      	bne.n	800449a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2208      	movs	r2, #8
 800447e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f000 f838 	bl	80044f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2208      	movs	r2, #8
 800448a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e029      	b.n	80044ee <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	69db      	ldr	r3, [r3, #28]
 80044a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044a8:	d111      	bne.n	80044ce <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80044b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f000 f81e 	bl	80044f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2220      	movs	r2, #32
 80044be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e00f      	b.n	80044ee <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	69da      	ldr	r2, [r3, #28]
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	4013      	ands	r3, r2
 80044d8:	68ba      	ldr	r2, [r7, #8]
 80044da:	429a      	cmp	r2, r3
 80044dc:	bf0c      	ite	eq
 80044de:	2301      	moveq	r3, #1
 80044e0:	2300      	movne	r3, #0
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	461a      	mov	r2, r3
 80044e6:	79fb      	ldrb	r3, [r7, #7]
 80044e8:	429a      	cmp	r2, r3
 80044ea:	d0a6      	beq.n	800443a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3710      	adds	r7, #16
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044f6:	b480      	push	{r7}
 80044f8:	b095      	sub	sp, #84	; 0x54
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004506:	e853 3f00 	ldrex	r3, [r3]
 800450a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800450c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800450e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004512:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	461a      	mov	r2, r3
 800451a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800451c:	643b      	str	r3, [r7, #64]	; 0x40
 800451e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004520:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004522:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004524:	e841 2300 	strex	r3, r2, [r1]
 8004528:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800452a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800452c:	2b00      	cmp	r3, #0
 800452e:	d1e6      	bne.n	80044fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	3308      	adds	r3, #8
 8004536:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004538:	6a3b      	ldr	r3, [r7, #32]
 800453a:	e853 3f00 	ldrex	r3, [r3]
 800453e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	f023 0301 	bic.w	r3, r3, #1
 8004546:	64bb      	str	r3, [r7, #72]	; 0x48
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	3308      	adds	r3, #8
 800454e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004550:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004552:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004554:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004556:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004558:	e841 2300 	strex	r3, r2, [r1]
 800455c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800455e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004560:	2b00      	cmp	r3, #0
 8004562:	d1e5      	bne.n	8004530 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004568:	2b01      	cmp	r3, #1
 800456a:	d118      	bne.n	800459e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	e853 3f00 	ldrex	r3, [r3]
 8004578:	60bb      	str	r3, [r7, #8]
   return(result);
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	f023 0310 	bic.w	r3, r3, #16
 8004580:	647b      	str	r3, [r7, #68]	; 0x44
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	461a      	mov	r2, r3
 8004588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800458a:	61bb      	str	r3, [r7, #24]
 800458c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800458e:	6979      	ldr	r1, [r7, #20]
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	e841 2300 	strex	r3, r2, [r1]
 8004596:	613b      	str	r3, [r7, #16]
   return(result);
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1e6      	bne.n	800456c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2220      	movs	r2, #32
 80045a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80045b2:	bf00      	nop
 80045b4:	3754      	adds	r7, #84	; 0x54
 80045b6:	46bd      	mov	sp, r7
 80045b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045bc:	4770      	bx	lr

080045be <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80045be:	b084      	sub	sp, #16
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	f107 001c 	add.w	r0, r7, #28
 80045cc:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 fa65 	bl	8004aac <USB_CoreReset>
 80045e2:	4603      	mov	r3, r0
 80045e4:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80045e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d106      	bne.n	80045fa <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	639a      	str	r2, [r3, #56]	; 0x38
 80045f8:	e005      	b.n	8004606 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8004606:	7bfb      	ldrb	r3, [r7, #15]
}
 8004608:	4618      	mov	r0, r3
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004612:	b004      	add	sp, #16
 8004614:	4770      	bx	lr

08004616 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004616:	b480      	push	{r7}
 8004618:	b083      	sub	sp, #12
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f023 0201 	bic.w	r2, r3, #1
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b084      	sub	sp, #16
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	460b      	mov	r3, r1
 8004642:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004644:	2300      	movs	r3, #0
 8004646:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004654:	78fb      	ldrb	r3, [r7, #3]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d115      	bne.n	8004686 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	68db      	ldr	r3, [r3, #12]
 800465e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004666:	2001      	movs	r0, #1
 8004668:	f7fc fe98 	bl	800139c <HAL_Delay>
      ms++;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	3301      	adds	r3, #1
 8004670:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 fa0c 	bl	8004a90 <USB_GetMode>
 8004678:	4603      	mov	r3, r0
 800467a:	2b01      	cmp	r3, #1
 800467c:	d01e      	beq.n	80046bc <USB_SetCurrentMode+0x84>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2b31      	cmp	r3, #49	; 0x31
 8004682:	d9f0      	bls.n	8004666 <USB_SetCurrentMode+0x2e>
 8004684:	e01a      	b.n	80046bc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004686:	78fb      	ldrb	r3, [r7, #3]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d115      	bne.n	80046b8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004698:	2001      	movs	r0, #1
 800469a:	f7fc fe7f 	bl	800139c <HAL_Delay>
      ms++;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	3301      	adds	r3, #1
 80046a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80046a4:	6878      	ldr	r0, [r7, #4]
 80046a6:	f000 f9f3 	bl	8004a90 <USB_GetMode>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d005      	beq.n	80046bc <USB_SetCurrentMode+0x84>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2b31      	cmp	r3, #49	; 0x31
 80046b4:	d9f0      	bls.n	8004698 <USB_SetCurrentMode+0x60>
 80046b6:	e001      	b.n	80046bc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e005      	b.n	80046c8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2b32      	cmp	r3, #50	; 0x32
 80046c0:	d101      	bne.n	80046c6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e000      	b.n	80046c8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3710      	adds	r7, #16
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}

080046d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046d0:	b084      	sub	sp, #16
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b086      	sub	sp, #24
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
 80046da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80046de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80046e2:	2300      	movs	r3, #0
 80046e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80046ea:	2300      	movs	r3, #0
 80046ec:	613b      	str	r3, [r7, #16]
 80046ee:	e009      	b.n	8004704 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	3340      	adds	r3, #64	; 0x40
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	4413      	add	r3, r2
 80046fa:	2200      	movs	r2, #0
 80046fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	3301      	adds	r3, #1
 8004702:	613b      	str	r3, [r7, #16]
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	2b0e      	cmp	r3, #14
 8004708:	d9f2      	bls.n	80046f0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800470a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800470c:	2b00      	cmp	r3, #0
 800470e:	d11c      	bne.n	800474a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004716:	685b      	ldr	r3, [r3, #4]
 8004718:	68fa      	ldr	r2, [r7, #12]
 800471a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800471e:	f043 0302 	orr.w	r3, r3, #2
 8004722:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004728:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	601a      	str	r2, [r3, #0]
 8004748:	e005      	b.n	8004756 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800474e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800475c:	461a      	mov	r2, r3
 800475e:	2300      	movs	r3, #0
 8004760:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004762:	2103      	movs	r1, #3
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f000 f959 	bl	8004a1c <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800476a:	2110      	movs	r1, #16
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 f8f1 	bl	8004954 <USB_FlushTxFifo>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d001      	beq.n	800477c <USB_DevInit+0xac>
  {
    ret = HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 f91d 	bl	80049bc <USB_FlushRxFifo>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d001      	beq.n	800478c <USB_DevInit+0xbc>
  {
    ret = HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004792:	461a      	mov	r2, r3
 8004794:	2300      	movs	r3, #0
 8004796:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800479e:	461a      	mov	r2, r3
 80047a0:	2300      	movs	r3, #0
 80047a2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047aa:	461a      	mov	r2, r3
 80047ac:	2300      	movs	r3, #0
 80047ae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047b0:	2300      	movs	r3, #0
 80047b2:	613b      	str	r3, [r7, #16]
 80047b4:	e043      	b.n	800483e <USB_DevInit+0x16e>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	015a      	lsls	r2, r3, #5
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	4413      	add	r3, r2
 80047be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047cc:	d118      	bne.n	8004800 <USB_DevInit+0x130>
    {
      if (i == 0U)
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d10a      	bne.n	80047ea <USB_DevInit+0x11a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	015a      	lsls	r2, r3, #5
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	4413      	add	r3, r2
 80047dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e0:	461a      	mov	r2, r3
 80047e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80047e6:	6013      	str	r3, [r2, #0]
 80047e8:	e013      	b.n	8004812 <USB_DevInit+0x142>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	015a      	lsls	r2, r3, #5
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	4413      	add	r3, r2
 80047f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047f6:	461a      	mov	r2, r3
 80047f8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80047fc:	6013      	str	r3, [r2, #0]
 80047fe:	e008      	b.n	8004812 <USB_DevInit+0x142>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	015a      	lsls	r2, r3, #5
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	4413      	add	r3, r2
 8004808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800480c:	461a      	mov	r2, r3
 800480e:	2300      	movs	r3, #0
 8004810:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	015a      	lsls	r2, r3, #5
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	4413      	add	r3, r2
 800481a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800481e:	461a      	mov	r2, r3
 8004820:	2300      	movs	r3, #0
 8004822:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	015a      	lsls	r2, r3, #5
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	4413      	add	r3, r2
 800482c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004830:	461a      	mov	r2, r3
 8004832:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004836:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	3301      	adds	r3, #1
 800483c:	613b      	str	r3, [r7, #16]
 800483e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004840:	693a      	ldr	r2, [r7, #16]
 8004842:	429a      	cmp	r2, r3
 8004844:	d3b7      	bcc.n	80047b6 <USB_DevInit+0xe6>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004846:	2300      	movs	r3, #0
 8004848:	613b      	str	r3, [r7, #16]
 800484a:	e043      	b.n	80048d4 <USB_DevInit+0x204>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	015a      	lsls	r2, r3, #5
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	4413      	add	r3, r2
 8004854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800485e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004862:	d118      	bne.n	8004896 <USB_DevInit+0x1c6>
    {
      if (i == 0U)
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10a      	bne.n	8004880 <USB_DevInit+0x1b0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	015a      	lsls	r2, r3, #5
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	4413      	add	r3, r2
 8004872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004876:	461a      	mov	r2, r3
 8004878:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800487c:	6013      	str	r3, [r2, #0]
 800487e:	e013      	b.n	80048a8 <USB_DevInit+0x1d8>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	015a      	lsls	r2, r3, #5
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	4413      	add	r3, r2
 8004888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800488c:	461a      	mov	r2, r3
 800488e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004892:	6013      	str	r3, [r2, #0]
 8004894:	e008      	b.n	80048a8 <USB_DevInit+0x1d8>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	015a      	lsls	r2, r3, #5
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	4413      	add	r3, r2
 800489e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a2:	461a      	mov	r2, r3
 80048a4:	2300      	movs	r3, #0
 80048a6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	015a      	lsls	r2, r3, #5
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	4413      	add	r3, r2
 80048b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048b4:	461a      	mov	r2, r3
 80048b6:	2300      	movs	r3, #0
 80048b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	015a      	lsls	r2, r3, #5
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	4413      	add	r3, r2
 80048c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048c6:	461a      	mov	r2, r3
 80048c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80048cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	3301      	adds	r3, #1
 80048d2:	613b      	str	r3, [r7, #16]
 80048d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d6:	693a      	ldr	r2, [r7, #16]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d3b7      	bcc.n	800484c <USB_DevInit+0x17c>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048ee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80048fc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	699b      	ldr	r3, [r3, #24]
 8004902:	f043 0210 	orr.w	r2, r3, #16
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	699a      	ldr	r2, [r3, #24]
 800490e:	4b10      	ldr	r3, [pc, #64]	; (8004950 <USB_DevInit+0x280>)
 8004910:	4313      	orrs	r3, r2
 8004912:	687a      	ldr	r2, [r7, #4]
 8004914:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004918:	2b00      	cmp	r3, #0
 800491a:	d005      	beq.n	8004928 <USB_DevInit+0x258>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	f043 0208 	orr.w	r2, r3, #8
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004928:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800492a:	2b01      	cmp	r3, #1
 800492c:	d107      	bne.n	800493e <USB_DevInit+0x26e>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004936:	f043 0304 	orr.w	r3, r3, #4
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800493e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004940:	4618      	mov	r0, r3
 8004942:	3718      	adds	r7, #24
 8004944:	46bd      	mov	sp, r7
 8004946:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800494a:	b004      	add	sp, #16
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	803c3800 	.word	0x803c3800

08004954 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004954:	b480      	push	{r7}
 8004956:	b085      	sub	sp, #20
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
 800495c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800495e:	2300      	movs	r3, #0
 8004960:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	3301      	adds	r3, #1
 8004966:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	4a13      	ldr	r2, [pc, #76]	; (80049b8 <USB_FlushTxFifo+0x64>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d901      	bls.n	8004974 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e01b      	b.n	80049ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	2b00      	cmp	r3, #0
 800497a:	daf2      	bge.n	8004962 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800497c:	2300      	movs	r3, #0
 800497e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	019b      	lsls	r3, r3, #6
 8004984:	f043 0220 	orr.w	r2, r3, #32
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	3301      	adds	r3, #1
 8004990:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	4a08      	ldr	r2, [pc, #32]	; (80049b8 <USB_FlushTxFifo+0x64>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d901      	bls.n	800499e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e006      	b.n	80049ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	691b      	ldr	r3, [r3, #16]
 80049a2:	f003 0320 	and.w	r3, r3, #32
 80049a6:	2b20      	cmp	r3, #32
 80049a8:	d0f0      	beq.n	800498c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80049aa:	2300      	movs	r3, #0
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3714      	adds	r7, #20
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr
 80049b8:	00030d40 	.word	0x00030d40

080049bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80049c4:	2300      	movs	r3, #0
 80049c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	3301      	adds	r3, #1
 80049cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	4a11      	ldr	r2, [pc, #68]	; (8004a18 <USB_FlushRxFifo+0x5c>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d901      	bls.n	80049da <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e018      	b.n	8004a0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	daf2      	bge.n	80049c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80049e2:	2300      	movs	r3, #0
 80049e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2210      	movs	r2, #16
 80049ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	3301      	adds	r3, #1
 80049f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	4a08      	ldr	r2, [pc, #32]	; (8004a18 <USB_FlushRxFifo+0x5c>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d901      	bls.n	80049fe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e006      	b.n	8004a0c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	f003 0310 	and.w	r3, r3, #16
 8004a06:	2b10      	cmp	r3, #16
 8004a08:	d0f0      	beq.n	80049ec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3714      	adds	r7, #20
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr
 8004a18:	00030d40 	.word	0x00030d40

08004a1c <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	460b      	mov	r3, r1
 8004a26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	78fb      	ldrb	r3, [r7, #3]
 8004a36:	68f9      	ldr	r1, [r7, #12]
 8004a38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004a40:	2300      	movs	r3, #0
}
 8004a42:	4618      	mov	r0, r3
 8004a44:	3714      	adds	r7, #20
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr

08004a4e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004a4e:	b480      	push	{r7}
 8004a50:	b085      	sub	sp, #20
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004a68:	f023 0303 	bic.w	r3, r3, #3
 8004a6c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a7c:	f043 0302 	orr.w	r3, r3, #2
 8004a80:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3714      	adds	r7, #20
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b083      	sub	sp, #12
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	695b      	ldr	r3, [r3, #20]
 8004a9c:	f003 0301 	and.w	r3, r3, #1
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	370c      	adds	r7, #12
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aaa:	4770      	bx	lr

08004aac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b085      	sub	sp, #20
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	3301      	adds	r3, #1
 8004abc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	4a13      	ldr	r2, [pc, #76]	; (8004b10 <USB_CoreReset+0x64>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d901      	bls.n	8004aca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e01b      	b.n	8004b02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	daf2      	bge.n	8004ab8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	f043 0201 	orr.w	r2, r3, #1
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	4a09      	ldr	r2, [pc, #36]	; (8004b10 <USB_CoreReset+0x64>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d901      	bls.n	8004af4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e006      	b.n	8004b02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	f003 0301 	and.w	r3, r3, #1
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d0f0      	beq.n	8004ae2 <USB_CoreReset+0x36>

  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3714      	adds	r7, #20
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	00030d40 	.word	0x00030d40

08004b14 <memset>:
 8004b14:	4402      	add	r2, r0
 8004b16:	4603      	mov	r3, r0
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d100      	bne.n	8004b1e <memset+0xa>
 8004b1c:	4770      	bx	lr
 8004b1e:	f803 1b01 	strb.w	r1, [r3], #1
 8004b22:	e7f9      	b.n	8004b18 <memset+0x4>

08004b24 <__libc_init_array>:
 8004b24:	b570      	push	{r4, r5, r6, lr}
 8004b26:	4d0d      	ldr	r5, [pc, #52]	; (8004b5c <__libc_init_array+0x38>)
 8004b28:	4c0d      	ldr	r4, [pc, #52]	; (8004b60 <__libc_init_array+0x3c>)
 8004b2a:	1b64      	subs	r4, r4, r5
 8004b2c:	10a4      	asrs	r4, r4, #2
 8004b2e:	2600      	movs	r6, #0
 8004b30:	42a6      	cmp	r6, r4
 8004b32:	d109      	bne.n	8004b48 <__libc_init_array+0x24>
 8004b34:	4d0b      	ldr	r5, [pc, #44]	; (8004b64 <__libc_init_array+0x40>)
 8004b36:	4c0c      	ldr	r4, [pc, #48]	; (8004b68 <__libc_init_array+0x44>)
 8004b38:	f000 f818 	bl	8004b6c <_init>
 8004b3c:	1b64      	subs	r4, r4, r5
 8004b3e:	10a4      	asrs	r4, r4, #2
 8004b40:	2600      	movs	r6, #0
 8004b42:	42a6      	cmp	r6, r4
 8004b44:	d105      	bne.n	8004b52 <__libc_init_array+0x2e>
 8004b46:	bd70      	pop	{r4, r5, r6, pc}
 8004b48:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b4c:	4798      	blx	r3
 8004b4e:	3601      	adds	r6, #1
 8004b50:	e7ee      	b.n	8004b30 <__libc_init_array+0xc>
 8004b52:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b56:	4798      	blx	r3
 8004b58:	3601      	adds	r6, #1
 8004b5a:	e7f2      	b.n	8004b42 <__libc_init_array+0x1e>
 8004b5c:	08004be8 	.word	0x08004be8
 8004b60:	08004be8 	.word	0x08004be8
 8004b64:	08004be8 	.word	0x08004be8
 8004b68:	08004bec 	.word	0x08004bec

08004b6c <_init>:
 8004b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b6e:	bf00      	nop
 8004b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b72:	bc08      	pop	{r3}
 8004b74:	469e      	mov	lr, r3
 8004b76:	4770      	bx	lr

08004b78 <_fini>:
 8004b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b7a:	bf00      	nop
 8004b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b7e:	bc08      	pop	{r3}
 8004b80:	469e      	mov	lr, r3
 8004b82:	4770      	bx	lr
